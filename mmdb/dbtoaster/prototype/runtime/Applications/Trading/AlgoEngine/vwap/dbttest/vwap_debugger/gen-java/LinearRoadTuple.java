/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class LinearRoadTuple implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("LinearRoadTuple");
  private static final TField RECTYPE_FIELD_DESC = new TField("rectype", TType.I32, (short)1);
  private static final TField T_FIELD_DESC = new TField("t", TType.I32, (short)2);
  private static final TField VID_FIELD_DESC = new TField("vid", TType.I32, (short)3);
  private static final TField SPEED_FIELD_DESC = new TField("speed", TType.I32, (short)4);
  private static final TField XWAY_FIELD_DESC = new TField("xway", TType.I32, (short)5);
  private static final TField LANE_FIELD_DESC = new TField("lane", TType.I32, (short)6);
  private static final TField DIR_FIELD_DESC = new TField("dir", TType.I32, (short)7);
  private static final TField SEG_FIELD_DESC = new TField("seg", TType.I32, (short)8);
  private static final TField POS_FIELD_DESC = new TField("pos", TType.I32, (short)9);
  private static final TField QID_FIELD_DESC = new TField("qid", TType.I32, (short)10);
  private static final TField SINIT_FIELD_DESC = new TField("sinit", TType.I32, (short)11);
  private static final TField SEND_FIELD_DESC = new TField("send", TType.I32, (short)12);
  private static final TField DOW_FIELD_DESC = new TField("dow", TType.I32, (short)13);
  private static final TField TOD_FIELD_DESC = new TField("tod", TType.I32, (short)14);
  private static final TField DAY_FIELD_DESC = new TField("day", TType.I32, (short)15);

  public int rectype;
  public static final int RECTYPE = 1;
  public int t;
  public static final int T = 2;
  public int vid;
  public static final int VID = 3;
  public int speed;
  public static final int SPEED = 4;
  public int xway;
  public static final int XWAY = 5;
  public int lane;
  public static final int LANE = 6;
  public int dir;
  public static final int DIR = 7;
  public int seg;
  public static final int SEG = 8;
  public int pos;
  public static final int POS = 9;
  public int qid;
  public static final int QID = 10;
  public int sinit;
  public static final int SINIT = 11;
  public int send;
  public static final int SEND = 12;
  public int dow;
  public static final int DOW = 13;
  public int tod;
  public static final int TOD = 14;
  public int day;
  public static final int DAY = 15;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean rectype = false;
    public boolean t = false;
    public boolean vid = false;
    public boolean speed = false;
    public boolean xway = false;
    public boolean lane = false;
    public boolean dir = false;
    public boolean seg = false;
    public boolean pos = false;
    public boolean qid = false;
    public boolean sinit = false;
    public boolean send = false;
    public boolean dow = false;
    public boolean tod = false;
    public boolean day = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(RECTYPE, new FieldMetaData("rectype", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(T, new FieldMetaData("t", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(VID, new FieldMetaData("vid", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(SPEED, new FieldMetaData("speed", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(XWAY, new FieldMetaData("xway", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(LANE, new FieldMetaData("lane", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(DIR, new FieldMetaData("dir", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(SEG, new FieldMetaData("seg", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(POS, new FieldMetaData("pos", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(QID, new FieldMetaData("qid", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(SINIT, new FieldMetaData("sinit", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(SEND, new FieldMetaData("send", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(DOW, new FieldMetaData("dow", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(TOD, new FieldMetaData("tod", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(DAY, new FieldMetaData("day", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(LinearRoadTuple.class, metaDataMap);
  }

  public LinearRoadTuple() {
  }

  public LinearRoadTuple(
    int rectype,
    int t,
    int vid,
    int speed,
    int xway,
    int lane,
    int dir,
    int seg,
    int pos,
    int qid,
    int sinit,
    int send,
    int dow,
    int tod,
    int day)
  {
    this();
    this.rectype = rectype;
    this.__isset.rectype = true;
    this.t = t;
    this.__isset.t = true;
    this.vid = vid;
    this.__isset.vid = true;
    this.speed = speed;
    this.__isset.speed = true;
    this.xway = xway;
    this.__isset.xway = true;
    this.lane = lane;
    this.__isset.lane = true;
    this.dir = dir;
    this.__isset.dir = true;
    this.seg = seg;
    this.__isset.seg = true;
    this.pos = pos;
    this.__isset.pos = true;
    this.qid = qid;
    this.__isset.qid = true;
    this.sinit = sinit;
    this.__isset.sinit = true;
    this.send = send;
    this.__isset.send = true;
    this.dow = dow;
    this.__isset.dow = true;
    this.tod = tod;
    this.__isset.tod = true;
    this.day = day;
    this.__isset.day = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LinearRoadTuple(LinearRoadTuple other) {
    __isset.rectype = other.__isset.rectype;
    this.rectype = other.rectype;
    __isset.t = other.__isset.t;
    this.t = other.t;
    __isset.vid = other.__isset.vid;
    this.vid = other.vid;
    __isset.speed = other.__isset.speed;
    this.speed = other.speed;
    __isset.xway = other.__isset.xway;
    this.xway = other.xway;
    __isset.lane = other.__isset.lane;
    this.lane = other.lane;
    __isset.dir = other.__isset.dir;
    this.dir = other.dir;
    __isset.seg = other.__isset.seg;
    this.seg = other.seg;
    __isset.pos = other.__isset.pos;
    this.pos = other.pos;
    __isset.qid = other.__isset.qid;
    this.qid = other.qid;
    __isset.sinit = other.__isset.sinit;
    this.sinit = other.sinit;
    __isset.send = other.__isset.send;
    this.send = other.send;
    __isset.dow = other.__isset.dow;
    this.dow = other.dow;
    __isset.tod = other.__isset.tod;
    this.tod = other.tod;
    __isset.day = other.__isset.day;
    this.day = other.day;
  }

  @Override
  public LinearRoadTuple clone() {
    return new LinearRoadTuple(this);
  }

  public int getRectype() {
    return this.rectype;
  }

  public void setRectype(int rectype) {
    this.rectype = rectype;
    this.__isset.rectype = true;
  }

  public void unsetRectype() {
    this.__isset.rectype = false;
  }

  // Returns true if field rectype is set (has been asigned a value) and false otherwise
  public boolean isSetRectype() {
    return this.__isset.rectype;
  }

  public void setRectypeIsSet(boolean value) {
    this.__isset.rectype = value;
  }

  public int getT() {
    return this.t;
  }

  public void setT(int t) {
    this.t = t;
    this.__isset.t = true;
  }

  public void unsetT() {
    this.__isset.t = false;
  }

  // Returns true if field t is set (has been asigned a value) and false otherwise
  public boolean isSetT() {
    return this.__isset.t;
  }

  public void setTIsSet(boolean value) {
    this.__isset.t = value;
  }

  public int getVid() {
    return this.vid;
  }

  public void setVid(int vid) {
    this.vid = vid;
    this.__isset.vid = true;
  }

  public void unsetVid() {
    this.__isset.vid = false;
  }

  // Returns true if field vid is set (has been asigned a value) and false otherwise
  public boolean isSetVid() {
    return this.__isset.vid;
  }

  public void setVidIsSet(boolean value) {
    this.__isset.vid = value;
  }

  public int getSpeed() {
    return this.speed;
  }

  public void setSpeed(int speed) {
    this.speed = speed;
    this.__isset.speed = true;
  }

  public void unsetSpeed() {
    this.__isset.speed = false;
  }

  // Returns true if field speed is set (has been asigned a value) and false otherwise
  public boolean isSetSpeed() {
    return this.__isset.speed;
  }

  public void setSpeedIsSet(boolean value) {
    this.__isset.speed = value;
  }

  public int getXway() {
    return this.xway;
  }

  public void setXway(int xway) {
    this.xway = xway;
    this.__isset.xway = true;
  }

  public void unsetXway() {
    this.__isset.xway = false;
  }

  // Returns true if field xway is set (has been asigned a value) and false otherwise
  public boolean isSetXway() {
    return this.__isset.xway;
  }

  public void setXwayIsSet(boolean value) {
    this.__isset.xway = value;
  }

  public int getLane() {
    return this.lane;
  }

  public void setLane(int lane) {
    this.lane = lane;
    this.__isset.lane = true;
  }

  public void unsetLane() {
    this.__isset.lane = false;
  }

  // Returns true if field lane is set (has been asigned a value) and false otherwise
  public boolean isSetLane() {
    return this.__isset.lane;
  }

  public void setLaneIsSet(boolean value) {
    this.__isset.lane = value;
  }

  public int getDir() {
    return this.dir;
  }

  public void setDir(int dir) {
    this.dir = dir;
    this.__isset.dir = true;
  }

  public void unsetDir() {
    this.__isset.dir = false;
  }

  // Returns true if field dir is set (has been asigned a value) and false otherwise
  public boolean isSetDir() {
    return this.__isset.dir;
  }

  public void setDirIsSet(boolean value) {
    this.__isset.dir = value;
  }

  public int getSeg() {
    return this.seg;
  }

  public void setSeg(int seg) {
    this.seg = seg;
    this.__isset.seg = true;
  }

  public void unsetSeg() {
    this.__isset.seg = false;
  }

  // Returns true if field seg is set (has been asigned a value) and false otherwise
  public boolean isSetSeg() {
    return this.__isset.seg;
  }

  public void setSegIsSet(boolean value) {
    this.__isset.seg = value;
  }

  public int getPos() {
    return this.pos;
  }

  public void setPos(int pos) {
    this.pos = pos;
    this.__isset.pos = true;
  }

  public void unsetPos() {
    this.__isset.pos = false;
  }

  // Returns true if field pos is set (has been asigned a value) and false otherwise
  public boolean isSetPos() {
    return this.__isset.pos;
  }

  public void setPosIsSet(boolean value) {
    this.__isset.pos = value;
  }

  public int getQid() {
    return this.qid;
  }

  public void setQid(int qid) {
    this.qid = qid;
    this.__isset.qid = true;
  }

  public void unsetQid() {
    this.__isset.qid = false;
  }

  // Returns true if field qid is set (has been asigned a value) and false otherwise
  public boolean isSetQid() {
    return this.__isset.qid;
  }

  public void setQidIsSet(boolean value) {
    this.__isset.qid = value;
  }

  public int getSinit() {
    return this.sinit;
  }

  public void setSinit(int sinit) {
    this.sinit = sinit;
    this.__isset.sinit = true;
  }

  public void unsetSinit() {
    this.__isset.sinit = false;
  }

  // Returns true if field sinit is set (has been asigned a value) and false otherwise
  public boolean isSetSinit() {
    return this.__isset.sinit;
  }

  public void setSinitIsSet(boolean value) {
    this.__isset.sinit = value;
  }

  public int getSend() {
    return this.send;
  }

  public void setSend(int send) {
    this.send = send;
    this.__isset.send = true;
  }

  public void unsetSend() {
    this.__isset.send = false;
  }

  // Returns true if field send is set (has been asigned a value) and false otherwise
  public boolean isSetSend() {
    return this.__isset.send;
  }

  public void setSendIsSet(boolean value) {
    this.__isset.send = value;
  }

  public int getDow() {
    return this.dow;
  }

  public void setDow(int dow) {
    this.dow = dow;
    this.__isset.dow = true;
  }

  public void unsetDow() {
    this.__isset.dow = false;
  }

  // Returns true if field dow is set (has been asigned a value) and false otherwise
  public boolean isSetDow() {
    return this.__isset.dow;
  }

  public void setDowIsSet(boolean value) {
    this.__isset.dow = value;
  }

  public int getTod() {
    return this.tod;
  }

  public void setTod(int tod) {
    this.tod = tod;
    this.__isset.tod = true;
  }

  public void unsetTod() {
    this.__isset.tod = false;
  }

  // Returns true if field tod is set (has been asigned a value) and false otherwise
  public boolean isSetTod() {
    return this.__isset.tod;
  }

  public void setTodIsSet(boolean value) {
    this.__isset.tod = value;
  }

  public int getDay() {
    return this.day;
  }

  public void setDay(int day) {
    this.day = day;
    this.__isset.day = true;
  }

  public void unsetDay() {
    this.__isset.day = false;
  }

  // Returns true if field day is set (has been asigned a value) and false otherwise
  public boolean isSetDay() {
    return this.__isset.day;
  }

  public void setDayIsSet(boolean value) {
    this.__isset.day = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case RECTYPE:
      if (value == null) {
        unsetRectype();
      } else {
        setRectype((Integer)value);
      }
      break;

    case T:
      if (value == null) {
        unsetT();
      } else {
        setT((Integer)value);
      }
      break;

    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((Integer)value);
      }
      break;

    case SPEED:
      if (value == null) {
        unsetSpeed();
      } else {
        setSpeed((Integer)value);
      }
      break;

    case XWAY:
      if (value == null) {
        unsetXway();
      } else {
        setXway((Integer)value);
      }
      break;

    case LANE:
      if (value == null) {
        unsetLane();
      } else {
        setLane((Integer)value);
      }
      break;

    case DIR:
      if (value == null) {
        unsetDir();
      } else {
        setDir((Integer)value);
      }
      break;

    case SEG:
      if (value == null) {
        unsetSeg();
      } else {
        setSeg((Integer)value);
      }
      break;

    case POS:
      if (value == null) {
        unsetPos();
      } else {
        setPos((Integer)value);
      }
      break;

    case QID:
      if (value == null) {
        unsetQid();
      } else {
        setQid((Integer)value);
      }
      break;

    case SINIT:
      if (value == null) {
        unsetSinit();
      } else {
        setSinit((Integer)value);
      }
      break;

    case SEND:
      if (value == null) {
        unsetSend();
      } else {
        setSend((Integer)value);
      }
      break;

    case DOW:
      if (value == null) {
        unsetDow();
      } else {
        setDow((Integer)value);
      }
      break;

    case TOD:
      if (value == null) {
        unsetTod();
      } else {
        setTod((Integer)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case RECTYPE:
      return new Integer(getRectype());

    case T:
      return new Integer(getT());

    case VID:
      return new Integer(getVid());

    case SPEED:
      return new Integer(getSpeed());

    case XWAY:
      return new Integer(getXway());

    case LANE:
      return new Integer(getLane());

    case DIR:
      return new Integer(getDir());

    case SEG:
      return new Integer(getSeg());

    case POS:
      return new Integer(getPos());

    case QID:
      return new Integer(getQid());

    case SINIT:
      return new Integer(getSinit());

    case SEND:
      return new Integer(getSend());

    case DOW:
      return new Integer(getDow());

    case TOD:
      return new Integer(getTod());

    case DAY:
      return new Integer(getDay());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case RECTYPE:
      return isSetRectype();
    case T:
      return isSetT();
    case VID:
      return isSetVid();
    case SPEED:
      return isSetSpeed();
    case XWAY:
      return isSetXway();
    case LANE:
      return isSetLane();
    case DIR:
      return isSetDir();
    case SEG:
      return isSetSeg();
    case POS:
      return isSetPos();
    case QID:
      return isSetQid();
    case SINIT:
      return isSetSinit();
    case SEND:
      return isSetSend();
    case DOW:
      return isSetDow();
    case TOD:
      return isSetTod();
    case DAY:
      return isSetDay();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LinearRoadTuple)
      return this.equals((LinearRoadTuple)that);
    return false;
  }

  public boolean equals(LinearRoadTuple that) {
    if (that == null)
      return false;

    boolean this_present_rectype = true;
    boolean that_present_rectype = true;
    if (this_present_rectype || that_present_rectype) {
      if (!(this_present_rectype && that_present_rectype))
        return false;
      if (this.rectype != that.rectype)
        return false;
    }

    boolean this_present_t = true;
    boolean that_present_t = true;
    if (this_present_t || that_present_t) {
      if (!(this_present_t && that_present_t))
        return false;
      if (this.t != that.t)
        return false;
    }

    boolean this_present_vid = true;
    boolean that_present_vid = true;
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (this.vid != that.vid)
        return false;
    }

    boolean this_present_speed = true;
    boolean that_present_speed = true;
    if (this_present_speed || that_present_speed) {
      if (!(this_present_speed && that_present_speed))
        return false;
      if (this.speed != that.speed)
        return false;
    }

    boolean this_present_xway = true;
    boolean that_present_xway = true;
    if (this_present_xway || that_present_xway) {
      if (!(this_present_xway && that_present_xway))
        return false;
      if (this.xway != that.xway)
        return false;
    }

    boolean this_present_lane = true;
    boolean that_present_lane = true;
    if (this_present_lane || that_present_lane) {
      if (!(this_present_lane && that_present_lane))
        return false;
      if (this.lane != that.lane)
        return false;
    }

    boolean this_present_dir = true;
    boolean that_present_dir = true;
    if (this_present_dir || that_present_dir) {
      if (!(this_present_dir && that_present_dir))
        return false;
      if (this.dir != that.dir)
        return false;
    }

    boolean this_present_seg = true;
    boolean that_present_seg = true;
    if (this_present_seg || that_present_seg) {
      if (!(this_present_seg && that_present_seg))
        return false;
      if (this.seg != that.seg)
        return false;
    }

    boolean this_present_pos = true;
    boolean that_present_pos = true;
    if (this_present_pos || that_present_pos) {
      if (!(this_present_pos && that_present_pos))
        return false;
      if (this.pos != that.pos)
        return false;
    }

    boolean this_present_qid = true;
    boolean that_present_qid = true;
    if (this_present_qid || that_present_qid) {
      if (!(this_present_qid && that_present_qid))
        return false;
      if (this.qid != that.qid)
        return false;
    }

    boolean this_present_sinit = true;
    boolean that_present_sinit = true;
    if (this_present_sinit || that_present_sinit) {
      if (!(this_present_sinit && that_present_sinit))
        return false;
      if (this.sinit != that.sinit)
        return false;
    }

    boolean this_present_send = true;
    boolean that_present_send = true;
    if (this_present_send || that_present_send) {
      if (!(this_present_send && that_present_send))
        return false;
      if (this.send != that.send)
        return false;
    }

    boolean this_present_dow = true;
    boolean that_present_dow = true;
    if (this_present_dow || that_present_dow) {
      if (!(this_present_dow && that_present_dow))
        return false;
      if (this.dow != that.dow)
        return false;
    }

    boolean this_present_tod = true;
    boolean that_present_tod = true;
    if (this_present_tod || that_present_tod) {
      if (!(this_present_tod && that_present_tod))
        return false;
      if (this.tod != that.tod)
        return false;
    }

    boolean this_present_day = true;
    boolean that_present_day = true;
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (this.day != that.day)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case RECTYPE:
          if (field.type == TType.I32) {
            this.rectype = iprot.readI32();
            this.__isset.rectype = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case T:
          if (field.type == TType.I32) {
            this.t = iprot.readI32();
            this.__isset.t = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VID:
          if (field.type == TType.I32) {
            this.vid = iprot.readI32();
            this.__isset.vid = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPEED:
          if (field.type == TType.I32) {
            this.speed = iprot.readI32();
            this.__isset.speed = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case XWAY:
          if (field.type == TType.I32) {
            this.xway = iprot.readI32();
            this.__isset.xway = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LANE:
          if (field.type == TType.I32) {
            this.lane = iprot.readI32();
            this.__isset.lane = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DIR:
          if (field.type == TType.I32) {
            this.dir = iprot.readI32();
            this.__isset.dir = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEG:
          if (field.type == TType.I32) {
            this.seg = iprot.readI32();
            this.__isset.seg = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case POS:
          if (field.type == TType.I32) {
            this.pos = iprot.readI32();
            this.__isset.pos = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QID:
          if (field.type == TType.I32) {
            this.qid = iprot.readI32();
            this.__isset.qid = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SINIT:
          if (field.type == TType.I32) {
            this.sinit = iprot.readI32();
            this.__isset.sinit = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEND:
          if (field.type == TType.I32) {
            this.send = iprot.readI32();
            this.__isset.send = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOW:
          if (field.type == TType.I32) {
            this.dow = iprot.readI32();
            this.__isset.dow = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOD:
          if (field.type == TType.I32) {
            this.tod = iprot.readI32();
            this.__isset.tod = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DAY:
          if (field.type == TType.I32) {
            this.day = iprot.readI32();
            this.__isset.day = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(RECTYPE_FIELD_DESC);
    oprot.writeI32(this.rectype);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(T_FIELD_DESC);
    oprot.writeI32(this.t);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(VID_FIELD_DESC);
    oprot.writeI32(this.vid);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPEED_FIELD_DESC);
    oprot.writeI32(this.speed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(XWAY_FIELD_DESC);
    oprot.writeI32(this.xway);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LANE_FIELD_DESC);
    oprot.writeI32(this.lane);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DIR_FIELD_DESC);
    oprot.writeI32(this.dir);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SEG_FIELD_DESC);
    oprot.writeI32(this.seg);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(POS_FIELD_DESC);
    oprot.writeI32(this.pos);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QID_FIELD_DESC);
    oprot.writeI32(this.qid);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SINIT_FIELD_DESC);
    oprot.writeI32(this.sinit);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SEND_FIELD_DESC);
    oprot.writeI32(this.send);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DOW_FIELD_DESC);
    oprot.writeI32(this.dow);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOD_FIELD_DESC);
    oprot.writeI32(this.tod);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DAY_FIELD_DESC);
    oprot.writeI32(this.day);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LinearRoadTuple(");
    boolean first = true;

    sb.append("rectype:");
    sb.append(this.rectype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("t:");
    sb.append(this.t);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vid:");
    sb.append(this.vid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("speed:");
    sb.append(this.speed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xway:");
    sb.append(this.xway);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lane:");
    sb.append(this.lane);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dir:");
    sb.append(this.dir);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seg:");
    sb.append(this.seg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pos:");
    sb.append(this.pos);
    first = false;
    if (!first) sb.append(", ");
    sb.append("qid:");
    sb.append(this.qid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sinit:");
    sb.append(this.sinit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("send:");
    sb.append(this.send);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dow:");
    sb.append(this.dow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tod:");
    sb.append(this.tod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day:");
    sb.append(this.day);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

