// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Debugger.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

using namespace DBToaster::Debugger;

class DebuggerHandler : virtual public DebuggerIf {
 public:
  DebuggerHandler() {
    // Your initialization goes here
  }

  void step_VwapBids(const ThriftVwapTuple& input) {
    // Your implementation goes here
    printf("step_VwapBids\n");
  }

  void stepn_VwapBids(const int32_t n) {
    // Your implementation goes here
    printf("stepn_VwapBids\n");
  }

  int32_t get_var2() {
    // Your implementation goes here
    printf("get_var2\n");
  }

  void get_map0(std::map<int32_t, int32_t> & _return) {
    // Your implementation goes here
    printf("get_map0\n");
  }

  void get_dom0(std::set<int32_t> & _return) {
    // Your implementation goes here
    printf("get_dom0\n");
  }

  void get_B(std::vector<B_elem> & _return) {
    // Your implementation goes here
    printf("get_B\n");
  }

  void get_map1(std::map<int32_t, int32_t> & _return) {
    // Your implementation goes here
    printf("get_map1\n");
  }

  void get_dom1(std::set<int32_t> & _return) {
    // Your implementation goes here
    printf("get_dom1\n");
  }

  void get_map2(std::map<int32_t, int32_t> & _return) {
    // Your implementation goes here
    printf("get_map2\n");
  }

  void get_map3(std::map<int32_t, int32_t> & _return) {
    // Your implementation goes here
    printf("get_map3\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DebuggerHandler> handler(new DebuggerHandler());
  shared_ptr<TProcessor> processor(new DebuggerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

