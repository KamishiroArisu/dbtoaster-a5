/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef datasets_TYPES_H
#define datasets_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef int64_t identifier;

typedef std::string date;

class VwapTuple {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  VwapTuple() : t(0), id(0), price(0), volume(0) {
  }

  virtual ~VwapTuple() throw() {}

  int32_t t;
  int32_t id;
  int32_t price;
  int32_t volume;

  struct __isset {
    __isset() : t(false), id(false), price(false), volume(false) {}
    bool t;
    bool id;
    bool price;
    bool volume;
  } __isset;

  bool operator == (const VwapTuple & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(volume == rhs.volume))
      return false;
    return true;
  }
  bool operator != (const VwapTuple &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VwapTuple & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Lineitem {
 public:

  static const char* ascii_fingerprint; // = "AB5C4FE4E481C195FB82612A4D94803F";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x5C,0x4F,0xE4,0xE4,0x81,0xC1,0x95,0xFB,0x82,0x61,0x2A,0x4D,0x94,0x80,0x3F};

  Lineitem() : orderkey(0), partkey(0), suppkey(0), linenumber(0), quantity(0), extendedprice(0), discount(0), tax(0), returnflag(""), linestatus(""), shipdate(""), commitdate(""), receiptdate(""), shipinstruct(""), shipmode(""), comment("") {
  }

  virtual ~Lineitem() throw() {}

  identifier orderkey;
  identifier partkey;
  identifier suppkey;
  int32_t linenumber;
  double quantity;
  double extendedprice;
  double discount;
  double tax;
  std::string returnflag;
  std::string linestatus;
  date shipdate;
  date commitdate;
  date receiptdate;
  std::string shipinstruct;
  std::string shipmode;
  std::string comment;

  struct __isset {
    __isset() : orderkey(false), partkey(false), suppkey(false), linenumber(false), quantity(false), extendedprice(false), discount(false), tax(false), returnflag(false), linestatus(false), shipdate(false), commitdate(false), receiptdate(false), shipinstruct(false), shipmode(false), comment(false) {}
    bool orderkey;
    bool partkey;
    bool suppkey;
    bool linenumber;
    bool quantity;
    bool extendedprice;
    bool discount;
    bool tax;
    bool returnflag;
    bool linestatus;
    bool shipdate;
    bool commitdate;
    bool receiptdate;
    bool shipinstruct;
    bool shipmode;
    bool comment;
  } __isset;

  bool operator == (const Lineitem & rhs) const
  {
    if (!(orderkey == rhs.orderkey))
      return false;
    if (!(partkey == rhs.partkey))
      return false;
    if (!(suppkey == rhs.suppkey))
      return false;
    if (!(linenumber == rhs.linenumber))
      return false;
    if (!(quantity == rhs.quantity))
      return false;
    if (!(extendedprice == rhs.extendedprice))
      return false;
    if (!(discount == rhs.discount))
      return false;
    if (!(tax == rhs.tax))
      return false;
    if (!(returnflag == rhs.returnflag))
      return false;
    if (!(linestatus == rhs.linestatus))
      return false;
    if (!(shipdate == rhs.shipdate))
      return false;
    if (!(commitdate == rhs.commitdate))
      return false;
    if (!(receiptdate == rhs.receiptdate))
      return false;
    if (!(shipinstruct == rhs.shipinstruct))
      return false;
    if (!(shipmode == rhs.shipmode))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Lineitem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Lineitem & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Order {
 public:

  static const char* ascii_fingerprint; // = "4607ECBF3B441114F62765D482D1DB8E";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x07,0xEC,0xBF,0x3B,0x44,0x11,0x14,0xF6,0x27,0x65,0xD4,0x82,0xD1,0xDB,0x8E};

  Order() : orderkey(0), custkey(0), orderstatus(""), totalprice(0), orderdate(""), orderpriority(""), clerk(""), shippriority(0), comment("") {
  }

  virtual ~Order() throw() {}

  identifier orderkey;
  identifier custkey;
  std::string orderstatus;
  double totalprice;
  date orderdate;
  std::string orderpriority;
  std::string clerk;
  int32_t shippriority;
  std::string comment;

  struct __isset {
    __isset() : orderkey(false), custkey(false), orderstatus(false), totalprice(false), orderdate(false), orderpriority(false), clerk(false), shippriority(false), comment(false) {}
    bool orderkey;
    bool custkey;
    bool orderstatus;
    bool totalprice;
    bool orderdate;
    bool orderpriority;
    bool clerk;
    bool shippriority;
    bool comment;
  } __isset;

  bool operator == (const Order & rhs) const
  {
    if (!(orderkey == rhs.orderkey))
      return false;
    if (!(custkey == rhs.custkey))
      return false;
    if (!(orderstatus == rhs.orderstatus))
      return false;
    if (!(totalprice == rhs.totalprice))
      return false;
    if (!(orderdate == rhs.orderdate))
      return false;
    if (!(orderpriority == rhs.orderpriority))
      return false;
    if (!(clerk == rhs.clerk))
      return false;
    if (!(shippriority == rhs.shippriority))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Order &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Order & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Part {
 public:

  static const char* ascii_fingerprint; // = "7D08BD81C300AEF1E1A9A65F404EA348";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x08,0xBD,0x81,0xC3,0x00,0xAE,0xF1,0xE1,0xA9,0xA6,0x5F,0x40,0x4E,0xA3,0x48};

  Part() : partkey(0), name(""), mfgr(""), brand(""), type(""), size(0), container(""), retailprice(0), comment("") {
  }

  virtual ~Part() throw() {}

  identifier partkey;
  std::string name;
  std::string mfgr;
  std::string brand;
  std::string type;
  int32_t size;
  std::string container;
  double retailprice;
  std::string comment;

  struct __isset {
    __isset() : partkey(false), name(false), mfgr(false), brand(false), type(false), size(false), container(false), retailprice(false), comment(false) {}
    bool partkey;
    bool name;
    bool mfgr;
    bool brand;
    bool type;
    bool size;
    bool container;
    bool retailprice;
    bool comment;
  } __isset;

  bool operator == (const Part & rhs) const
  {
    if (!(partkey == rhs.partkey))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(mfgr == rhs.mfgr))
      return false;
    if (!(brand == rhs.brand))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(retailprice == rhs.retailprice))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Part &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Part & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Customer {
 public:

  static const char* ascii_fingerprint; // = "C24A1463A438E5959DD9A08800018360";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x4A,0x14,0x63,0xA4,0x38,0xE5,0x95,0x9D,0xD9,0xA0,0x88,0x00,0x01,0x83,0x60};

  Customer() : custkey(0), name(""), address(""), nationkey(0), phone(""), acctbal(0), mktsegment(""), comment("") {
  }

  virtual ~Customer() throw() {}

  identifier custkey;
  std::string name;
  std::string address;
  identifier nationkey;
  std::string phone;
  double acctbal;
  std::string mktsegment;
  std::string comment;

  struct __isset {
    __isset() : custkey(false), name(false), address(false), nationkey(false), phone(false), acctbal(false), mktsegment(false), comment(false) {}
    bool custkey;
    bool name;
    bool address;
    bool nationkey;
    bool phone;
    bool acctbal;
    bool mktsegment;
    bool comment;
  } __isset;

  bool operator == (const Customer & rhs) const
  {
    if (!(custkey == rhs.custkey))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(nationkey == rhs.nationkey))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(acctbal == rhs.acctbal))
      return false;
    if (!(mktsegment == rhs.mktsegment))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Customer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Customer & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Supplier {
 public:

  static const char* ascii_fingerprint; // = "C92E97F8910A38970A280E6AEE9B9327";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x2E,0x97,0xF8,0x91,0x0A,0x38,0x97,0x0A,0x28,0x0E,0x6A,0xEE,0x9B,0x93,0x27};

  Supplier() : suppkey(0), name(""), address(""), nationkey(0), phone(""), acctbal(0), comment("") {
  }

  virtual ~Supplier() throw() {}

  identifier suppkey;
  std::string name;
  std::string address;
  identifier nationkey;
  std::string phone;
  double acctbal;
  std::string comment;

  struct __isset {
    __isset() : suppkey(false), name(false), address(false), nationkey(false), phone(false), acctbal(false), comment(false) {}
    bool suppkey;
    bool name;
    bool address;
    bool nationkey;
    bool phone;
    bool acctbal;
    bool comment;
  } __isset;

  bool operator == (const Supplier & rhs) const
  {
    if (!(suppkey == rhs.suppkey))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(nationkey == rhs.nationkey))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(acctbal == rhs.acctbal))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Supplier &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Supplier & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Nation {
 public:

  static const char* ascii_fingerprint; // = "7AF320A75D2A5961A062E16E122DCAD0";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0xF3,0x20,0xA7,0x5D,0x2A,0x59,0x61,0xA0,0x62,0xE1,0x6E,0x12,0x2D,0xCA,0xD0};

  Nation() : nationkey(0), name(""), regionkey(0), comment("") {
  }

  virtual ~Nation() throw() {}

  identifier nationkey;
  std::string name;
  identifier regionkey;
  std::string comment;

  struct __isset {
    __isset() : nationkey(false), name(false), regionkey(false), comment(false) {}
    bool nationkey;
    bool name;
    bool regionkey;
    bool comment;
  } __isset;

  bool operator == (const Nation & rhs) const
  {
    if (!(nationkey == rhs.nationkey))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(regionkey == rhs.regionkey))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Nation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Nation & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Region {
 public:

  static const char* ascii_fingerprint; // = "BC9C141275D96A1BDFC4A1F500B2DCBE";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x9C,0x14,0x12,0x75,0xD9,0x6A,0x1B,0xDF,0xC4,0xA1,0xF5,0x00,0xB2,0xDC,0xBE};

  Region() : regionkey(0), name(""), comment("") {
  }

  virtual ~Region() throw() {}

  identifier regionkey;
  std::string name;
  std::string comment;

  struct __isset {
    __isset() : regionkey(false), name(false), comment(false) {}
    bool regionkey;
    bool name;
    bool comment;
  } __isset;

  bool operator == (const Region & rhs) const
  {
    if (!(regionkey == rhs.regionkey))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Region &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Region & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class SsbTuple {
 public:

  static const char* ascii_fingerprint; // = "DB7DB2B3B239C54B7F0B1DE074AF946D";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0x7D,0xB2,0xB3,0xB2,0x39,0xC5,0x4B,0x7F,0x0B,0x1D,0xE0,0x74,0xAF,0x94,0x6D};

  SsbTuple() : type(0) {
  }

  virtual ~SsbTuple() throw() {}

  int32_t type;
  Lineitem li;
  Order ord;
  Part pt;
  Customer cust;
  Supplier supp;
  Nation nt;
  Region rg;

  struct __isset {
    __isset() : type(false), li(false), ord(false), pt(false), cust(false), supp(false), nt(false), rg(false) {}
    bool type;
    bool li;
    bool ord;
    bool pt;
    bool cust;
    bool supp;
    bool nt;
    bool rg;
  } __isset;

  bool operator == (const SsbTuple & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (__isset.li != rhs.__isset.li)
      return false;
    else if (__isset.li && !(li == rhs.li))
      return false;
    if (__isset.ord != rhs.__isset.ord)
      return false;
    else if (__isset.ord && !(ord == rhs.ord))
      return false;
    if (__isset.pt != rhs.__isset.pt)
      return false;
    else if (__isset.pt && !(pt == rhs.pt))
      return false;
    if (__isset.cust != rhs.__isset.cust)
      return false;
    else if (__isset.cust && !(cust == rhs.cust))
      return false;
    if (__isset.supp != rhs.__isset.supp)
      return false;
    else if (__isset.supp && !(supp == rhs.supp))
      return false;
    if (__isset.nt != rhs.__isset.nt)
      return false;
    else if (__isset.nt && !(nt == rhs.nt))
      return false;
    if (__isset.rg != rhs.__isset.rg)
      return false;
    else if (__isset.rg && !(rg == rhs.rg))
      return false;
    return true;
  }
  bool operator != (const SsbTuple &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SsbTuple & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LinearRoadTuple {
 public:

  static const char* ascii_fingerprint; // = "64AC91B2641D95483CDF774472348F34";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0xAC,0x91,0xB2,0x64,0x1D,0x95,0x48,0x3C,0xDF,0x77,0x44,0x72,0x34,0x8F,0x34};

  LinearRoadTuple() : rectype(0), t(0), vid(0), speed(0), xway(0), lane(0), dir(0), seg(0), pos(0), qid(0), sinit(0), send(0), dow(0), tod(0), day(0) {
  }

  virtual ~LinearRoadTuple() throw() {}

  int32_t rectype;
  int32_t t;
  int32_t vid;
  int32_t speed;
  int32_t xway;
  int32_t lane;
  int32_t dir;
  int32_t seg;
  int32_t pos;
  int32_t qid;
  int32_t sinit;
  int32_t send;
  int32_t dow;
  int32_t tod;
  int32_t day;

  struct __isset {
    __isset() : rectype(false), t(false), vid(false), speed(false), xway(false), lane(false), dir(false), seg(false), pos(false), qid(false), sinit(false), send(false), dow(false), tod(false), day(false) {}
    bool rectype;
    bool t;
    bool vid;
    bool speed;
    bool xway;
    bool lane;
    bool dir;
    bool seg;
    bool pos;
    bool qid;
    bool sinit;
    bool send;
    bool dow;
    bool tod;
    bool day;
  } __isset;

  bool operator == (const LinearRoadTuple & rhs) const
  {
    if (!(rectype == rhs.rectype))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(vid == rhs.vid))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(xway == rhs.xway))
      return false;
    if (!(lane == rhs.lane))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(seg == rhs.seg))
      return false;
    if (!(pos == rhs.pos))
      return false;
    if (!(qid == rhs.qid))
      return false;
    if (!(sinit == rhs.sinit))
      return false;
    if (!(send == rhs.send))
      return false;
    if (!(dow == rhs.dow))
      return false;
    if (!(tod == rhs.tod))
      return false;
    if (!(day == rhs.day))
      return false;
    return true;
  }
  bool operator != (const LinearRoadTuple &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinearRoadTuple & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
