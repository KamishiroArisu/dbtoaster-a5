/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Lineitem implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Lineitem");
  private static final TField ORDERKEY_FIELD_DESC = new TField("orderkey", TType.I64, (short)1);
  private static final TField PARTKEY_FIELD_DESC = new TField("partkey", TType.I64, (short)2);
  private static final TField SUPPKEY_FIELD_DESC = new TField("suppkey", TType.I64, (short)3);
  private static final TField LINENUMBER_FIELD_DESC = new TField("linenumber", TType.I32, (short)4);
  private static final TField QUANTITY_FIELD_DESC = new TField("quantity", TType.DOUBLE, (short)5);
  private static final TField EXTENDEDPRICE_FIELD_DESC = new TField("extendedprice", TType.DOUBLE, (short)6);
  private static final TField DISCOUNT_FIELD_DESC = new TField("discount", TType.DOUBLE, (short)7);
  private static final TField TAX_FIELD_DESC = new TField("tax", TType.DOUBLE, (short)8);
  private static final TField RETURNFLAG_FIELD_DESC = new TField("returnflag", TType.STRING, (short)9);
  private static final TField LINESTATUS_FIELD_DESC = new TField("linestatus", TType.STRING, (short)10);
  private static final TField SHIPDATE_FIELD_DESC = new TField("shipdate", TType.STRING, (short)11);
  private static final TField COMMITDATE_FIELD_DESC = new TField("commitdate", TType.STRING, (short)12);
  private static final TField RECEIPTDATE_FIELD_DESC = new TField("receiptdate", TType.STRING, (short)13);
  private static final TField SHIPINSTRUCT_FIELD_DESC = new TField("shipinstruct", TType.STRING, (short)14);
  private static final TField SHIPMODE_FIELD_DESC = new TField("shipmode", TType.STRING, (short)15);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)16);

  public long orderkey;
  public static final int ORDERKEY = 1;
  public long partkey;
  public static final int PARTKEY = 2;
  public long suppkey;
  public static final int SUPPKEY = 3;
  public int linenumber;
  public static final int LINENUMBER = 4;
  public double quantity;
  public static final int QUANTITY = 5;
  public double extendedprice;
  public static final int EXTENDEDPRICE = 6;
  public double discount;
  public static final int DISCOUNT = 7;
  public double tax;
  public static final int TAX = 8;
  public String returnflag;
  public static final int RETURNFLAG = 9;
  public String linestatus;
  public static final int LINESTATUS = 10;
  public String shipdate;
  public static final int SHIPDATE = 11;
  public String commitdate;
  public static final int COMMITDATE = 12;
  public String receiptdate;
  public static final int RECEIPTDATE = 13;
  public String shipinstruct;
  public static final int SHIPINSTRUCT = 14;
  public String shipmode;
  public static final int SHIPMODE = 15;
  public String comment;
  public static final int COMMENT = 16;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean orderkey = false;
    public boolean partkey = false;
    public boolean suppkey = false;
    public boolean linenumber = false;
    public boolean quantity = false;
    public boolean extendedprice = false;
    public boolean discount = false;
    public boolean tax = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(ORDERKEY, new FieldMetaData("orderkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(PARTKEY, new FieldMetaData("partkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(SUPPKEY, new FieldMetaData("suppkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(LINENUMBER, new FieldMetaData("linenumber", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(QUANTITY, new FieldMetaData("quantity", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(EXTENDEDPRICE, new FieldMetaData("extendedprice", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(DISCOUNT, new FieldMetaData("discount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(TAX, new FieldMetaData("tax", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(RETURNFLAG, new FieldMetaData("returnflag", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(LINESTATUS, new FieldMetaData("linestatus", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SHIPDATE, new FieldMetaData("shipdate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(COMMITDATE, new FieldMetaData("commitdate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(RECEIPTDATE, new FieldMetaData("receiptdate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SHIPINSTRUCT, new FieldMetaData("shipinstruct", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SHIPMODE, new FieldMetaData("shipmode", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(COMMENT, new FieldMetaData("comment", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Lineitem.class, metaDataMap);
  }

  public Lineitem() {
  }

  public Lineitem(
    long orderkey,
    long partkey,
    long suppkey,
    int linenumber,
    double quantity,
    double extendedprice,
    double discount,
    double tax,
    String returnflag,
    String linestatus,
    String shipdate,
    String commitdate,
    String receiptdate,
    String shipinstruct,
    String shipmode,
    String comment)
  {
    this();
    this.orderkey = orderkey;
    this.__isset.orderkey = true;
    this.partkey = partkey;
    this.__isset.partkey = true;
    this.suppkey = suppkey;
    this.__isset.suppkey = true;
    this.linenumber = linenumber;
    this.__isset.linenumber = true;
    this.quantity = quantity;
    this.__isset.quantity = true;
    this.extendedprice = extendedprice;
    this.__isset.extendedprice = true;
    this.discount = discount;
    this.__isset.discount = true;
    this.tax = tax;
    this.__isset.tax = true;
    this.returnflag = returnflag;
    this.linestatus = linestatus;
    this.shipdate = shipdate;
    this.commitdate = commitdate;
    this.receiptdate = receiptdate;
    this.shipinstruct = shipinstruct;
    this.shipmode = shipmode;
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Lineitem(Lineitem other) {
    __isset.orderkey = other.__isset.orderkey;
    this.orderkey = other.orderkey;
    __isset.partkey = other.__isset.partkey;
    this.partkey = other.partkey;
    __isset.suppkey = other.__isset.suppkey;
    this.suppkey = other.suppkey;
    __isset.linenumber = other.__isset.linenumber;
    this.linenumber = other.linenumber;
    __isset.quantity = other.__isset.quantity;
    this.quantity = other.quantity;
    __isset.extendedprice = other.__isset.extendedprice;
    this.extendedprice = other.extendedprice;
    __isset.discount = other.__isset.discount;
    this.discount = other.discount;
    __isset.tax = other.__isset.tax;
    this.tax = other.tax;
    if (other.isSetReturnflag()) {
      this.returnflag = other.returnflag;
    }
    if (other.isSetLinestatus()) {
      this.linestatus = other.linestatus;
    }
    if (other.isSetShipdate()) {
      this.shipdate = other.shipdate;
    }
    if (other.isSetCommitdate()) {
      this.commitdate = other.commitdate;
    }
    if (other.isSetReceiptdate()) {
      this.receiptdate = other.receiptdate;
    }
    if (other.isSetShipinstruct()) {
      this.shipinstruct = other.shipinstruct;
    }
    if (other.isSetShipmode()) {
      this.shipmode = other.shipmode;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  @Override
  public Lineitem clone() {
    return new Lineitem(this);
  }

  public long getOrderkey() {
    return this.orderkey;
  }

  public void setOrderkey(long orderkey) {
    this.orderkey = orderkey;
    this.__isset.orderkey = true;
  }

  public void unsetOrderkey() {
    this.__isset.orderkey = false;
  }

  // Returns true if field orderkey is set (has been asigned a value) and false otherwise
  public boolean isSetOrderkey() {
    return this.__isset.orderkey;
  }

  public void setOrderkeyIsSet(boolean value) {
    this.__isset.orderkey = value;
  }

  public long getPartkey() {
    return this.partkey;
  }

  public void setPartkey(long partkey) {
    this.partkey = partkey;
    this.__isset.partkey = true;
  }

  public void unsetPartkey() {
    this.__isset.partkey = false;
  }

  // Returns true if field partkey is set (has been asigned a value) and false otherwise
  public boolean isSetPartkey() {
    return this.__isset.partkey;
  }

  public void setPartkeyIsSet(boolean value) {
    this.__isset.partkey = value;
  }

  public long getSuppkey() {
    return this.suppkey;
  }

  public void setSuppkey(long suppkey) {
    this.suppkey = suppkey;
    this.__isset.suppkey = true;
  }

  public void unsetSuppkey() {
    this.__isset.suppkey = false;
  }

  // Returns true if field suppkey is set (has been asigned a value) and false otherwise
  public boolean isSetSuppkey() {
    return this.__isset.suppkey;
  }

  public void setSuppkeyIsSet(boolean value) {
    this.__isset.suppkey = value;
  }

  public int getLinenumber() {
    return this.linenumber;
  }

  public void setLinenumber(int linenumber) {
    this.linenumber = linenumber;
    this.__isset.linenumber = true;
  }

  public void unsetLinenumber() {
    this.__isset.linenumber = false;
  }

  // Returns true if field linenumber is set (has been asigned a value) and false otherwise
  public boolean isSetLinenumber() {
    return this.__isset.linenumber;
  }

  public void setLinenumberIsSet(boolean value) {
    this.__isset.linenumber = value;
  }

  public double getQuantity() {
    return this.quantity;
  }

  public void setQuantity(double quantity) {
    this.quantity = quantity;
    this.__isset.quantity = true;
  }

  public void unsetQuantity() {
    this.__isset.quantity = false;
  }

  // Returns true if field quantity is set (has been asigned a value) and false otherwise
  public boolean isSetQuantity() {
    return this.__isset.quantity;
  }

  public void setQuantityIsSet(boolean value) {
    this.__isset.quantity = value;
  }

  public double getExtendedprice() {
    return this.extendedprice;
  }

  public void setExtendedprice(double extendedprice) {
    this.extendedprice = extendedprice;
    this.__isset.extendedprice = true;
  }

  public void unsetExtendedprice() {
    this.__isset.extendedprice = false;
  }

  // Returns true if field extendedprice is set (has been asigned a value) and false otherwise
  public boolean isSetExtendedprice() {
    return this.__isset.extendedprice;
  }

  public void setExtendedpriceIsSet(boolean value) {
    this.__isset.extendedprice = value;
  }

  public double getDiscount() {
    return this.discount;
  }

  public void setDiscount(double discount) {
    this.discount = discount;
    this.__isset.discount = true;
  }

  public void unsetDiscount() {
    this.__isset.discount = false;
  }

  // Returns true if field discount is set (has been asigned a value) and false otherwise
  public boolean isSetDiscount() {
    return this.__isset.discount;
  }

  public void setDiscountIsSet(boolean value) {
    this.__isset.discount = value;
  }

  public double getTax() {
    return this.tax;
  }

  public void setTax(double tax) {
    this.tax = tax;
    this.__isset.tax = true;
  }

  public void unsetTax() {
    this.__isset.tax = false;
  }

  // Returns true if field tax is set (has been asigned a value) and false otherwise
  public boolean isSetTax() {
    return this.__isset.tax;
  }

  public void setTaxIsSet(boolean value) {
    this.__isset.tax = value;
  }

  public String getReturnflag() {
    return this.returnflag;
  }

  public void setReturnflag(String returnflag) {
    this.returnflag = returnflag;
  }

  public void unsetReturnflag() {
    this.returnflag = null;
  }

  // Returns true if field returnflag is set (has been asigned a value) and false otherwise
  public boolean isSetReturnflag() {
    return this.returnflag != null;
  }

  public void setReturnflagIsSet(boolean value) {
    if (!value) {
      this.returnflag = null;
    }
  }

  public String getLinestatus() {
    return this.linestatus;
  }

  public void setLinestatus(String linestatus) {
    this.linestatus = linestatus;
  }

  public void unsetLinestatus() {
    this.linestatus = null;
  }

  // Returns true if field linestatus is set (has been asigned a value) and false otherwise
  public boolean isSetLinestatus() {
    return this.linestatus != null;
  }

  public void setLinestatusIsSet(boolean value) {
    if (!value) {
      this.linestatus = null;
    }
  }

  public String getShipdate() {
    return this.shipdate;
  }

  public void setShipdate(String shipdate) {
    this.shipdate = shipdate;
  }

  public void unsetShipdate() {
    this.shipdate = null;
  }

  // Returns true if field shipdate is set (has been asigned a value) and false otherwise
  public boolean isSetShipdate() {
    return this.shipdate != null;
  }

  public void setShipdateIsSet(boolean value) {
    if (!value) {
      this.shipdate = null;
    }
  }

  public String getCommitdate() {
    return this.commitdate;
  }

  public void setCommitdate(String commitdate) {
    this.commitdate = commitdate;
  }

  public void unsetCommitdate() {
    this.commitdate = null;
  }

  // Returns true if field commitdate is set (has been asigned a value) and false otherwise
  public boolean isSetCommitdate() {
    return this.commitdate != null;
  }

  public void setCommitdateIsSet(boolean value) {
    if (!value) {
      this.commitdate = null;
    }
  }

  public String getReceiptdate() {
    return this.receiptdate;
  }

  public void setReceiptdate(String receiptdate) {
    this.receiptdate = receiptdate;
  }

  public void unsetReceiptdate() {
    this.receiptdate = null;
  }

  // Returns true if field receiptdate is set (has been asigned a value) and false otherwise
  public boolean isSetReceiptdate() {
    return this.receiptdate != null;
  }

  public void setReceiptdateIsSet(boolean value) {
    if (!value) {
      this.receiptdate = null;
    }
  }

  public String getShipinstruct() {
    return this.shipinstruct;
  }

  public void setShipinstruct(String shipinstruct) {
    this.shipinstruct = shipinstruct;
  }

  public void unsetShipinstruct() {
    this.shipinstruct = null;
  }

  // Returns true if field shipinstruct is set (has been asigned a value) and false otherwise
  public boolean isSetShipinstruct() {
    return this.shipinstruct != null;
  }

  public void setShipinstructIsSet(boolean value) {
    if (!value) {
      this.shipinstruct = null;
    }
  }

  public String getShipmode() {
    return this.shipmode;
  }

  public void setShipmode(String shipmode) {
    this.shipmode = shipmode;
  }

  public void unsetShipmode() {
    this.shipmode = null;
  }

  // Returns true if field shipmode is set (has been asigned a value) and false otherwise
  public boolean isSetShipmode() {
    return this.shipmode != null;
  }

  public void setShipmodeIsSet(boolean value) {
    if (!value) {
      this.shipmode = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  // Returns true if field comment is set (has been asigned a value) and false otherwise
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ORDERKEY:
      if (value == null) {
        unsetOrderkey();
      } else {
        setOrderkey((Long)value);
      }
      break;

    case PARTKEY:
      if (value == null) {
        unsetPartkey();
      } else {
        setPartkey((Long)value);
      }
      break;

    case SUPPKEY:
      if (value == null) {
        unsetSuppkey();
      } else {
        setSuppkey((Long)value);
      }
      break;

    case LINENUMBER:
      if (value == null) {
        unsetLinenumber();
      } else {
        setLinenumber((Integer)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Double)value);
      }
      break;

    case EXTENDEDPRICE:
      if (value == null) {
        unsetExtendedprice();
      } else {
        setExtendedprice((Double)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Double)value);
      }
      break;

    case TAX:
      if (value == null) {
        unsetTax();
      } else {
        setTax((Double)value);
      }
      break;

    case RETURNFLAG:
      if (value == null) {
        unsetReturnflag();
      } else {
        setReturnflag((String)value);
      }
      break;

    case LINESTATUS:
      if (value == null) {
        unsetLinestatus();
      } else {
        setLinestatus((String)value);
      }
      break;

    case SHIPDATE:
      if (value == null) {
        unsetShipdate();
      } else {
        setShipdate((String)value);
      }
      break;

    case COMMITDATE:
      if (value == null) {
        unsetCommitdate();
      } else {
        setCommitdate((String)value);
      }
      break;

    case RECEIPTDATE:
      if (value == null) {
        unsetReceiptdate();
      } else {
        setReceiptdate((String)value);
      }
      break;

    case SHIPINSTRUCT:
      if (value == null) {
        unsetShipinstruct();
      } else {
        setShipinstruct((String)value);
      }
      break;

    case SHIPMODE:
      if (value == null) {
        unsetShipmode();
      } else {
        setShipmode((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ORDERKEY:
      return new Long(getOrderkey());

    case PARTKEY:
      return new Long(getPartkey());

    case SUPPKEY:
      return new Long(getSuppkey());

    case LINENUMBER:
      return new Integer(getLinenumber());

    case QUANTITY:
      return new Double(getQuantity());

    case EXTENDEDPRICE:
      return new Double(getExtendedprice());

    case DISCOUNT:
      return new Double(getDiscount());

    case TAX:
      return new Double(getTax());

    case RETURNFLAG:
      return getReturnflag();

    case LINESTATUS:
      return getLinestatus();

    case SHIPDATE:
      return getShipdate();

    case COMMITDATE:
      return getCommitdate();

    case RECEIPTDATE:
      return getReceiptdate();

    case SHIPINSTRUCT:
      return getShipinstruct();

    case SHIPMODE:
      return getShipmode();

    case COMMENT:
      return getComment();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ORDERKEY:
      return isSetOrderkey();
    case PARTKEY:
      return isSetPartkey();
    case SUPPKEY:
      return isSetSuppkey();
    case LINENUMBER:
      return isSetLinenumber();
    case QUANTITY:
      return isSetQuantity();
    case EXTENDEDPRICE:
      return isSetExtendedprice();
    case DISCOUNT:
      return isSetDiscount();
    case TAX:
      return isSetTax();
    case RETURNFLAG:
      return isSetReturnflag();
    case LINESTATUS:
      return isSetLinestatus();
    case SHIPDATE:
      return isSetShipdate();
    case COMMITDATE:
      return isSetCommitdate();
    case RECEIPTDATE:
      return isSetReceiptdate();
    case SHIPINSTRUCT:
      return isSetShipinstruct();
    case SHIPMODE:
      return isSetShipmode();
    case COMMENT:
      return isSetComment();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Lineitem)
      return this.equals((Lineitem)that);
    return false;
  }

  public boolean equals(Lineitem that) {
    if (that == null)
      return false;

    boolean this_present_orderkey = true;
    boolean that_present_orderkey = true;
    if (this_present_orderkey || that_present_orderkey) {
      if (!(this_present_orderkey && that_present_orderkey))
        return false;
      if (this.orderkey != that.orderkey)
        return false;
    }

    boolean this_present_partkey = true;
    boolean that_present_partkey = true;
    if (this_present_partkey || that_present_partkey) {
      if (!(this_present_partkey && that_present_partkey))
        return false;
      if (this.partkey != that.partkey)
        return false;
    }

    boolean this_present_suppkey = true;
    boolean that_present_suppkey = true;
    if (this_present_suppkey || that_present_suppkey) {
      if (!(this_present_suppkey && that_present_suppkey))
        return false;
      if (this.suppkey != that.suppkey)
        return false;
    }

    boolean this_present_linenumber = true;
    boolean that_present_linenumber = true;
    if (this_present_linenumber || that_present_linenumber) {
      if (!(this_present_linenumber && that_present_linenumber))
        return false;
      if (this.linenumber != that.linenumber)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_extendedprice = true;
    boolean that_present_extendedprice = true;
    if (this_present_extendedprice || that_present_extendedprice) {
      if (!(this_present_extendedprice && that_present_extendedprice))
        return false;
      if (this.extendedprice != that.extendedprice)
        return false;
    }

    boolean this_present_discount = true;
    boolean that_present_discount = true;
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    boolean this_present_tax = true;
    boolean that_present_tax = true;
    if (this_present_tax || that_present_tax) {
      if (!(this_present_tax && that_present_tax))
        return false;
      if (this.tax != that.tax)
        return false;
    }

    boolean this_present_returnflag = true && this.isSetReturnflag();
    boolean that_present_returnflag = true && that.isSetReturnflag();
    if (this_present_returnflag || that_present_returnflag) {
      if (!(this_present_returnflag && that_present_returnflag))
        return false;
      if (!this.returnflag.equals(that.returnflag))
        return false;
    }

    boolean this_present_linestatus = true && this.isSetLinestatus();
    boolean that_present_linestatus = true && that.isSetLinestatus();
    if (this_present_linestatus || that_present_linestatus) {
      if (!(this_present_linestatus && that_present_linestatus))
        return false;
      if (!this.linestatus.equals(that.linestatus))
        return false;
    }

    boolean this_present_shipdate = true && this.isSetShipdate();
    boolean that_present_shipdate = true && that.isSetShipdate();
    if (this_present_shipdate || that_present_shipdate) {
      if (!(this_present_shipdate && that_present_shipdate))
        return false;
      if (!this.shipdate.equals(that.shipdate))
        return false;
    }

    boolean this_present_commitdate = true && this.isSetCommitdate();
    boolean that_present_commitdate = true && that.isSetCommitdate();
    if (this_present_commitdate || that_present_commitdate) {
      if (!(this_present_commitdate && that_present_commitdate))
        return false;
      if (!this.commitdate.equals(that.commitdate))
        return false;
    }

    boolean this_present_receiptdate = true && this.isSetReceiptdate();
    boolean that_present_receiptdate = true && that.isSetReceiptdate();
    if (this_present_receiptdate || that_present_receiptdate) {
      if (!(this_present_receiptdate && that_present_receiptdate))
        return false;
      if (!this.receiptdate.equals(that.receiptdate))
        return false;
    }

    boolean this_present_shipinstruct = true && this.isSetShipinstruct();
    boolean that_present_shipinstruct = true && that.isSetShipinstruct();
    if (this_present_shipinstruct || that_present_shipinstruct) {
      if (!(this_present_shipinstruct && that_present_shipinstruct))
        return false;
      if (!this.shipinstruct.equals(that.shipinstruct))
        return false;
    }

    boolean this_present_shipmode = true && this.isSetShipmode();
    boolean that_present_shipmode = true && that.isSetShipmode();
    if (this_present_shipmode || that_present_shipmode) {
      if (!(this_present_shipmode && that_present_shipmode))
        return false;
      if (!this.shipmode.equals(that.shipmode))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ORDERKEY:
          if (field.type == TType.I64) {
            this.orderkey = iprot.readI64();
            this.__isset.orderkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARTKEY:
          if (field.type == TType.I64) {
            this.partkey = iprot.readI64();
            this.__isset.partkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUPPKEY:
          if (field.type == TType.I64) {
            this.suppkey = iprot.readI64();
            this.__isset.suppkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LINENUMBER:
          if (field.type == TType.I32) {
            this.linenumber = iprot.readI32();
            this.__isset.linenumber = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QUANTITY:
          if (field.type == TType.DOUBLE) {
            this.quantity = iprot.readDouble();
            this.__isset.quantity = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXTENDEDPRICE:
          if (field.type == TType.DOUBLE) {
            this.extendedprice = iprot.readDouble();
            this.__isset.extendedprice = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISCOUNT:
          if (field.type == TType.DOUBLE) {
            this.discount = iprot.readDouble();
            this.__isset.discount = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAX:
          if (field.type == TType.DOUBLE) {
            this.tax = iprot.readDouble();
            this.__isset.tax = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RETURNFLAG:
          if (field.type == TType.STRING) {
            this.returnflag = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LINESTATUS:
          if (field.type == TType.STRING) {
            this.linestatus = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHIPDATE:
          if (field.type == TType.STRING) {
            this.shipdate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMITDATE:
          if (field.type == TType.STRING) {
            this.commitdate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECEIPTDATE:
          if (field.type == TType.STRING) {
            this.receiptdate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHIPINSTRUCT:
          if (field.type == TType.STRING) {
            this.shipinstruct = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHIPMODE:
          if (field.type == TType.STRING) {
            this.shipmode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ORDERKEY_FIELD_DESC);
    oprot.writeI64(this.orderkey);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PARTKEY_FIELD_DESC);
    oprot.writeI64(this.partkey);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SUPPKEY_FIELD_DESC);
    oprot.writeI64(this.suppkey);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LINENUMBER_FIELD_DESC);
    oprot.writeI32(this.linenumber);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
    oprot.writeDouble(this.quantity);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EXTENDEDPRICE_FIELD_DESC);
    oprot.writeDouble(this.extendedprice);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
    oprot.writeDouble(this.discount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TAX_FIELD_DESC);
    oprot.writeDouble(this.tax);
    oprot.writeFieldEnd();
    if (this.returnflag != null) {
      oprot.writeFieldBegin(RETURNFLAG_FIELD_DESC);
      oprot.writeString(this.returnflag);
      oprot.writeFieldEnd();
    }
    if (this.linestatus != null) {
      oprot.writeFieldBegin(LINESTATUS_FIELD_DESC);
      oprot.writeString(this.linestatus);
      oprot.writeFieldEnd();
    }
    if (this.shipdate != null) {
      oprot.writeFieldBegin(SHIPDATE_FIELD_DESC);
      oprot.writeString(this.shipdate);
      oprot.writeFieldEnd();
    }
    if (this.commitdate != null) {
      oprot.writeFieldBegin(COMMITDATE_FIELD_DESC);
      oprot.writeString(this.commitdate);
      oprot.writeFieldEnd();
    }
    if (this.receiptdate != null) {
      oprot.writeFieldBegin(RECEIPTDATE_FIELD_DESC);
      oprot.writeString(this.receiptdate);
      oprot.writeFieldEnd();
    }
    if (this.shipinstruct != null) {
      oprot.writeFieldBegin(SHIPINSTRUCT_FIELD_DESC);
      oprot.writeString(this.shipinstruct);
      oprot.writeFieldEnd();
    }
    if (this.shipmode != null) {
      oprot.writeFieldBegin(SHIPMODE_FIELD_DESC);
      oprot.writeString(this.shipmode);
      oprot.writeFieldEnd();
    }
    if (this.comment != null) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Lineitem(");
    boolean first = true;

    sb.append("orderkey:");
    sb.append(this.orderkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partkey:");
    sb.append(this.partkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("suppkey:");
    sb.append(this.suppkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("linenumber:");
    sb.append(this.linenumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extendedprice:");
    sb.append(this.extendedprice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discount:");
    sb.append(this.discount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tax:");
    sb.append(this.tax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnflag:");
    if (this.returnflag == null) {
      sb.append("null");
    } else {
      sb.append(this.returnflag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linestatus:");
    if (this.linestatus == null) {
      sb.append("null");
    } else {
      sb.append(this.linestatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shipdate:");
    if (this.shipdate == null) {
      sb.append("null");
    } else {
      sb.append(this.shipdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitdate:");
    if (this.commitdate == null) {
      sb.append("null");
    } else {
      sb.append(this.commitdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiptdate:");
    if (this.receiptdate == null) {
      sb.append("null");
    } else {
      sb.append(this.receiptdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shipinstruct:");
    if (this.shipinstruct == null) {
      sb.append("null");
    } else {
      sb.append(this.shipinstruct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shipmode:");
    if (this.shipmode == null) {
      sb.append("null");
    } else {
      sb.append(this.shipmode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

