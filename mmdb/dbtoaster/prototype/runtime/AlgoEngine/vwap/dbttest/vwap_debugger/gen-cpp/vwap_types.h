/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef vwap_TYPES_H
#define vwap_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "datasets_types.h"


namespace DBToaster { namespace Debugger {

enum DmlType {
  insertTuple = 0,
  deleteTuple = 1
};

typedef int32_t DBToasterStreamId;

class ThriftVwapTuple {
 public:

  static const char* ascii_fingerprint; // = "D96A371CC7FD5B286A8BEED0249209A5";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0x6A,0x37,0x1C,0xC7,0xFD,0x5B,0x28,0x6A,0x8B,0xEE,0xD0,0x24,0x92,0x09,0xA5};

  ThriftVwapTuple() : id(0) {
  }

  virtual ~ThriftVwapTuple() throw() {}

  DmlType type;
  DBToasterStreamId id;
  VwapTuple data;

  struct __isset {
    __isset() : type(false), id(false), data(false) {}
    bool type;
    bool id;
    bool data;
  } __isset;

  bool operator == (const ThriftVwapTuple & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ThriftVwapTuple &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftVwapTuple & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class B_elem {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  B_elem() : P1(0), V1(0) {
  }

  virtual ~B_elem() throw() {}

  int32_t P1;
  int32_t V1;

  struct __isset {
    __isset() : P1(false), V1(false) {}
    bool P1;
    bool V1;
  } __isset;

  bool operator == (const B_elem & rhs) const
  {
    if (!(P1 == rhs.P1))
      return false;
    if (!(V1 == rhs.V1))
      return false;
    return true;
  }
  bool operator != (const B_elem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const B_elem & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
