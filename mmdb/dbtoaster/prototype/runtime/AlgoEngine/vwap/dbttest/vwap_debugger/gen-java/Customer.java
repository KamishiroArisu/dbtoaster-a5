/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Customer implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Customer");
  private static final TField CUSTKEY_FIELD_DESC = new TField("custkey", TType.I64, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRING, (short)3);
  private static final TField NATIONKEY_FIELD_DESC = new TField("nationkey", TType.I64, (short)4);
  private static final TField PHONE_FIELD_DESC = new TField("phone", TType.STRING, (short)5);
  private static final TField ACCTBAL_FIELD_DESC = new TField("acctbal", TType.DOUBLE, (short)6);
  private static final TField MKTSEGMENT_FIELD_DESC = new TField("mktsegment", TType.STRING, (short)7);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)8);

  public long custkey;
  public static final int CUSTKEY = 1;
  public String name;
  public static final int NAME = 2;
  public String address;
  public static final int ADDRESS = 3;
  public long nationkey;
  public static final int NATIONKEY = 4;
  public String phone;
  public static final int PHONE = 5;
  public double acctbal;
  public static final int ACCTBAL = 6;
  public String mktsegment;
  public static final int MKTSEGMENT = 7;
  public String comment;
  public static final int COMMENT = 8;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean custkey = false;
    public boolean nationkey = false;
    public boolean acctbal = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(CUSTKEY, new FieldMetaData("custkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(ADDRESS, new FieldMetaData("address", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(NATIONKEY, new FieldMetaData("nationkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(PHONE, new FieldMetaData("phone", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(ACCTBAL, new FieldMetaData("acctbal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(MKTSEGMENT, new FieldMetaData("mktsegment", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(COMMENT, new FieldMetaData("comment", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Customer.class, metaDataMap);
  }

  public Customer() {
  }

  public Customer(
    long custkey,
    String name,
    String address,
    long nationkey,
    String phone,
    double acctbal,
    String mktsegment,
    String comment)
  {
    this();
    this.custkey = custkey;
    this.__isset.custkey = true;
    this.name = name;
    this.address = address;
    this.nationkey = nationkey;
    this.__isset.nationkey = true;
    this.phone = phone;
    this.acctbal = acctbal;
    this.__isset.acctbal = true;
    this.mktsegment = mktsegment;
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Customer(Customer other) {
    __isset.custkey = other.__isset.custkey;
    this.custkey = other.custkey;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    __isset.nationkey = other.__isset.nationkey;
    this.nationkey = other.nationkey;
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    __isset.acctbal = other.__isset.acctbal;
    this.acctbal = other.acctbal;
    if (other.isSetMktsegment()) {
      this.mktsegment = other.mktsegment;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  @Override
  public Customer clone() {
    return new Customer(this);
  }

  public long getCustkey() {
    return this.custkey;
  }

  public void setCustkey(long custkey) {
    this.custkey = custkey;
    this.__isset.custkey = true;
  }

  public void unsetCustkey() {
    this.__isset.custkey = false;
  }

  // Returns true if field custkey is set (has been asigned a value) and false otherwise
  public boolean isSetCustkey() {
    return this.__isset.custkey;
  }

  public void setCustkeyIsSet(boolean value) {
    this.__isset.custkey = value;
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  // Returns true if field name is set (has been asigned a value) and false otherwise
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public void unsetAddress() {
    this.address = null;
  }

  // Returns true if field address is set (has been asigned a value) and false otherwise
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public long getNationkey() {
    return this.nationkey;
  }

  public void setNationkey(long nationkey) {
    this.nationkey = nationkey;
    this.__isset.nationkey = true;
  }

  public void unsetNationkey() {
    this.__isset.nationkey = false;
  }

  // Returns true if field nationkey is set (has been asigned a value) and false otherwise
  public boolean isSetNationkey() {
    return this.__isset.nationkey;
  }

  public void setNationkeyIsSet(boolean value) {
    this.__isset.nationkey = value;
  }

  public String getPhone() {
    return this.phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  // Returns true if field phone is set (has been asigned a value) and false otherwise
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public double getAcctbal() {
    return this.acctbal;
  }

  public void setAcctbal(double acctbal) {
    this.acctbal = acctbal;
    this.__isset.acctbal = true;
  }

  public void unsetAcctbal() {
    this.__isset.acctbal = false;
  }

  // Returns true if field acctbal is set (has been asigned a value) and false otherwise
  public boolean isSetAcctbal() {
    return this.__isset.acctbal;
  }

  public void setAcctbalIsSet(boolean value) {
    this.__isset.acctbal = value;
  }

  public String getMktsegment() {
    return this.mktsegment;
  }

  public void setMktsegment(String mktsegment) {
    this.mktsegment = mktsegment;
  }

  public void unsetMktsegment() {
    this.mktsegment = null;
  }

  // Returns true if field mktsegment is set (has been asigned a value) and false otherwise
  public boolean isSetMktsegment() {
    return this.mktsegment != null;
  }

  public void setMktsegmentIsSet(boolean value) {
    if (!value) {
      this.mktsegment = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  // Returns true if field comment is set (has been asigned a value) and false otherwise
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CUSTKEY:
      if (value == null) {
        unsetCustkey();
      } else {
        setCustkey((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case NATIONKEY:
      if (value == null) {
        unsetNationkey();
      } else {
        setNationkey((Long)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case ACCTBAL:
      if (value == null) {
        unsetAcctbal();
      } else {
        setAcctbal((Double)value);
      }
      break;

    case MKTSEGMENT:
      if (value == null) {
        unsetMktsegment();
      } else {
        setMktsegment((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CUSTKEY:
      return new Long(getCustkey());

    case NAME:
      return getName();

    case ADDRESS:
      return getAddress();

    case NATIONKEY:
      return new Long(getNationkey());

    case PHONE:
      return getPhone();

    case ACCTBAL:
      return new Double(getAcctbal());

    case MKTSEGMENT:
      return getMktsegment();

    case COMMENT:
      return getComment();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CUSTKEY:
      return isSetCustkey();
    case NAME:
      return isSetName();
    case ADDRESS:
      return isSetAddress();
    case NATIONKEY:
      return isSetNationkey();
    case PHONE:
      return isSetPhone();
    case ACCTBAL:
      return isSetAcctbal();
    case MKTSEGMENT:
      return isSetMktsegment();
    case COMMENT:
      return isSetComment();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Customer)
      return this.equals((Customer)that);
    return false;
  }

  public boolean equals(Customer that) {
    if (that == null)
      return false;

    boolean this_present_custkey = true;
    boolean that_present_custkey = true;
    if (this_present_custkey || that_present_custkey) {
      if (!(this_present_custkey && that_present_custkey))
        return false;
      if (this.custkey != that.custkey)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_nationkey = true;
    boolean that_present_nationkey = true;
    if (this_present_nationkey || that_present_nationkey) {
      if (!(this_present_nationkey && that_present_nationkey))
        return false;
      if (this.nationkey != that.nationkey)
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_acctbal = true;
    boolean that_present_acctbal = true;
    if (this_present_acctbal || that_present_acctbal) {
      if (!(this_present_acctbal && that_present_acctbal))
        return false;
      if (this.acctbal != that.acctbal)
        return false;
    }

    boolean this_present_mktsegment = true && this.isSetMktsegment();
    boolean that_present_mktsegment = true && that.isSetMktsegment();
    if (this_present_mktsegment || that_present_mktsegment) {
      if (!(this_present_mktsegment && that_present_mktsegment))
        return false;
      if (!this.mktsegment.equals(that.mktsegment))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CUSTKEY:
          if (field.type == TType.I64) {
            this.custkey = iprot.readI64();
            this.__isset.custkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADDRESS:
          if (field.type == TType.STRING) {
            this.address = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NATIONKEY:
          if (field.type == TType.I64) {
            this.nationkey = iprot.readI64();
            this.__isset.nationkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONE:
          if (field.type == TType.STRING) {
            this.phone = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACCTBAL:
          if (field.type == TType.DOUBLE) {
            this.acctbal = iprot.readDouble();
            this.__isset.acctbal = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MKTSEGMENT:
          if (field.type == TType.STRING) {
            this.mktsegment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CUSTKEY_FIELD_DESC);
    oprot.writeI64(this.custkey);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.address != null) {
      oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
      oprot.writeString(this.address);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NATIONKEY_FIELD_DESC);
    oprot.writeI64(this.nationkey);
    oprot.writeFieldEnd();
    if (this.phone != null) {
      oprot.writeFieldBegin(PHONE_FIELD_DESC);
      oprot.writeString(this.phone);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ACCTBAL_FIELD_DESC);
    oprot.writeDouble(this.acctbal);
    oprot.writeFieldEnd();
    if (this.mktsegment != null) {
      oprot.writeFieldBegin(MKTSEGMENT_FIELD_DESC);
      oprot.writeString(this.mktsegment);
      oprot.writeFieldEnd();
    }
    if (this.comment != null) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Customer(");
    boolean first = true;

    sb.append("custkey:");
    sb.append(this.custkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationkey:");
    sb.append(this.nationkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctbal:");
    sb.append(this.acctbal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mktsegment:");
    if (this.mktsegment == null) {
      sb.append("null");
    } else {
      sb.append(this.mktsegment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

