/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package DBToaster.Debugger;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class B_elem implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("B_elem");
  private static final TField P1_FIELD_DESC = new TField("P1", TType.I32, (short)1);
  private static final TField V1_FIELD_DESC = new TField("V1", TType.I32, (short)2);

  public int P1;
  public static final int P1 = 1;
  public int V1;
  public static final int V1 = 2;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean P1 = false;
    public boolean V1 = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(P1, new FieldMetaData("P1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(V1, new FieldMetaData("V1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(B_elem.class, metaDataMap);
  }

  public B_elem() {
  }

  public B_elem(
    int P1,
    int V1)
  {
    this();
    this.P1 = P1;
    this.__isset.P1 = true;
    this.V1 = V1;
    this.__isset.V1 = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public B_elem(B_elem other) {
    __isset.P1 = other.__isset.P1;
    this.P1 = other.P1;
    __isset.V1 = other.__isset.V1;
    this.V1 = other.V1;
  }

  @Override
  public B_elem clone() {
    return new B_elem(this);
  }

  public int getP1() {
    return this.P1;
  }

  public void setP1(int P1) {
    this.P1 = P1;
    this.__isset.P1 = true;
  }

  public void unsetP1() {
    this.__isset.P1 = false;
  }

  // Returns true if field P1 is set (has been asigned a value) and false otherwise
  public boolean isSetP1() {
    return this.__isset.P1;
  }

  public void setP1IsSet(boolean value) {
    this.__isset.P1 = value;
  }

  public int getV1() {
    return this.V1;
  }

  public void setV1(int V1) {
    this.V1 = V1;
    this.__isset.V1 = true;
  }

  public void unsetV1() {
    this.__isset.V1 = false;
  }

  // Returns true if field V1 is set (has been asigned a value) and false otherwise
  public boolean isSetV1() {
    return this.__isset.V1;
  }

  public void setV1IsSet(boolean value) {
    this.__isset.V1 = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case P1:
      if (value == null) {
        unsetP1();
      } else {
        setP1((Integer)value);
      }
      break;

    case V1:
      if (value == null) {
        unsetV1();
      } else {
        setV1((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case P1:
      return new Integer(getP1());

    case V1:
      return new Integer(getV1());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case P1:
      return isSetP1();
    case V1:
      return isSetV1();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof B_elem)
      return this.equals((B_elem)that);
    return false;
  }

  public boolean equals(B_elem that) {
    if (that == null)
      return false;

    boolean this_present_P1 = true;
    boolean that_present_P1 = true;
    if (this_present_P1 || that_present_P1) {
      if (!(this_present_P1 && that_present_P1))
        return false;
      if (this.P1 != that.P1)
        return false;
    }

    boolean this_present_V1 = true;
    boolean that_present_V1 = true;
    if (this_present_V1 || that_present_V1) {
      if (!(this_present_V1 && that_present_V1))
        return false;
      if (this.V1 != that.V1)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case P1:
          if (field.type == TType.I32) {
            this.P1 = iprot.readI32();
            this.__isset.P1 = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V1:
          if (field.type == TType.I32) {
            this.V1 = iprot.readI32();
            this.__isset.V1 = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(P1_FIELD_DESC);
    oprot.writeI32(this.P1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(V1_FIELD_DESC);
    oprot.writeI32(this.V1);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("B_elem(");
    boolean first = true;

    sb.append("P1:");
    sb.append(this.P1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("V1:");
    sb.append(this.V1);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

