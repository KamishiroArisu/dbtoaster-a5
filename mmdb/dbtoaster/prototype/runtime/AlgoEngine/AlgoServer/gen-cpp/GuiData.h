/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef GuiData_H
#define GuiData_H

#include <TProcessor.h>
#include "GUICommunication_types.h"

namespace DBToaster { namespace GuiData {

class GuiDataIf {
 public:
  virtual ~GuiDataIf() {}
  virtual MyInt getAsksDiff() = 0;
  virtual MyInt getBidsDiff() = 0;
  virtual double getPrice() = 0;
  virtual double getMeanPrice() = 0;
  virtual double getVariance() = 0;
  virtual MyInt getAmountStocks() = 0;
  virtual MyInt getMoney() = 0;
};

class GuiDataNull : virtual public GuiDataIf {
 public:
  virtual ~GuiDataNull() {}
  MyInt getAsksDiff() {
    MyInt _return = 0;
    return _return;
  }
  MyInt getBidsDiff() {
    MyInt _return = 0;
    return _return;
  }
  double getPrice() {
    double _return = (double)0;
    return _return;
  }
  double getMeanPrice() {
    double _return = (double)0;
    return _return;
  }
  double getVariance() {
    double _return = (double)0;
    return _return;
  }
  MyInt getAmountStocks() {
    MyInt _return = 0;
    return _return;
  }
  MyInt getMoney() {
    MyInt _return = 0;
    return _return;
  }
};

class GuiData_getAsksDiff_args {
 public:

  GuiData_getAsksDiff_args() {
  }

  virtual ~GuiData_getAsksDiff_args() throw() {}


  bool operator == (const GuiData_getAsksDiff_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GuiData_getAsksDiff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getAsksDiff_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getAsksDiff_pargs {
 public:


  virtual ~GuiData_getAsksDiff_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getAsksDiff_result {
 public:

  GuiData_getAsksDiff_result() : success(0) {
  }

  virtual ~GuiData_getAsksDiff_result() throw() {}

  MyInt success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const GuiData_getAsksDiff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GuiData_getAsksDiff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getAsksDiff_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getAsksDiff_presult {
 public:


  virtual ~GuiData_getAsksDiff_presult() throw() {}

  MyInt* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class GuiData_getBidsDiff_args {
 public:

  GuiData_getBidsDiff_args() {
  }

  virtual ~GuiData_getBidsDiff_args() throw() {}


  bool operator == (const GuiData_getBidsDiff_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GuiData_getBidsDiff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getBidsDiff_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getBidsDiff_pargs {
 public:


  virtual ~GuiData_getBidsDiff_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getBidsDiff_result {
 public:

  GuiData_getBidsDiff_result() : success(0) {
  }

  virtual ~GuiData_getBidsDiff_result() throw() {}

  MyInt success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const GuiData_getBidsDiff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GuiData_getBidsDiff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getBidsDiff_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getBidsDiff_presult {
 public:


  virtual ~GuiData_getBidsDiff_presult() throw() {}

  MyInt* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class GuiData_getPrice_args {
 public:

  GuiData_getPrice_args() {
  }

  virtual ~GuiData_getPrice_args() throw() {}


  bool operator == (const GuiData_getPrice_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GuiData_getPrice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getPrice_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getPrice_pargs {
 public:


  virtual ~GuiData_getPrice_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getPrice_result {
 public:

  GuiData_getPrice_result() : success(0) {
  }

  virtual ~GuiData_getPrice_result() throw() {}

  double success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const GuiData_getPrice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GuiData_getPrice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getPrice_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getPrice_presult {
 public:


  virtual ~GuiData_getPrice_presult() throw() {}

  double* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class GuiData_getMeanPrice_args {
 public:

  GuiData_getMeanPrice_args() {
  }

  virtual ~GuiData_getMeanPrice_args() throw() {}


  bool operator == (const GuiData_getMeanPrice_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GuiData_getMeanPrice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getMeanPrice_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getMeanPrice_pargs {
 public:


  virtual ~GuiData_getMeanPrice_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getMeanPrice_result {
 public:

  GuiData_getMeanPrice_result() : success(0) {
  }

  virtual ~GuiData_getMeanPrice_result() throw() {}

  double success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const GuiData_getMeanPrice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GuiData_getMeanPrice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getMeanPrice_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getMeanPrice_presult {
 public:


  virtual ~GuiData_getMeanPrice_presult() throw() {}

  double* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class GuiData_getVariance_args {
 public:

  GuiData_getVariance_args() {
  }

  virtual ~GuiData_getVariance_args() throw() {}


  bool operator == (const GuiData_getVariance_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GuiData_getVariance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getVariance_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getVariance_pargs {
 public:


  virtual ~GuiData_getVariance_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getVariance_result {
 public:

  GuiData_getVariance_result() : success(0) {
  }

  virtual ~GuiData_getVariance_result() throw() {}

  double success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const GuiData_getVariance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GuiData_getVariance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getVariance_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getVariance_presult {
 public:


  virtual ~GuiData_getVariance_presult() throw() {}

  double* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class GuiData_getAmountStocks_args {
 public:

  GuiData_getAmountStocks_args() {
  }

  virtual ~GuiData_getAmountStocks_args() throw() {}


  bool operator == (const GuiData_getAmountStocks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GuiData_getAmountStocks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getAmountStocks_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getAmountStocks_pargs {
 public:


  virtual ~GuiData_getAmountStocks_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getAmountStocks_result {
 public:

  GuiData_getAmountStocks_result() : success(0) {
  }

  virtual ~GuiData_getAmountStocks_result() throw() {}

  MyInt success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const GuiData_getAmountStocks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GuiData_getAmountStocks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getAmountStocks_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getAmountStocks_presult {
 public:


  virtual ~GuiData_getAmountStocks_presult() throw() {}

  MyInt* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class GuiData_getMoney_args {
 public:

  GuiData_getMoney_args() {
  }

  virtual ~GuiData_getMoney_args() throw() {}


  bool operator == (const GuiData_getMoney_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GuiData_getMoney_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getMoney_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getMoney_pargs {
 public:


  virtual ~GuiData_getMoney_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getMoney_result {
 public:

  GuiData_getMoney_result() : success(0) {
  }

  virtual ~GuiData_getMoney_result() throw() {}

  MyInt success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const GuiData_getMoney_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GuiData_getMoney_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuiData_getMoney_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class GuiData_getMoney_presult {
 public:


  virtual ~GuiData_getMoney_presult() throw() {}

  MyInt* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class GuiDataClient : virtual public GuiDataIf {
 public:
  GuiDataClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GuiDataClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  MyInt getAsksDiff();
  void send_getAsksDiff();
  MyInt recv_getAsksDiff();
  MyInt getBidsDiff();
  void send_getBidsDiff();
  MyInt recv_getBidsDiff();
  double getPrice();
  void send_getPrice();
  double recv_getPrice();
  double getMeanPrice();
  void send_getMeanPrice();
  double recv_getMeanPrice();
  double getVariance();
  void send_getVariance();
  double recv_getVariance();
  MyInt getAmountStocks();
  void send_getAmountStocks();
  MyInt recv_getAmountStocks();
  MyInt getMoney();
  void send_getMoney();
  MyInt recv_getMoney();
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class GuiDataProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<GuiDataIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (GuiDataProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_getAsksDiff(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getBidsDiff(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getPrice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getMeanPrice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getVariance(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getAmountStocks(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getMoney(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  GuiDataProcessor(boost::shared_ptr<GuiDataIf> iface) :
    iface_(iface) {
    processMap_["getAsksDiff"] = &GuiDataProcessor::process_getAsksDiff;
    processMap_["getBidsDiff"] = &GuiDataProcessor::process_getBidsDiff;
    processMap_["getPrice"] = &GuiDataProcessor::process_getPrice;
    processMap_["getMeanPrice"] = &GuiDataProcessor::process_getMeanPrice;
    processMap_["getVariance"] = &GuiDataProcessor::process_getVariance;
    processMap_["getAmountStocks"] = &GuiDataProcessor::process_getAmountStocks;
    processMap_["getMoney"] = &GuiDataProcessor::process_getMoney;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~GuiDataProcessor() {}
};

class GuiDataMultiface : virtual public GuiDataIf {
 public:
  GuiDataMultiface(std::vector<boost::shared_ptr<GuiDataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GuiDataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GuiDataIf> > ifaces_;
  GuiDataMultiface() {}
  void add(boost::shared_ptr<GuiDataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  MyInt getAsksDiff() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getAsksDiff();
      } else {
        ifaces_[i]->getAsksDiff();
      }
    }
  }

  MyInt getBidsDiff() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getBidsDiff();
      } else {
        ifaces_[i]->getBidsDiff();
      }
    }
  }

  double getPrice() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getPrice();
      } else {
        ifaces_[i]->getPrice();
      }
    }
  }

  double getMeanPrice() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getMeanPrice();
      } else {
        ifaces_[i]->getMeanPrice();
      }
    }
  }

  double getVariance() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getVariance();
      } else {
        ifaces_[i]->getVariance();
      }
    }
  }

  MyInt getAmountStocks() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getAmountStocks();
      } else {
        ifaces_[i]->getAmountStocks();
      }
    }
  }

  MyInt getMoney() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getMoney();
      } else {
        ifaces_[i]->getMoney();
      }
    }
  }

};

}} // namespace

#endif
