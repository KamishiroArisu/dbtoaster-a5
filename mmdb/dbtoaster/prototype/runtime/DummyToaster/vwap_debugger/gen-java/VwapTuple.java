/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class VwapTuple implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("VwapTuple");
  private static final TField T_FIELD_DESC = new TField("t", TType.I32, (short)1);
  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)2);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.I32, (short)3);
  private static final TField VOLUME_FIELD_DESC = new TField("volume", TType.I32, (short)4);

  public int t;
  public static final int T = 1;
  public int id;
  public static final int ID = 2;
  public int price;
  public static final int PRICE = 3;
  public int volume;
  public static final int VOLUME = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean t = false;
    public boolean id = false;
    public boolean price = false;
    public boolean volume = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(T, new FieldMetaData("t", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(PRICE, new FieldMetaData("price", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(VOLUME, new FieldMetaData("volume", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(VwapTuple.class, metaDataMap);
  }

  public VwapTuple() {
  }

  public VwapTuple(
    int t,
    int id,
    int price,
    int volume)
  {
    this();
    this.t = t;
    this.__isset.t = true;
    this.id = id;
    this.__isset.id = true;
    this.price = price;
    this.__isset.price = true;
    this.volume = volume;
    this.__isset.volume = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VwapTuple(VwapTuple other) {
    __isset.t = other.__isset.t;
    this.t = other.t;
    __isset.id = other.__isset.id;
    this.id = other.id;
    __isset.price = other.__isset.price;
    this.price = other.price;
    __isset.volume = other.__isset.volume;
    this.volume = other.volume;
  }

  @Override
  public VwapTuple clone() {
    return new VwapTuple(this);
  }

  public int getT() {
    return this.t;
  }

  public void setT(int t) {
    this.t = t;
    this.__isset.t = true;
  }

  public void unsetT() {
    this.__isset.t = false;
  }

  // Returns true if field t is set (has been asigned a value) and false otherwise
  public boolean isSetT() {
    return this.__isset.t;
  }

  public void setTIsSet(boolean value) {
    this.__isset.t = value;
  }

  public int getId() {
    return this.id;
  }

  public void setId(int id) {
    this.id = id;
    this.__isset.id = true;
  }

  public void unsetId() {
    this.__isset.id = false;
  }

  // Returns true if field id is set (has been asigned a value) and false otherwise
  public boolean isSetId() {
    return this.__isset.id;
  }

  public void setIdIsSet(boolean value) {
    this.__isset.id = value;
  }

  public int getPrice() {
    return this.price;
  }

  public void setPrice(int price) {
    this.price = price;
    this.__isset.price = true;
  }

  public void unsetPrice() {
    this.__isset.price = false;
  }

  // Returns true if field price is set (has been asigned a value) and false otherwise
  public boolean isSetPrice() {
    return this.__isset.price;
  }

  public void setPriceIsSet(boolean value) {
    this.__isset.price = value;
  }

  public int getVolume() {
    return this.volume;
  }

  public void setVolume(int volume) {
    this.volume = volume;
    this.__isset.volume = true;
  }

  public void unsetVolume() {
    this.__isset.volume = false;
  }

  // Returns true if field volume is set (has been asigned a value) and false otherwise
  public boolean isSetVolume() {
    return this.__isset.volume;
  }

  public void setVolumeIsSet(boolean value) {
    this.__isset.volume = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case T:
      if (value == null) {
        unsetT();
      } else {
        setT((Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case T:
      return new Integer(getT());

    case ID:
      return new Integer(getId());

    case PRICE:
      return new Integer(getPrice());

    case VOLUME:
      return new Integer(getVolume());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case T:
      return isSetT();
    case ID:
      return isSetId();
    case PRICE:
      return isSetPrice();
    case VOLUME:
      return isSetVolume();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VwapTuple)
      return this.equals((VwapTuple)that);
    return false;
  }

  public boolean equals(VwapTuple that) {
    if (that == null)
      return false;

    boolean this_present_t = true;
    boolean that_present_t = true;
    if (this_present_t || that_present_t) {
      if (!(this_present_t && that_present_t))
        return false;
      if (this.t != that.t)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case T:
          if (field.type == TType.I32) {
            this.t = iprot.readI32();
            this.__isset.t = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ID:
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            this.__isset.id = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICE:
          if (field.type == TType.I32) {
            this.price = iprot.readI32();
            this.__isset.price = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VOLUME:
          if (field.type == TType.I32) {
            this.volume = iprot.readI32();
            this.__isset.volume = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(T_FIELD_DESC);
    oprot.writeI32(this.t);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeI32(this.price);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(VOLUME_FIELD_DESC);
    oprot.writeI32(this.volume);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VwapTuple(");
    boolean first = true;

    sb.append("t:");
    sb.append(this.t);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

