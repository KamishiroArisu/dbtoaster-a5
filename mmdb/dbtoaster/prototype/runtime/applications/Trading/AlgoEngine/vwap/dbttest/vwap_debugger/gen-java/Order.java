/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Order implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Order");
  private static final TField ORDERKEY_FIELD_DESC = new TField("orderkey", TType.I64, (short)1);
  private static final TField CUSTKEY_FIELD_DESC = new TField("custkey", TType.I64, (short)2);
  private static final TField ORDERSTATUS_FIELD_DESC = new TField("orderstatus", TType.STRING, (short)3);
  private static final TField TOTALPRICE_FIELD_DESC = new TField("totalprice", TType.DOUBLE, (short)4);
  private static final TField ORDERDATE_FIELD_DESC = new TField("orderdate", TType.STRING, (short)5);
  private static final TField ORDERPRIORITY_FIELD_DESC = new TField("orderpriority", TType.STRING, (short)6);
  private static final TField CLERK_FIELD_DESC = new TField("clerk", TType.STRING, (short)7);
  private static final TField SHIPPRIORITY_FIELD_DESC = new TField("shippriority", TType.I32, (short)8);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)9);

  public long orderkey;
  public static final int ORDERKEY = 1;
  public long custkey;
  public static final int CUSTKEY = 2;
  public String orderstatus;
  public static final int ORDERSTATUS = 3;
  public double totalprice;
  public static final int TOTALPRICE = 4;
  public String orderdate;
  public static final int ORDERDATE = 5;
  public String orderpriority;
  public static final int ORDERPRIORITY = 6;
  public String clerk;
  public static final int CLERK = 7;
  public int shippriority;
  public static final int SHIPPRIORITY = 8;
  public String comment;
  public static final int COMMENT = 9;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean orderkey = false;
    public boolean custkey = false;
    public boolean totalprice = false;
    public boolean shippriority = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(ORDERKEY, new FieldMetaData("orderkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(CUSTKEY, new FieldMetaData("custkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(ORDERSTATUS, new FieldMetaData("orderstatus", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(TOTALPRICE, new FieldMetaData("totalprice", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(ORDERDATE, new FieldMetaData("orderdate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(ORDERPRIORITY, new FieldMetaData("orderpriority", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(CLERK, new FieldMetaData("clerk", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SHIPPRIORITY, new FieldMetaData("shippriority", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(COMMENT, new FieldMetaData("comment", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Order.class, metaDataMap);
  }

  public Order() {
  }

  public Order(
    long orderkey,
    long custkey,
    String orderstatus,
    double totalprice,
    String orderdate,
    String orderpriority,
    String clerk,
    int shippriority,
    String comment)
  {
    this();
    this.orderkey = orderkey;
    this.__isset.orderkey = true;
    this.custkey = custkey;
    this.__isset.custkey = true;
    this.orderstatus = orderstatus;
    this.totalprice = totalprice;
    this.__isset.totalprice = true;
    this.orderdate = orderdate;
    this.orderpriority = orderpriority;
    this.clerk = clerk;
    this.shippriority = shippriority;
    this.__isset.shippriority = true;
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Order(Order other) {
    __isset.orderkey = other.__isset.orderkey;
    this.orderkey = other.orderkey;
    __isset.custkey = other.__isset.custkey;
    this.custkey = other.custkey;
    if (other.isSetOrderstatus()) {
      this.orderstatus = other.orderstatus;
    }
    __isset.totalprice = other.__isset.totalprice;
    this.totalprice = other.totalprice;
    if (other.isSetOrderdate()) {
      this.orderdate = other.orderdate;
    }
    if (other.isSetOrderpriority()) {
      this.orderpriority = other.orderpriority;
    }
    if (other.isSetClerk()) {
      this.clerk = other.clerk;
    }
    __isset.shippriority = other.__isset.shippriority;
    this.shippriority = other.shippriority;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  @Override
  public Order clone() {
    return new Order(this);
  }

  public long getOrderkey() {
    return this.orderkey;
  }

  public void setOrderkey(long orderkey) {
    this.orderkey = orderkey;
    this.__isset.orderkey = true;
  }

  public void unsetOrderkey() {
    this.__isset.orderkey = false;
  }

  // Returns true if field orderkey is set (has been asigned a value) and false otherwise
  public boolean isSetOrderkey() {
    return this.__isset.orderkey;
  }

  public void setOrderkeyIsSet(boolean value) {
    this.__isset.orderkey = value;
  }

  public long getCustkey() {
    return this.custkey;
  }

  public void setCustkey(long custkey) {
    this.custkey = custkey;
    this.__isset.custkey = true;
  }

  public void unsetCustkey() {
    this.__isset.custkey = false;
  }

  // Returns true if field custkey is set (has been asigned a value) and false otherwise
  public boolean isSetCustkey() {
    return this.__isset.custkey;
  }

  public void setCustkeyIsSet(boolean value) {
    this.__isset.custkey = value;
  }

  public String getOrderstatus() {
    return this.orderstatus;
  }

  public void setOrderstatus(String orderstatus) {
    this.orderstatus = orderstatus;
  }

  public void unsetOrderstatus() {
    this.orderstatus = null;
  }

  // Returns true if field orderstatus is set (has been asigned a value) and false otherwise
  public boolean isSetOrderstatus() {
    return this.orderstatus != null;
  }

  public void setOrderstatusIsSet(boolean value) {
    if (!value) {
      this.orderstatus = null;
    }
  }

  public double getTotalprice() {
    return this.totalprice;
  }

  public void setTotalprice(double totalprice) {
    this.totalprice = totalprice;
    this.__isset.totalprice = true;
  }

  public void unsetTotalprice() {
    this.__isset.totalprice = false;
  }

  // Returns true if field totalprice is set (has been asigned a value) and false otherwise
  public boolean isSetTotalprice() {
    return this.__isset.totalprice;
  }

  public void setTotalpriceIsSet(boolean value) {
    this.__isset.totalprice = value;
  }

  public String getOrderdate() {
    return this.orderdate;
  }

  public void setOrderdate(String orderdate) {
    this.orderdate = orderdate;
  }

  public void unsetOrderdate() {
    this.orderdate = null;
  }

  // Returns true if field orderdate is set (has been asigned a value) and false otherwise
  public boolean isSetOrderdate() {
    return this.orderdate != null;
  }

  public void setOrderdateIsSet(boolean value) {
    if (!value) {
      this.orderdate = null;
    }
  }

  public String getOrderpriority() {
    return this.orderpriority;
  }

  public void setOrderpriority(String orderpriority) {
    this.orderpriority = orderpriority;
  }

  public void unsetOrderpriority() {
    this.orderpriority = null;
  }

  // Returns true if field orderpriority is set (has been asigned a value) and false otherwise
  public boolean isSetOrderpriority() {
    return this.orderpriority != null;
  }

  public void setOrderpriorityIsSet(boolean value) {
    if (!value) {
      this.orderpriority = null;
    }
  }

  public String getClerk() {
    return this.clerk;
  }

  public void setClerk(String clerk) {
    this.clerk = clerk;
  }

  public void unsetClerk() {
    this.clerk = null;
  }

  // Returns true if field clerk is set (has been asigned a value) and false otherwise
  public boolean isSetClerk() {
    return this.clerk != null;
  }

  public void setClerkIsSet(boolean value) {
    if (!value) {
      this.clerk = null;
    }
  }

  public int getShippriority() {
    return this.shippriority;
  }

  public void setShippriority(int shippriority) {
    this.shippriority = shippriority;
    this.__isset.shippriority = true;
  }

  public void unsetShippriority() {
    this.__isset.shippriority = false;
  }

  // Returns true if field shippriority is set (has been asigned a value) and false otherwise
  public boolean isSetShippriority() {
    return this.__isset.shippriority;
  }

  public void setShippriorityIsSet(boolean value) {
    this.__isset.shippriority = value;
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  // Returns true if field comment is set (has been asigned a value) and false otherwise
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ORDERKEY:
      if (value == null) {
        unsetOrderkey();
      } else {
        setOrderkey((Long)value);
      }
      break;

    case CUSTKEY:
      if (value == null) {
        unsetCustkey();
      } else {
        setCustkey((Long)value);
      }
      break;

    case ORDERSTATUS:
      if (value == null) {
        unsetOrderstatus();
      } else {
        setOrderstatus((String)value);
      }
      break;

    case TOTALPRICE:
      if (value == null) {
        unsetTotalprice();
      } else {
        setTotalprice((Double)value);
      }
      break;

    case ORDERDATE:
      if (value == null) {
        unsetOrderdate();
      } else {
        setOrderdate((String)value);
      }
      break;

    case ORDERPRIORITY:
      if (value == null) {
        unsetOrderpriority();
      } else {
        setOrderpriority((String)value);
      }
      break;

    case CLERK:
      if (value == null) {
        unsetClerk();
      } else {
        setClerk((String)value);
      }
      break;

    case SHIPPRIORITY:
      if (value == null) {
        unsetShippriority();
      } else {
        setShippriority((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ORDERKEY:
      return new Long(getOrderkey());

    case CUSTKEY:
      return new Long(getCustkey());

    case ORDERSTATUS:
      return getOrderstatus();

    case TOTALPRICE:
      return new Double(getTotalprice());

    case ORDERDATE:
      return getOrderdate();

    case ORDERPRIORITY:
      return getOrderpriority();

    case CLERK:
      return getClerk();

    case SHIPPRIORITY:
      return new Integer(getShippriority());

    case COMMENT:
      return getComment();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ORDERKEY:
      return isSetOrderkey();
    case CUSTKEY:
      return isSetCustkey();
    case ORDERSTATUS:
      return isSetOrderstatus();
    case TOTALPRICE:
      return isSetTotalprice();
    case ORDERDATE:
      return isSetOrderdate();
    case ORDERPRIORITY:
      return isSetOrderpriority();
    case CLERK:
      return isSetClerk();
    case SHIPPRIORITY:
      return isSetShippriority();
    case COMMENT:
      return isSetComment();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Order)
      return this.equals((Order)that);
    return false;
  }

  public boolean equals(Order that) {
    if (that == null)
      return false;

    boolean this_present_orderkey = true;
    boolean that_present_orderkey = true;
    if (this_present_orderkey || that_present_orderkey) {
      if (!(this_present_orderkey && that_present_orderkey))
        return false;
      if (this.orderkey != that.orderkey)
        return false;
    }

    boolean this_present_custkey = true;
    boolean that_present_custkey = true;
    if (this_present_custkey || that_present_custkey) {
      if (!(this_present_custkey && that_present_custkey))
        return false;
      if (this.custkey != that.custkey)
        return false;
    }

    boolean this_present_orderstatus = true && this.isSetOrderstatus();
    boolean that_present_orderstatus = true && that.isSetOrderstatus();
    if (this_present_orderstatus || that_present_orderstatus) {
      if (!(this_present_orderstatus && that_present_orderstatus))
        return false;
      if (!this.orderstatus.equals(that.orderstatus))
        return false;
    }

    boolean this_present_totalprice = true;
    boolean that_present_totalprice = true;
    if (this_present_totalprice || that_present_totalprice) {
      if (!(this_present_totalprice && that_present_totalprice))
        return false;
      if (this.totalprice != that.totalprice)
        return false;
    }

    boolean this_present_orderdate = true && this.isSetOrderdate();
    boolean that_present_orderdate = true && that.isSetOrderdate();
    if (this_present_orderdate || that_present_orderdate) {
      if (!(this_present_orderdate && that_present_orderdate))
        return false;
      if (!this.orderdate.equals(that.orderdate))
        return false;
    }

    boolean this_present_orderpriority = true && this.isSetOrderpriority();
    boolean that_present_orderpriority = true && that.isSetOrderpriority();
    if (this_present_orderpriority || that_present_orderpriority) {
      if (!(this_present_orderpriority && that_present_orderpriority))
        return false;
      if (!this.orderpriority.equals(that.orderpriority))
        return false;
    }

    boolean this_present_clerk = true && this.isSetClerk();
    boolean that_present_clerk = true && that.isSetClerk();
    if (this_present_clerk || that_present_clerk) {
      if (!(this_present_clerk && that_present_clerk))
        return false;
      if (!this.clerk.equals(that.clerk))
        return false;
    }

    boolean this_present_shippriority = true;
    boolean that_present_shippriority = true;
    if (this_present_shippriority || that_present_shippriority) {
      if (!(this_present_shippriority && that_present_shippriority))
        return false;
      if (this.shippriority != that.shippriority)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ORDERKEY:
          if (field.type == TType.I64) {
            this.orderkey = iprot.readI64();
            this.__isset.orderkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CUSTKEY:
          if (field.type == TType.I64) {
            this.custkey = iprot.readI64();
            this.__isset.custkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDERSTATUS:
          if (field.type == TType.STRING) {
            this.orderstatus = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALPRICE:
          if (field.type == TType.DOUBLE) {
            this.totalprice = iprot.readDouble();
            this.__isset.totalprice = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDERDATE:
          if (field.type == TType.STRING) {
            this.orderdate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDERPRIORITY:
          if (field.type == TType.STRING) {
            this.orderpriority = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLERK:
          if (field.type == TType.STRING) {
            this.clerk = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHIPPRIORITY:
          if (field.type == TType.I32) {
            this.shippriority = iprot.readI32();
            this.__isset.shippriority = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ORDERKEY_FIELD_DESC);
    oprot.writeI64(this.orderkey);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CUSTKEY_FIELD_DESC);
    oprot.writeI64(this.custkey);
    oprot.writeFieldEnd();
    if (this.orderstatus != null) {
      oprot.writeFieldBegin(ORDERSTATUS_FIELD_DESC);
      oprot.writeString(this.orderstatus);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTALPRICE_FIELD_DESC);
    oprot.writeDouble(this.totalprice);
    oprot.writeFieldEnd();
    if (this.orderdate != null) {
      oprot.writeFieldBegin(ORDERDATE_FIELD_DESC);
      oprot.writeString(this.orderdate);
      oprot.writeFieldEnd();
    }
    if (this.orderpriority != null) {
      oprot.writeFieldBegin(ORDERPRIORITY_FIELD_DESC);
      oprot.writeString(this.orderpriority);
      oprot.writeFieldEnd();
    }
    if (this.clerk != null) {
      oprot.writeFieldBegin(CLERK_FIELD_DESC);
      oprot.writeString(this.clerk);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SHIPPRIORITY_FIELD_DESC);
    oprot.writeI32(this.shippriority);
    oprot.writeFieldEnd();
    if (this.comment != null) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Order(");
    boolean first = true;

    sb.append("orderkey:");
    sb.append(this.orderkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("custkey:");
    sb.append(this.custkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderstatus:");
    if (this.orderstatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderstatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalprice:");
    sb.append(this.totalprice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderdate:");
    if (this.orderdate == null) {
      sb.append("null");
    } else {
      sb.append(this.orderdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderpriority:");
    if (this.orderpriority == null) {
      sb.append("null");
    } else {
      sb.append(this.orderpriority);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clerk:");
    if (this.clerk == null) {
      sb.append("null");
    } else {
      sb.append(this.clerk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shippriority:");
    sb.append(this.shippriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

