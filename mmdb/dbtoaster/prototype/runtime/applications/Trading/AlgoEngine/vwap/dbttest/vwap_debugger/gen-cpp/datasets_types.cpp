/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "datasets_types.h"



const char* VwapTuple::ascii_fingerprint = "154BB42C2FFD70F8B3993568C50C5613";
const uint8_t VwapTuple::binary_fingerprint[16] = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

uint32_t VwapTuple::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->volume);
          this->__isset.volume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VwapTuple::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VwapTuple");
  xfer += oprot->writeFieldBegin("t", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->t);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("price", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->price);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("volume", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->volume);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Lineitem::ascii_fingerprint = "AB5C4FE4E481C195FB82612A4D94803F";
const uint8_t Lineitem::binary_fingerprint[16] = {0xAB,0x5C,0x4F,0xE4,0xE4,0x81,0xC1,0x95,0xFB,0x82,0x61,0x2A,0x4D,0x94,0x80,0x3F};

uint32_t Lineitem::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->orderkey);
          this->__isset.orderkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partkey);
          this->__isset.partkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->suppkey);
          this->__isset.suppkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->linenumber);
          this->__isset.linenumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->quantity);
          this->__isset.quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->extendedprice);
          this->__isset.extendedprice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->discount);
          this->__isset.discount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tax);
          this->__isset.tax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->returnflag);
          this->__isset.returnflag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->linestatus);
          this->__isset.linestatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shipdate);
          this->__isset.shipdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commitdate);
          this->__isset.commitdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptdate);
          this->__isset.receiptdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shipinstruct);
          this->__isset.shipinstruct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shipmode);
          this->__isset.shipmode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Lineitem::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Lineitem");
  xfer += oprot->writeFieldBegin("orderkey", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->orderkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("partkey", apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->partkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("suppkey", apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->suppkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("linenumber", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->linenumber);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("quantity", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->quantity);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("extendedprice", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->extendedprice);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("discount", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->discount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("tax", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->tax);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("returnflag", apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->returnflag);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("linestatus", apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->linestatus);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("shipdate", apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->shipdate);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("commitdate", apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->commitdate);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("receiptdate", apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->receiptdate);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("shipinstruct", apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->shipinstruct);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("shipmode", apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->shipmode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Order::ascii_fingerprint = "4607ECBF3B441114F62765D482D1DB8E";
const uint8_t Order::binary_fingerprint[16] = {0x46,0x07,0xEC,0xBF,0x3B,0x44,0x11,0x14,0xF6,0x27,0x65,0xD4,0x82,0xD1,0xDB,0x8E};

uint32_t Order::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->orderkey);
          this->__isset.orderkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->custkey);
          this->__isset.custkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderstatus);
          this->__isset.orderstatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->totalprice);
          this->__isset.totalprice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderdate);
          this->__isset.orderdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderpriority);
          this->__isset.orderpriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clerk);
          this->__isset.clerk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shippriority);
          this->__isset.shippriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Order::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Order");
  xfer += oprot->writeFieldBegin("orderkey", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->orderkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("custkey", apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->custkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("orderstatus", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->orderstatus);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("totalprice", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->totalprice);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("orderdate", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->orderdate);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("orderpriority", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->orderpriority);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("clerk", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->clerk);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("shippriority", apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->shippriority);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Part::ascii_fingerprint = "7D08BD81C300AEF1E1A9A65F404EA348";
const uint8_t Part::binary_fingerprint[16] = {0x7D,0x08,0xBD,0x81,0xC3,0x00,0xAE,0xF1,0xE1,0xA9,0xA6,0x5F,0x40,0x4E,0xA3,0x48};

uint32_t Part::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partkey);
          this->__isset.partkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mfgr);
          this->__isset.mfgr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->brand);
          this->__isset.brand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->container);
          this->__isset.container = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->retailprice);
          this->__isset.retailprice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Part::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Part");
  xfer += oprot->writeFieldBegin("partkey", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->partkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mfgr", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->mfgr);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("brand", apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->brand);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("size", apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("container", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->container);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("retailprice", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->retailprice);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Customer::ascii_fingerprint = "C24A1463A438E5959DD9A08800018360";
const uint8_t Customer::binary_fingerprint[16] = {0xC2,0x4A,0x14,0x63,0xA4,0x38,0xE5,0x95,0x9D,0xD9,0xA0,0x88,0x00,0x01,0x83,0x60};

uint32_t Customer::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->custkey);
          this->__isset.custkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nationkey);
          this->__isset.nationkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->acctbal);
          this->__isset.acctbal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mktsegment);
          this->__isset.mktsegment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Customer::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Customer");
  xfer += oprot->writeFieldBegin("custkey", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->custkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("address", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("nationkey", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nationkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("phone", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("acctbal", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->acctbal);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mktsegment", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mktsegment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Supplier::ascii_fingerprint = "C92E97F8910A38970A280E6AEE9B9327";
const uint8_t Supplier::binary_fingerprint[16] = {0xC9,0x2E,0x97,0xF8,0x91,0x0A,0x38,0x97,0x0A,0x28,0x0E,0x6A,0xEE,0x9B,0x93,0x27};

uint32_t Supplier::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->suppkey);
          this->__isset.suppkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nationkey);
          this->__isset.nationkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->acctbal);
          this->__isset.acctbal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Supplier::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Supplier");
  xfer += oprot->writeFieldBegin("suppkey", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->suppkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("address", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("nationkey", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nationkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("phone", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("acctbal", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->acctbal);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Nation::ascii_fingerprint = "7AF320A75D2A5961A062E16E122DCAD0";
const uint8_t Nation::binary_fingerprint[16] = {0x7A,0xF3,0x20,0xA7,0x5D,0x2A,0x59,0x61,0xA0,0x62,0xE1,0x6E,0x12,0x2D,0xCA,0xD0};

uint32_t Nation::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nationkey);
          this->__isset.nationkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->regionkey);
          this->__isset.regionkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Nation::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Nation");
  xfer += oprot->writeFieldBegin("nationkey", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->nationkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("regionkey", apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->regionkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Region::ascii_fingerprint = "BC9C141275D96A1BDFC4A1F500B2DCBE";
const uint8_t Region::binary_fingerprint[16] = {0xBC,0x9C,0x14,0x12,0x75,0xD9,0x6A,0x1B,0xDF,0xC4,0xA1,0xF5,0x00,0xB2,0xDC,0xBE};

uint32_t Region::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->regionkey);
          this->__isset.regionkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Region::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Region");
  xfer += oprot->writeFieldBegin("regionkey", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->regionkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SsbTuple::ascii_fingerprint = "DB7DB2B3B239C54B7F0B1DE074AF946D";
const uint8_t SsbTuple::binary_fingerprint[16] = {0xDB,0x7D,0xB2,0xB3,0xB2,0x39,0xC5,0x4B,0x7F,0x0B,0x1D,0xE0,0x74,0xAF,0x94,0x6D};

uint32_t SsbTuple::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->li.read(iprot);
          this->__isset.li = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->ord.read(iprot);
          this->__isset.ord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->pt.read(iprot);
          this->__isset.pt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->cust.read(iprot);
          this->__isset.cust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->supp.read(iprot);
          this->__isset.supp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->nt.read(iprot);
          this->__isset.nt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->rg.read(iprot);
          this->__isset.rg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SsbTuple::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SsbTuple");
  xfer += oprot->writeFieldBegin("type", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.li) {
    xfer += oprot->writeFieldBegin("li", apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->li.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ord) {
    xfer += oprot->writeFieldBegin("ord", apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ord.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pt) {
    xfer += oprot->writeFieldBegin("pt", apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->pt.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cust) {
    xfer += oprot->writeFieldBegin("cust", apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->cust.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.supp) {
    xfer += oprot->writeFieldBegin("supp", apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->supp.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nt) {
    xfer += oprot->writeFieldBegin("nt", apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->nt.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rg) {
    xfer += oprot->writeFieldBegin("rg", apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->rg.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* LinearRoadTuple::ascii_fingerprint = "64AC91B2641D95483CDF774472348F34";
const uint8_t LinearRoadTuple::binary_fingerprint[16] = {0x64,0xAC,0x91,0xB2,0x64,0x1D,0x95,0x48,0x3C,0xDF,0x77,0x44,0x72,0x34,0x8F,0x34};

uint32_t LinearRoadTuple::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rectype);
          this->__isset.rectype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xway);
          this->__isset.xway = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lane);
          this->__isset.lane = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dir);
          this->__isset.dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seg);
          this->__isset.seg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos);
          this->__isset.pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->qid);
          this->__isset.qid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sinit);
          this->__isset.sinit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->send);
          this->__isset.send = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dow);
          this->__isset.dow = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tod);
          this->__isset.tod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LinearRoadTuple::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LinearRoadTuple");
  xfer += oprot->writeFieldBegin("rectype", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rectype);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("t", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->t);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("vid", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->vid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("speed", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->speed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("xway", apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->xway);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lane", apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->lane);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("dir", apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->dir);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("seg", apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->seg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("pos", apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->pos);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("qid", apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->qid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sinit", apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->sinit);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("send", apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->send);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("dow", apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->dow);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("tod", apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->tod);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("day", apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->day);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


