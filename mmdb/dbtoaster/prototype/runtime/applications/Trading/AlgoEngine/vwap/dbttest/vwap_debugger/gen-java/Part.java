/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Part implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Part");
  private static final TField PARTKEY_FIELD_DESC = new TField("partkey", TType.I64, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField MFGR_FIELD_DESC = new TField("mfgr", TType.STRING, (short)3);
  private static final TField BRAND_FIELD_DESC = new TField("brand", TType.STRING, (short)4);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRING, (short)5);
  private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)6);
  private static final TField CONTAINER_FIELD_DESC = new TField("container", TType.STRING, (short)7);
  private static final TField RETAILPRICE_FIELD_DESC = new TField("retailprice", TType.DOUBLE, (short)8);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)9);

  public long partkey;
  public static final int PARTKEY = 1;
  public String name;
  public static final int NAME = 2;
  public String mfgr;
  public static final int MFGR = 3;
  public String brand;
  public static final int BRAND = 4;
  public String type;
  public static final int TYPE = 5;
  public int size;
  public static final int SIZE = 6;
  public String container;
  public static final int CONTAINER = 7;
  public double retailprice;
  public static final int RETAILPRICE = 8;
  public String comment;
  public static final int COMMENT = 9;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean partkey = false;
    public boolean size = false;
    public boolean retailprice = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(PARTKEY, new FieldMetaData("partkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(MFGR, new FieldMetaData("mfgr", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(BRAND, new FieldMetaData("brand", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SIZE, new FieldMetaData("size", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(CONTAINER, new FieldMetaData("container", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(RETAILPRICE, new FieldMetaData("retailprice", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(COMMENT, new FieldMetaData("comment", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Part.class, metaDataMap);
  }

  public Part() {
  }

  public Part(
    long partkey,
    String name,
    String mfgr,
    String brand,
    String type,
    int size,
    String container,
    double retailprice,
    String comment)
  {
    this();
    this.partkey = partkey;
    this.__isset.partkey = true;
    this.name = name;
    this.mfgr = mfgr;
    this.brand = brand;
    this.type = type;
    this.size = size;
    this.__isset.size = true;
    this.container = container;
    this.retailprice = retailprice;
    this.__isset.retailprice = true;
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Part(Part other) {
    __isset.partkey = other.__isset.partkey;
    this.partkey = other.partkey;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMfgr()) {
      this.mfgr = other.mfgr;
    }
    if (other.isSetBrand()) {
      this.brand = other.brand;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    __isset.size = other.__isset.size;
    this.size = other.size;
    if (other.isSetContainer()) {
      this.container = other.container;
    }
    __isset.retailprice = other.__isset.retailprice;
    this.retailprice = other.retailprice;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  @Override
  public Part clone() {
    return new Part(this);
  }

  public long getPartkey() {
    return this.partkey;
  }

  public void setPartkey(long partkey) {
    this.partkey = partkey;
    this.__isset.partkey = true;
  }

  public void unsetPartkey() {
    this.__isset.partkey = false;
  }

  // Returns true if field partkey is set (has been asigned a value) and false otherwise
  public boolean isSetPartkey() {
    return this.__isset.partkey;
  }

  public void setPartkeyIsSet(boolean value) {
    this.__isset.partkey = value;
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  // Returns true if field name is set (has been asigned a value) and false otherwise
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getMfgr() {
    return this.mfgr;
  }

  public void setMfgr(String mfgr) {
    this.mfgr = mfgr;
  }

  public void unsetMfgr() {
    this.mfgr = null;
  }

  // Returns true if field mfgr is set (has been asigned a value) and false otherwise
  public boolean isSetMfgr() {
    return this.mfgr != null;
  }

  public void setMfgrIsSet(boolean value) {
    if (!value) {
      this.mfgr = null;
    }
  }

  public String getBrand() {
    return this.brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }

  public void unsetBrand() {
    this.brand = null;
  }

  // Returns true if field brand is set (has been asigned a value) and false otherwise
  public boolean isSetBrand() {
    return this.brand != null;
  }

  public void setBrandIsSet(boolean value) {
    if (!value) {
      this.brand = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  // Returns true if field type is set (has been asigned a value) and false otherwise
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public void setSize(int size) {
    this.size = size;
    this.__isset.size = true;
  }

  public void unsetSize() {
    this.__isset.size = false;
  }

  // Returns true if field size is set (has been asigned a value) and false otherwise
  public boolean isSetSize() {
    return this.__isset.size;
  }

  public void setSizeIsSet(boolean value) {
    this.__isset.size = value;
  }

  public String getContainer() {
    return this.container;
  }

  public void setContainer(String container) {
    this.container = container;
  }

  public void unsetContainer() {
    this.container = null;
  }

  // Returns true if field container is set (has been asigned a value) and false otherwise
  public boolean isSetContainer() {
    return this.container != null;
  }

  public void setContainerIsSet(boolean value) {
    if (!value) {
      this.container = null;
    }
  }

  public double getRetailprice() {
    return this.retailprice;
  }

  public void setRetailprice(double retailprice) {
    this.retailprice = retailprice;
    this.__isset.retailprice = true;
  }

  public void unsetRetailprice() {
    this.__isset.retailprice = false;
  }

  // Returns true if field retailprice is set (has been asigned a value) and false otherwise
  public boolean isSetRetailprice() {
    return this.__isset.retailprice;
  }

  public void setRetailpriceIsSet(boolean value) {
    this.__isset.retailprice = value;
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  // Returns true if field comment is set (has been asigned a value) and false otherwise
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PARTKEY:
      if (value == null) {
        unsetPartkey();
      } else {
        setPartkey((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MFGR:
      if (value == null) {
        unsetMfgr();
      } else {
        setMfgr((String)value);
      }
      break;

    case BRAND:
      if (value == null) {
        unsetBrand();
      } else {
        setBrand((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case CONTAINER:
      if (value == null) {
        unsetContainer();
      } else {
        setContainer((String)value);
      }
      break;

    case RETAILPRICE:
      if (value == null) {
        unsetRetailprice();
      } else {
        setRetailprice((Double)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PARTKEY:
      return new Long(getPartkey());

    case NAME:
      return getName();

    case MFGR:
      return getMfgr();

    case BRAND:
      return getBrand();

    case TYPE:
      return getType();

    case SIZE:
      return new Integer(getSize());

    case CONTAINER:
      return getContainer();

    case RETAILPRICE:
      return new Double(getRetailprice());

    case COMMENT:
      return getComment();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PARTKEY:
      return isSetPartkey();
    case NAME:
      return isSetName();
    case MFGR:
      return isSetMfgr();
    case BRAND:
      return isSetBrand();
    case TYPE:
      return isSetType();
    case SIZE:
      return isSetSize();
    case CONTAINER:
      return isSetContainer();
    case RETAILPRICE:
      return isSetRetailprice();
    case COMMENT:
      return isSetComment();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Part)
      return this.equals((Part)that);
    return false;
  }

  public boolean equals(Part that) {
    if (that == null)
      return false;

    boolean this_present_partkey = true;
    boolean that_present_partkey = true;
    if (this_present_partkey || that_present_partkey) {
      if (!(this_present_partkey && that_present_partkey))
        return false;
      if (this.partkey != that.partkey)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mfgr = true && this.isSetMfgr();
    boolean that_present_mfgr = true && that.isSetMfgr();
    if (this_present_mfgr || that_present_mfgr) {
      if (!(this_present_mfgr && that_present_mfgr))
        return false;
      if (!this.mfgr.equals(that.mfgr))
        return false;
    }

    boolean this_present_brand = true && this.isSetBrand();
    boolean that_present_brand = true && that.isSetBrand();
    if (this_present_brand || that_present_brand) {
      if (!(this_present_brand && that_present_brand))
        return false;
      if (!this.brand.equals(that.brand))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_container = true && this.isSetContainer();
    boolean that_present_container = true && that.isSetContainer();
    if (this_present_container || that_present_container) {
      if (!(this_present_container && that_present_container))
        return false;
      if (!this.container.equals(that.container))
        return false;
    }

    boolean this_present_retailprice = true;
    boolean that_present_retailprice = true;
    if (this_present_retailprice || that_present_retailprice) {
      if (!(this_present_retailprice && that_present_retailprice))
        return false;
      if (this.retailprice != that.retailprice)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PARTKEY:
          if (field.type == TType.I64) {
            this.partkey = iprot.readI64();
            this.__isset.partkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MFGR:
          if (field.type == TType.STRING) {
            this.mfgr = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BRAND:
          if (field.type == TType.STRING) {
            this.brand = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.STRING) {
            this.type = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SIZE:
          if (field.type == TType.I32) {
            this.size = iprot.readI32();
            this.__isset.size = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTAINER:
          if (field.type == TType.STRING) {
            this.container = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RETAILPRICE:
          if (field.type == TType.DOUBLE) {
            this.retailprice = iprot.readDouble();
            this.__isset.retailprice = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PARTKEY_FIELD_DESC);
    oprot.writeI64(this.partkey);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.mfgr != null) {
      oprot.writeFieldBegin(MFGR_FIELD_DESC);
      oprot.writeString(this.mfgr);
      oprot.writeFieldEnd();
    }
    if (this.brand != null) {
      oprot.writeFieldBegin(BRAND_FIELD_DESC);
      oprot.writeString(this.brand);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SIZE_FIELD_DESC);
    oprot.writeI32(this.size);
    oprot.writeFieldEnd();
    if (this.container != null) {
      oprot.writeFieldBegin(CONTAINER_FIELD_DESC);
      oprot.writeString(this.container);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RETAILPRICE_FIELD_DESC);
    oprot.writeDouble(this.retailprice);
    oprot.writeFieldEnd();
    if (this.comment != null) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Part(");
    boolean first = true;

    sb.append("partkey:");
    sb.append(this.partkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mfgr:");
    if (this.mfgr == null) {
      sb.append("null");
    } else {
      sb.append(this.mfgr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand:");
    if (this.brand == null) {
      sb.append("null");
    } else {
      sb.append(this.brand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("container:");
    if (this.container == null) {
      sb.append("null");
    } else {
      sb.append(this.container);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retailprice:");
    sb.append(this.retailprice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

