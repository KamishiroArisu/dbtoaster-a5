/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class PutRequest implements TBase<PutRequest._Fields>, java.io.Serializable, Cloneable, Comparable<PutRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("PutRequest");

  private static final TField TEMPLATE_FIELD_DESC = new TField("template", TType.I64, (short)1);
  private static final TField ID_OFFSET_FIELD_DESC = new TField("id_offset", TType.I64, (short)2);
  private static final TField NUM_GETS_FIELD_DESC = new TField("num_gets", TType.I64, (short)3);

  public long template;
  public long id_offset;
  public long num_gets;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TEMPLATE((short)1, "template"),
    ID_OFFSET((short)2, "id_offset"),
    NUM_GETS((short)3, "num_gets");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMPLATE_ISSET_ID = 0;
  private static final int __ID_OFFSET_ISSET_ID = 1;
  private static final int __NUM_GETS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.TEMPLATE, new FieldMetaData("template", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(_Fields.ID_OFFSET, new FieldMetaData("id_offset", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(_Fields.NUM_GETS, new FieldMetaData("num_gets", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(PutRequest.class, metaDataMap);
  }

  public PutRequest() {
  }

  public PutRequest(
    long template,
    long id_offset,
    long num_gets)
  {
    this();
    this.template = template;
    setTemplateIsSet(true);
    this.id_offset = id_offset;
    setId_offsetIsSet(true);
    this.num_gets = num_gets;
    setNum_getsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PutRequest(PutRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.template = other.template;
    this.id_offset = other.id_offset;
    this.num_gets = other.num_gets;
  }

  public PutRequest deepCopy() {
    return new PutRequest(this);
  }

  @Deprecated
  public PutRequest clone() {
    return new PutRequest(this);
  }

  public long getTemplate() {
    return this.template;
  }

  public PutRequest setTemplate(long template) {
    this.template = template;
    setTemplateIsSet(true);
    return this;
  }

  public void unsetTemplate() {
    __isset_bit_vector.clear(__TEMPLATE_ISSET_ID);
  }

  /** Returns true if field template is set (has been asigned a value) and false otherwise */
  public boolean isSetTemplate() {
    return __isset_bit_vector.get(__TEMPLATE_ISSET_ID);
  }

  public void setTemplateIsSet(boolean value) {
    __isset_bit_vector.set(__TEMPLATE_ISSET_ID, value);
  }

  public long getId_offset() {
    return this.id_offset;
  }

  public PutRequest setId_offset(long id_offset) {
    this.id_offset = id_offset;
    setId_offsetIsSet(true);
    return this;
  }

  public void unsetId_offset() {
    __isset_bit_vector.clear(__ID_OFFSET_ISSET_ID);
  }

  /** Returns true if field id_offset is set (has been asigned a value) and false otherwise */
  public boolean isSetId_offset() {
    return __isset_bit_vector.get(__ID_OFFSET_ISSET_ID);
  }

  public void setId_offsetIsSet(boolean value) {
    __isset_bit_vector.set(__ID_OFFSET_ISSET_ID, value);
  }

  public long getNum_gets() {
    return this.num_gets;
  }

  public PutRequest setNum_gets(long num_gets) {
    this.num_gets = num_gets;
    setNum_getsIsSet(true);
    return this;
  }

  public void unsetNum_gets() {
    __isset_bit_vector.clear(__NUM_GETS_ISSET_ID);
  }

  /** Returns true if field num_gets is set (has been asigned a value) and false otherwise */
  public boolean isSetNum_gets() {
    return __isset_bit_vector.get(__NUM_GETS_ISSET_ID);
  }

  public void setNum_getsIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_GETS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMPLATE:
      if (value == null) {
        unsetTemplate();
      } else {
        setTemplate((Long)value);
      }
      break;

    case ID_OFFSET:
      if (value == null) {
        unsetId_offset();
      } else {
        setId_offset((Long)value);
      }
      break;

    case NUM_GETS:
      if (value == null) {
        unsetNum_gets();
      } else {
        setNum_gets((Long)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE:
      return new Long(getTemplate());

    case ID_OFFSET:
      return new Long(getId_offset());

    case NUM_GETS:
      return new Long(getNum_gets());

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case TEMPLATE:
      return isSetTemplate();
    case ID_OFFSET:
      return isSetId_offset();
    case NUM_GETS:
      return isSetNum_gets();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PutRequest)
      return this.equals((PutRequest)that);
    return false;
  }

  public boolean equals(PutRequest that) {
    if (that == null)
      return false;

    boolean this_present_template = true;
    boolean that_present_template = true;
    if (this_present_template || that_present_template) {
      if (!(this_present_template && that_present_template))
        return false;
      if (this.template != that.template)
        return false;
    }

    boolean this_present_id_offset = true;
    boolean that_present_id_offset = true;
    if (this_present_id_offset || that_present_id_offset) {
      if (!(this_present_id_offset && that_present_id_offset))
        return false;
      if (this.id_offset != that.id_offset)
        return false;
    }

    boolean this_present_num_gets = true;
    boolean that_present_num_gets = true;
    if (this_present_num_gets || that_present_num_gets) {
      if (!(this_present_num_gets && that_present_num_gets))
        return false;
      if (this.num_gets != that.num_gets)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PutRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PutRequest typedOther = (PutRequest)other;

    lastComparison = Boolean.valueOf(isSetTemplate()).compareTo(isSetTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(template, typedOther.template);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetId_offset()).compareTo(isSetId_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id_offset, typedOther.id_offset);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNum_gets()).compareTo(isSetNum_gets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(num_gets, typedOther.num_gets);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case TEMPLATE:
            if (field.type == TType.I64) {
              this.template = iprot.readI64();
              setTemplateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ID_OFFSET:
            if (field.type == TType.I64) {
              this.id_offset = iprot.readI64();
              setId_offsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NUM_GETS:
            if (field.type == TType.I64) {
              this.num_gets = iprot.readI64();
              setNum_getsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TEMPLATE_FIELD_DESC);
    oprot.writeI64(this.template);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ID_OFFSET_FIELD_DESC);
    oprot.writeI64(this.id_offset);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_GETS_FIELD_DESC);
    oprot.writeI64(this.num_gets);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PutRequest(");
    boolean first = true;

    sb.append("template:");
    sb.append(this.template);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id_offset:");
    sb.append(this.id_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_gets:");
    sb.append(this.num_gets);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

