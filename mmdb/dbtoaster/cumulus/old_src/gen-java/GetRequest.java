/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class GetRequest implements TBase<GetRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("GetRequest");

  private static final TField TARGET_FIELD_DESC = new TField("target", TType.STRUCT, (short)1);
  private static final TField ID_OFFSET_FIELD_DESC = new TField("id_offset", TType.I64, (short)2);
  private static final TField ENTRIES_FIELD_DESC = new TField("entries", TType.LIST, (short)3);

  public NodeID target;
  public long id_offset;
  public List<MapEntry> entries;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TARGET((short)1, "target"),
    ID_OFFSET((short)2, "id_offset"),
    ENTRIES((short)3, "entries");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_OFFSET_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.TARGET, new FieldMetaData("target", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, NodeID.class)));
    put(_Fields.ID_OFFSET, new FieldMetaData("id_offset", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(_Fields.ENTRIES, new FieldMetaData("entries", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, MapEntry.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(GetRequest.class, metaDataMap);
  }

  public GetRequest() {
  }

  public GetRequest(
    NodeID target,
    long id_offset,
    List<MapEntry> entries)
  {
    this();
    this.target = target;
    this.id_offset = id_offset;
    setId_offsetIsSet(true);
    this.entries = entries;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetRequest(GetRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTarget()) {
      this.target = new NodeID(other.target);
    }
    this.id_offset = other.id_offset;
    if (other.isSetEntries()) {
      List<MapEntry> __this__entries = new ArrayList<MapEntry>();
      for (MapEntry other_element : other.entries) {
        __this__entries.add(new MapEntry(other_element));
      }
      this.entries = __this__entries;
    }
  }

  public GetRequest deepCopy() {
    return new GetRequest(this);
  }

  @Deprecated
  public GetRequest clone() {
    return new GetRequest(this);
  }

  public NodeID getTarget() {
    return this.target;
  }

  public GetRequest setTarget(NodeID target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been asigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public long getId_offset() {
    return this.id_offset;
  }

  public GetRequest setId_offset(long id_offset) {
    this.id_offset = id_offset;
    setId_offsetIsSet(true);
    return this;
  }

  public void unsetId_offset() {
    __isset_bit_vector.clear(__ID_OFFSET_ISSET_ID);
  }

  /** Returns true if field id_offset is set (has been asigned a value) and false otherwise */
  public boolean isSetId_offset() {
    return __isset_bit_vector.get(__ID_OFFSET_ISSET_ID);
  }

  public void setId_offsetIsSet(boolean value) {
    __isset_bit_vector.set(__ID_OFFSET_ISSET_ID, value);
  }

  public int getEntriesSize() {
    return (this.entries == null) ? 0 : this.entries.size();
  }

  public java.util.Iterator<MapEntry> getEntriesIterator() {
    return (this.entries == null) ? null : this.entries.iterator();
  }

  public void addToEntries(MapEntry elem) {
    if (this.entries == null) {
      this.entries = new ArrayList<MapEntry>();
    }
    this.entries.add(elem);
  }

  public List<MapEntry> getEntries() {
    return this.entries;
  }

  public GetRequest setEntries(List<MapEntry> entries) {
    this.entries = entries;
    return this;
  }

  public void unsetEntries() {
    this.entries = null;
  }

  /** Returns true if field entries is set (has been asigned a value) and false otherwise */
  public boolean isSetEntries() {
    return this.entries != null;
  }

  public void setEntriesIsSet(boolean value) {
    if (!value) {
      this.entries = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((NodeID)value);
      }
      break;

    case ID_OFFSET:
      if (value == null) {
        unsetId_offset();
      } else {
        setId_offset((Long)value);
      }
      break;

    case ENTRIES:
      if (value == null) {
        unsetEntries();
      } else {
        setEntries((List<MapEntry>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET:
      return getTarget();

    case ID_OFFSET:
      return new Long(getId_offset());

    case ENTRIES:
      return getEntries();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case TARGET:
      return isSetTarget();
    case ID_OFFSET:
      return isSetId_offset();
    case ENTRIES:
      return isSetEntries();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetRequest)
      return this.equals((GetRequest)that);
    return false;
  }

  public boolean equals(GetRequest that) {
    if (that == null)
      return false;

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_id_offset = true;
    boolean that_present_id_offset = true;
    if (this_present_id_offset || that_present_id_offset) {
      if (!(this_present_id_offset && that_present_id_offset))
        return false;
      if (this.id_offset != that.id_offset)
        return false;
    }

    boolean this_present_entries = true && this.isSetEntries();
    boolean that_present_entries = true && that.isSetEntries();
    if (this_present_entries || that_present_entries) {
      if (!(this_present_entries && that_present_entries))
        return false;
      if (!this.entries.equals(that.entries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GetRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GetRequest typedOther = (GetRequest)other;

    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(target, typedOther.target);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetId_offset()).compareTo(isSetId_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id_offset, typedOther.id_offset);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEntries()).compareTo(isSetEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(entries, typedOther.entries);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case TARGET:
            if (field.type == TType.STRUCT) {
              this.target = new NodeID();
              this.target.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ID_OFFSET:
            if (field.type == TType.I64) {
              this.id_offset = iprot.readI64();
              setId_offsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ENTRIES:
            if (field.type == TType.LIST) {
              {
                TList _list8 = iprot.readListBegin();
                this.entries = new ArrayList<MapEntry>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  MapEntry _elem10;
                  _elem10 = new MapEntry();
                  _elem10.read(iprot);
                  this.entries.add(_elem10);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.target != null) {
      oprot.writeFieldBegin(TARGET_FIELD_DESC);
      this.target.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ID_OFFSET_FIELD_DESC);
    oprot.writeI64(this.id_offset);
    oprot.writeFieldEnd();
    if (this.entries != null) {
      oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.entries.size()));
        for (MapEntry _iter11 : this.entries)
        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetRequest(");
    boolean first = true;

    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id_offset:");
    sb.append(this.id_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entries:");
    if (this.entries == null) {
      sb.append("null");
    } else {
      sb.append(this.entries);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

