/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Entry implements TBase<Entry._Fields>, java.io.Serializable, Cloneable, Comparable<Entry> {
  private static final TStruct STRUCT_DESC = new TStruct("Entry");

  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I64, (short)1);
  private static final TField KEY_FIELD_DESC = new TField("key", TType.LIST, (short)2);

  public long source;
  public List<Long> key;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SOURCE((short)1, "source"),
    KEY((short)2, "key");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Entry.class, metaDataMap);
  }

  public Entry() {
  }

  public Entry(
    long source,
    List<Long> key)
  {
    this();
    this.source = source;
    setSourceIsSet(true);
    this.key = key;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Entry(Entry other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.source = other.source;
    if (other.isSetKey()) {
      List<Long> __this__key = new ArrayList<Long>();
      for (Long other_element : other.key) {
        __this__key.add(other_element);
      }
      this.key = __this__key;
    }
  }

  public Entry deepCopy() {
    return new Entry(this);
  }

  @Deprecated
  public Entry clone() {
    return new Entry(this);
  }

  public long getSource() {
    return this.source;
  }

  public Entry setSource(long source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public int getKeySize() {
    return (this.key == null) ? 0 : this.key.size();
  }

  public java.util.Iterator<Long> getKeyIterator() {
    return (this.key == null) ? null : this.key.iterator();
  }

  public void addToKey(long elem) {
    if (this.key == null) {
      this.key = new ArrayList<Long>();
    }
    this.key.add(elem);
  }

  public List<Long> getKey() {
    return this.key;
  }

  public Entry setKey(List<Long> key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been asigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Long)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((List<Long>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE:
      return new Long(getSource());

    case KEY:
      return getKey();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case SOURCE:
      return isSetSource();
    case KEY:
      return isSetKey();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Entry)
      return this.equals((Entry)that);
    return false;
  }

  public boolean equals(Entry that) {
    if (that == null)
      return false;

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Entry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Entry typedOther = (Entry)other;

    lastComparison = Boolean.valueOf(isSetSource()).compareTo(isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(source, typedOther.source);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(key, typedOther.key);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case SOURCE:
            if (field.type == TType.I64) {
              this.source = iprot.readI64();
              setSourceIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case KEY:
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.key = new ArrayList<Long>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.readI64();
                  this.key.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI64(this.source);
    oprot.writeFieldEnd();
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.key.size()));
        for (long _iter3 : this.key)
        {
          oprot.writeI64(_iter3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Entry(");
    boolean first = true;

    sb.append("source:");
    sb.append(this.source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

