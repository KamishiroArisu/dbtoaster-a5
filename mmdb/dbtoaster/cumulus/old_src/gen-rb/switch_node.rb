#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'spread_types'

module SwitchNode
  class Client
    include ::Thrift::Client

    def update(table, params)
      send_update(table, params)
      recv_update()
    end

    def send_update(table, params)
      send_message('update', Update_args, :table => table, :params => params)
    end

    def recv_update()
      result = receive_message(Update_result)
      raise result.error unless result.error.nil?
      return
    end

    def dump()
      send_dump()
      return recv_dump()
    end

    def send_dump()
      send_message('dump', Dump_args)
    end

    def recv_dump()
      result = receive_message(Dump_result)
      return result.success unless result.success.nil?
      raise result.error unless result.error.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'dump failed: unknown result')
    end

    def request_backoff(node)
      send_request_backoff(node)
    end

    def send_request_backoff(node)
      send_message('request_backoff', Request_backoff_args, :node => node)
    end
    def finish_backoff(node)
      send_finish_backoff(node)
    end

    def send_finish_backoff(node)
      send_message('finish_backoff', Finish_backoff_args, :node => node)
    end
  end

  class Processor
    include ::Thrift::Processor

    def process_update(seqid, iprot, oprot)
      args = read_args(iprot, Update_args)
      result = Update_result.new()
      begin
        @handler.update(args.table, args.params)
      rescue SpreadException => error
        result.error = error
      end
      write_result(result, oprot, 'update', seqid)
    end

    def process_dump(seqid, iprot, oprot)
      args = read_args(iprot, Dump_args)
      result = Dump_result.new()
      begin
        result.success = @handler.dump()
      rescue SpreadException => error
        result.error = error
      end
      write_result(result, oprot, 'dump', seqid)
    end

    def process_request_backoff(seqid, iprot, oprot)
      args = read_args(iprot, Request_backoff_args)
      @handler.request_backoff(args.node)
      return
    end

    def process_finish_backoff(seqid, iprot, oprot)
      args = read_args(iprot, Finish_backoff_args)
      @handler.finish_backoff(args.node)
      return
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Update_args
    include ::Thrift::Struct
    TABLE = 1
    PARAMS = 2

    ::Thrift::Struct.field_accessor self, :table, :params
    FIELDS = {
      TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'},
      PARAMS => {:type => ::Thrift::Types::LIST, :name => 'params', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Update_result
    include ::Thrift::Struct
    ERROR = 1

    ::Thrift::Struct.field_accessor self, :error
    FIELDS = {
      ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'error', :class => SpreadException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Dump_args
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Dump_result
    include ::Thrift::Struct
    SUCCESS = 0
    ERROR = 1

    ::Thrift::Struct.field_accessor self, :success, :error
    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'error', :class => SpreadException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Request_backoff_args
    include ::Thrift::Struct
    NODE = 1

    ::Thrift::Struct.field_accessor self, :node
    FIELDS = {
      NODE => {:type => ::Thrift::Types::STRUCT, :name => 'node', :class => NodeID}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Request_backoff_result
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Finish_backoff_args
    include ::Thrift::Struct
    NODE = 1

    ::Thrift::Struct.field_accessor self, :node
    FIELDS = {
      NODE => {:type => ::Thrift::Types::STRUCT, :name => 'node', :class => NodeID}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Finish_backoff_result
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

end

