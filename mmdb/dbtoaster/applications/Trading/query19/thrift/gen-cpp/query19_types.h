/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef query19_TYPES_H
#define query19_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "profiler_types.h"


namespace DBToaster { namespace Viewer { namespace query19 {

enum DmlType {
  insertTuple = 0,
  deleteTuple = 1
};

typedef int32_t DBToasterStreamId;

class var15_tuple {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  var15_tuple() : var0(0), var1(0) {
  }

  virtual ~var15_tuple() throw() {}

  int32_t var0;
  int32_t var1;

  struct __isset {
    __isset() : var0(false), var1(false) {}
    bool var0;
    bool var1;
  } __isset;

  bool operator == (const var15_tuple & rhs) const
  {
    if (!(var0 == rhs.var0))
      return false;
    if (!(var1 == rhs.var1))
      return false;
    return true;
  }
  bool operator != (const var15_tuple &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const var15_tuple & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class bids_elem {
 public:

  static const char* ascii_fingerprint; // = "2EB010665070FC89CB24AB9DA34D5F9D";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

  bids_elem() : t11(0), id11(0), broker_id11(0), p11(0), v11(0) {
  }

  virtual ~bids_elem() throw() {}

  int32_t t11;
  int32_t id11;
  int32_t broker_id11;
  int32_t p11;
  int32_t v11;

  struct __isset {
    __isset() : t11(false), id11(false), broker_id11(false), p11(false), v11(false) {}
    bool t11;
    bool id11;
    bool broker_id11;
    bool p11;
    bool v11;
  } __isset;

  bool operator == (const bids_elem & rhs) const
  {
    if (!(t11 == rhs.t11))
      return false;
    if (!(id11 == rhs.id11))
      return false;
    if (!(broker_id11 == rhs.broker_id11))
      return false;
    if (!(p11 == rhs.p11))
      return false;
    if (!(v11 == rhs.v11))
      return false;
    return true;
  }
  bool operator != (const bids_elem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bids_elem & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

}}} // namespace

#endif
