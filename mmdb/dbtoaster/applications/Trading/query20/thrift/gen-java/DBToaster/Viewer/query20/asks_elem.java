/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package DBToaster.Viewer.query20;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class asks_elem implements TBase, java.io.Serializable, Cloneable, Comparable<asks_elem> {
  private static final TStruct STRUCT_DESC = new TStruct("asks_elem");
  private static final TField T11_FIELD_DESC = new TField("t11", TType.I32, (short)1);
  private static final TField ID11_FIELD_DESC = new TField("id11", TType.I32, (short)2);
  private static final TField BROKER_ID11_FIELD_DESC = new TField("broker_id11", TType.I32, (short)3);
  private static final TField P11_FIELD_DESC = new TField("p11", TType.I32, (short)4);
  private static final TField V11_FIELD_DESC = new TField("v11", TType.I32, (short)5);

  public int t11;
  public static final int T11 = 1;
  public int id11;
  public static final int ID11 = 2;
  public int broker_id11;
  public static final int BROKER_ID11 = 3;
  public int p11;
  public static final int P11 = 4;
  public int v11;
  public static final int V11 = 5;

  // isset id assignments
  private static final int __T11_ISSET_ID = 0;
  private static final int __ID11_ISSET_ID = 1;
  private static final int __BROKER_ID11_ISSET_ID = 2;
  private static final int __P11_ISSET_ID = 3;
  private static final int __V11_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(T11, new FieldMetaData("t11", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(ID11, new FieldMetaData("id11", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(BROKER_ID11, new FieldMetaData("broker_id11", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(P11, new FieldMetaData("p11", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(V11, new FieldMetaData("v11", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(asks_elem.class, metaDataMap);
  }

  public asks_elem() {
  }

  public asks_elem(
    int t11,
    int id11,
    int broker_id11,
    int p11,
    int v11)
  {
    this();
    this.t11 = t11;
    setT11IsSet(true);
    this.id11 = id11;
    setId11IsSet(true);
    this.broker_id11 = broker_id11;
    setBroker_id11IsSet(true);
    this.p11 = p11;
    setP11IsSet(true);
    this.v11 = v11;
    setV11IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public asks_elem(asks_elem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.t11 = other.t11;
    this.id11 = other.id11;
    this.broker_id11 = other.broker_id11;
    this.p11 = other.p11;
    this.v11 = other.v11;
  }

  @Override
  public asks_elem clone() {
    return new asks_elem(this);
  }

  public int getT11() {
    return this.t11;
  }

  public asks_elem setT11(int t11) {
    this.t11 = t11;
    setT11IsSet(true);
    return this;
  }

  public void unsetT11() {
    __isset_bit_vector.clear(__T11_ISSET_ID);
  }

  // Returns true if field t11 is set (has been asigned a value) and false otherwise
  public boolean isSetT11() {
    return __isset_bit_vector.get(__T11_ISSET_ID);
  }

  public void setT11IsSet(boolean value) {
    __isset_bit_vector.set(__T11_ISSET_ID, value);
  }

  public int getId11() {
    return this.id11;
  }

  public asks_elem setId11(int id11) {
    this.id11 = id11;
    setId11IsSet(true);
    return this;
  }

  public void unsetId11() {
    __isset_bit_vector.clear(__ID11_ISSET_ID);
  }

  // Returns true if field id11 is set (has been asigned a value) and false otherwise
  public boolean isSetId11() {
    return __isset_bit_vector.get(__ID11_ISSET_ID);
  }

  public void setId11IsSet(boolean value) {
    __isset_bit_vector.set(__ID11_ISSET_ID, value);
  }

  public int getBroker_id11() {
    return this.broker_id11;
  }

  public asks_elem setBroker_id11(int broker_id11) {
    this.broker_id11 = broker_id11;
    setBroker_id11IsSet(true);
    return this;
  }

  public void unsetBroker_id11() {
    __isset_bit_vector.clear(__BROKER_ID11_ISSET_ID);
  }

  // Returns true if field broker_id11 is set (has been asigned a value) and false otherwise
  public boolean isSetBroker_id11() {
    return __isset_bit_vector.get(__BROKER_ID11_ISSET_ID);
  }

  public void setBroker_id11IsSet(boolean value) {
    __isset_bit_vector.set(__BROKER_ID11_ISSET_ID, value);
  }

  public int getP11() {
    return this.p11;
  }

  public asks_elem setP11(int p11) {
    this.p11 = p11;
    setP11IsSet(true);
    return this;
  }

  public void unsetP11() {
    __isset_bit_vector.clear(__P11_ISSET_ID);
  }

  // Returns true if field p11 is set (has been asigned a value) and false otherwise
  public boolean isSetP11() {
    return __isset_bit_vector.get(__P11_ISSET_ID);
  }

  public void setP11IsSet(boolean value) {
    __isset_bit_vector.set(__P11_ISSET_ID, value);
  }

  public int getV11() {
    return this.v11;
  }

  public asks_elem setV11(int v11) {
    this.v11 = v11;
    setV11IsSet(true);
    return this;
  }

  public void unsetV11() {
    __isset_bit_vector.clear(__V11_ISSET_ID);
  }

  // Returns true if field v11 is set (has been asigned a value) and false otherwise
  public boolean isSetV11() {
    return __isset_bit_vector.get(__V11_ISSET_ID);
  }

  public void setV11IsSet(boolean value) {
    __isset_bit_vector.set(__V11_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case T11:
      if (value == null) {
        unsetT11();
      } else {
        setT11((Integer)value);
      }
      break;

    case ID11:
      if (value == null) {
        unsetId11();
      } else {
        setId11((Integer)value);
      }
      break;

    case BROKER_ID11:
      if (value == null) {
        unsetBroker_id11();
      } else {
        setBroker_id11((Integer)value);
      }
      break;

    case P11:
      if (value == null) {
        unsetP11();
      } else {
        setP11((Integer)value);
      }
      break;

    case V11:
      if (value == null) {
        unsetV11();
      } else {
        setV11((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case T11:
      return new Integer(getT11());

    case ID11:
      return new Integer(getId11());

    case BROKER_ID11:
      return new Integer(getBroker_id11());

    case P11:
      return new Integer(getP11());

    case V11:
      return new Integer(getV11());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case T11:
      return isSetT11();
    case ID11:
      return isSetId11();
    case BROKER_ID11:
      return isSetBroker_id11();
    case P11:
      return isSetP11();
    case V11:
      return isSetV11();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof asks_elem)
      return this.equals((asks_elem)that);
    return false;
  }

  public boolean equals(asks_elem that) {
    if (that == null)
      return false;

    boolean this_present_t11 = true;
    boolean that_present_t11 = true;
    if (this_present_t11 || that_present_t11) {
      if (!(this_present_t11 && that_present_t11))
        return false;
      if (this.t11 != that.t11)
        return false;
    }

    boolean this_present_id11 = true;
    boolean that_present_id11 = true;
    if (this_present_id11 || that_present_id11) {
      if (!(this_present_id11 && that_present_id11))
        return false;
      if (this.id11 != that.id11)
        return false;
    }

    boolean this_present_broker_id11 = true;
    boolean that_present_broker_id11 = true;
    if (this_present_broker_id11 || that_present_broker_id11) {
      if (!(this_present_broker_id11 && that_present_broker_id11))
        return false;
      if (this.broker_id11 != that.broker_id11)
        return false;
    }

    boolean this_present_p11 = true;
    boolean that_present_p11 = true;
    if (this_present_p11 || that_present_p11) {
      if (!(this_present_p11 && that_present_p11))
        return false;
      if (this.p11 != that.p11)
        return false;
    }

    boolean this_present_v11 = true;
    boolean that_present_v11 = true;
    if (this_present_v11 || that_present_v11) {
      if (!(this_present_v11 && that_present_v11))
        return false;
      if (this.v11 != that.v11)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(asks_elem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    asks_elem typedOther = (asks_elem)other;

    lastComparison = Boolean.valueOf(isSetT11()).compareTo(isSetT11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(t11, typedOther.t11);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetId11()).compareTo(isSetId11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id11, typedOther.id11);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBroker_id11()).compareTo(isSetBroker_id11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(broker_id11, typedOther.broker_id11);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetP11()).compareTo(isSetP11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(p11, typedOther.p11);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetV11()).compareTo(isSetV11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(v11, typedOther.v11);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case T11:
          if (field.type == TType.I32) {
            this.t11 = iprot.readI32();
            setT11IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ID11:
          if (field.type == TType.I32) {
            this.id11 = iprot.readI32();
            setId11IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BROKER_ID11:
          if (field.type == TType.I32) {
            this.broker_id11 = iprot.readI32();
            setBroker_id11IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case P11:
          if (field.type == TType.I32) {
            this.p11 = iprot.readI32();
            setP11IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case V11:
          if (field.type == TType.I32) {
            this.v11 = iprot.readI32();
            setV11IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetT11()) {
      throw new TProtocolException("Required field 't11' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetId11()) {
      throw new TProtocolException("Required field 'id11' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetBroker_id11()) {
      throw new TProtocolException("Required field 'broker_id11' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetP11()) {
      throw new TProtocolException("Required field 'p11' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetV11()) {
      throw new TProtocolException("Required field 'v11' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(T11_FIELD_DESC);
    oprot.writeI32(this.t11);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ID11_FIELD_DESC);
    oprot.writeI32(this.id11);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BROKER_ID11_FIELD_DESC);
    oprot.writeI32(this.broker_id11);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(P11_FIELD_DESC);
    oprot.writeI32(this.p11);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(V11_FIELD_DESC);
    oprot.writeI32(this.v11);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("asks_elem(");
    boolean first = true;

    sb.append("t11:");
    sb.append(this.t11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id11:");
    sb.append(this.id11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("broker_id11:");
    sb.append(this.broker_id11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p11:");
    sb.append(this.p11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("v11:");
    sb.append(this.v11);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // 't11' is only checked in read() because it's a primitive and you chose the non-beans generator.
    // 'id11' is only checked in read() because it's a primitive and you chose the non-beans generator.
    // 'broker_id11' is only checked in read() because it's a primitive and you chose the non-beans generator.
    // 'p11' is only checked in read() because it's a primitive and you chose the non-beans generator.
    // 'v11' is only checked in read() because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }

}

