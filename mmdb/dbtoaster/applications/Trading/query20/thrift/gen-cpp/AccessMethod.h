/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef AccessMethod_H
#define AccessMethod_H

#include <TProcessor.h>
#include "query20_types.h"
#include "Profiler.h"

namespace DBToaster { namespace Viewer { namespace query20 {

class AccessMethodIf : virtual public DBToaster::Profiler::Protocol::ProfilerIf {
 public:
  virtual ~AccessMethodIf() {}
  virtual int32_t get_var0() = 0;
  virtual int32_t get_var1() = 0;
  virtual void get_map0(std::map<int32_t, double> & _return) = 0;
  virtual void get_dom0(std::map<int32_t, int32_t> & _return) = 0;
  virtual void get_asks(std::vector<asks_elem> & _return) = 0;
  virtual void get_map1(std::map<int32_t, int32_t> & _return) = 0;
  virtual void get_map2(std::map<int32_t, int32_t> & _return) = 0;
  virtual void get_var15(var15_tuple& _return) = 0;
};

class AccessMethodNull : virtual public AccessMethodIf , virtual public DBToaster::Profiler::Protocol::ProfilerNull {
 public:
  virtual ~AccessMethodNull() {}
  int32_t get_var0() {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_var1() {
    int32_t _return = 0;
    return _return;
  }
  void get_map0(std::map<int32_t, double> & /* _return */) {
    return;
  }
  void get_dom0(std::map<int32_t, int32_t> & /* _return */) {
    return;
  }
  void get_asks(std::vector<asks_elem> & /* _return */) {
    return;
  }
  void get_map1(std::map<int32_t, int32_t> & /* _return */) {
    return;
  }
  void get_map2(std::map<int32_t, int32_t> & /* _return */) {
    return;
  }
  void get_var15(var15_tuple& /* _return */) {
    return;
  }
};

class AccessMethod_get_var0_args {
 public:

  AccessMethod_get_var0_args() {
  }

  virtual ~AccessMethod_get_var0_args() throw() {}


  bool operator == (const AccessMethod_get_var0_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_var0_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_var0_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var0_pargs {
 public:


  virtual ~AccessMethod_get_var0_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var0_result {
 public:

  AccessMethod_get_var0_result() : success(0) {
  }

  virtual ~AccessMethod_get_var0_result() throw() {}

  int32_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_var0_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_var0_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_var0_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var0_presult {
 public:


  virtual ~AccessMethod_get_var0_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethod_get_var1_args {
 public:

  AccessMethod_get_var1_args() {
  }

  virtual ~AccessMethod_get_var1_args() throw() {}


  bool operator == (const AccessMethod_get_var1_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_var1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_var1_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var1_pargs {
 public:


  virtual ~AccessMethod_get_var1_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var1_result {
 public:

  AccessMethod_get_var1_result() : success(0) {
  }

  virtual ~AccessMethod_get_var1_result() throw() {}

  int32_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_var1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_var1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_var1_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var1_presult {
 public:


  virtual ~AccessMethod_get_var1_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethod_get_map0_args {
 public:

  AccessMethod_get_map0_args() {
  }

  virtual ~AccessMethod_get_map0_args() throw() {}


  bool operator == (const AccessMethod_get_map0_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_map0_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_map0_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map0_pargs {
 public:


  virtual ~AccessMethod_get_map0_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map0_result {
 public:

  AccessMethod_get_map0_result() {
  }

  virtual ~AccessMethod_get_map0_result() throw() {}

  std::map<int32_t, double>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_map0_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_map0_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_map0_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map0_presult {
 public:


  virtual ~AccessMethod_get_map0_presult() throw() {}

  std::map<int32_t, double> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethod_get_dom0_args {
 public:

  AccessMethod_get_dom0_args() {
  }

  virtual ~AccessMethod_get_dom0_args() throw() {}


  bool operator == (const AccessMethod_get_dom0_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_dom0_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_dom0_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_dom0_pargs {
 public:


  virtual ~AccessMethod_get_dom0_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_dom0_result {
 public:

  AccessMethod_get_dom0_result() {
  }

  virtual ~AccessMethod_get_dom0_result() throw() {}

  std::map<int32_t, int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_dom0_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_dom0_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_dom0_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_dom0_presult {
 public:


  virtual ~AccessMethod_get_dom0_presult() throw() {}

  std::map<int32_t, int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethod_get_asks_args {
 public:

  AccessMethod_get_asks_args() {
  }

  virtual ~AccessMethod_get_asks_args() throw() {}


  bool operator == (const AccessMethod_get_asks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_asks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_asks_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_asks_pargs {
 public:


  virtual ~AccessMethod_get_asks_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_asks_result {
 public:

  AccessMethod_get_asks_result() {
  }

  virtual ~AccessMethod_get_asks_result() throw() {}

  std::vector<asks_elem>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_asks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_asks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_asks_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_asks_presult {
 public:


  virtual ~AccessMethod_get_asks_presult() throw() {}

  std::vector<asks_elem> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethod_get_map1_args {
 public:

  AccessMethod_get_map1_args() {
  }

  virtual ~AccessMethod_get_map1_args() throw() {}


  bool operator == (const AccessMethod_get_map1_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_map1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_map1_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map1_pargs {
 public:


  virtual ~AccessMethod_get_map1_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map1_result {
 public:

  AccessMethod_get_map1_result() {
  }

  virtual ~AccessMethod_get_map1_result() throw() {}

  std::map<int32_t, int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_map1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_map1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_map1_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map1_presult {
 public:


  virtual ~AccessMethod_get_map1_presult() throw() {}

  std::map<int32_t, int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethod_get_map2_args {
 public:

  AccessMethod_get_map2_args() {
  }

  virtual ~AccessMethod_get_map2_args() throw() {}


  bool operator == (const AccessMethod_get_map2_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_map2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_map2_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map2_pargs {
 public:


  virtual ~AccessMethod_get_map2_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map2_result {
 public:

  AccessMethod_get_map2_result() {
  }

  virtual ~AccessMethod_get_map2_result() throw() {}

  std::map<int32_t, int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_map2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_map2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_map2_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_map2_presult {
 public:


  virtual ~AccessMethod_get_map2_presult() throw() {}

  std::map<int32_t, int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethod_get_var15_args {
 public:

  AccessMethod_get_var15_args() {
  }

  virtual ~AccessMethod_get_var15_args() throw() {}


  bool operator == (const AccessMethod_get_var15_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessMethod_get_var15_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_var15_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var15_pargs {
 public:


  virtual ~AccessMethod_get_var15_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var15_result {
 public:

  AccessMethod_get_var15_result() {
  }

  virtual ~AccessMethod_get_var15_result() throw() {}

  var15_tuple success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const AccessMethod_get_var15_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessMethod_get_var15_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMethod_get_var15_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class AccessMethod_get_var15_presult {
 public:


  virtual ~AccessMethod_get_var15_presult() throw() {}

  var15_tuple* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class AccessMethodClient : virtual public AccessMethodIf, public DBToaster::Profiler::Protocol::ProfilerClient {
 public:
  AccessMethodClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    DBToaster::Profiler::Protocol::ProfilerClient(prot, prot) {}
  AccessMethodClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    DBToaster::Profiler::Protocol::ProfilerClient(iprot, oprot) {}
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t get_var0();
  void send_get_var0();
  int32_t recv_get_var0();
  int32_t get_var1();
  void send_get_var1();
  int32_t recv_get_var1();
  void get_map0(std::map<int32_t, double> & _return);
  void send_get_map0();
  void recv_get_map0(std::map<int32_t, double> & _return);
  void get_dom0(std::map<int32_t, int32_t> & _return);
  void send_get_dom0();
  void recv_get_dom0(std::map<int32_t, int32_t> & _return);
  void get_asks(std::vector<asks_elem> & _return);
  void send_get_asks();
  void recv_get_asks(std::vector<asks_elem> & _return);
  void get_map1(std::map<int32_t, int32_t> & _return);
  void send_get_map1();
  void recv_get_map1(std::map<int32_t, int32_t> & _return);
  void get_map2(std::map<int32_t, int32_t> & _return);
  void send_get_map2();
  void recv_get_map2(std::map<int32_t, int32_t> & _return);
  void get_var15(var15_tuple& _return);
  void send_get_var15();
  void recv_get_var15(var15_tuple& _return);
};

class AccessMethodProcessor : virtual public apache::thrift::TProcessor, public DBToaster::Profiler::Protocol::ProfilerProcessor {
 protected:
  boost::shared_ptr<AccessMethodIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (AccessMethodProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_get_var0(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_var1(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_map0(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_dom0(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_asks(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_map1(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_map2(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_var15(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  AccessMethodProcessor(boost::shared_ptr<AccessMethodIf> iface) :
    DBToaster::Profiler::Protocol::ProfilerProcessor(iface),
    iface_(iface) {
    processMap_["get_var0"] = &AccessMethodProcessor::process_get_var0;
    processMap_["get_var1"] = &AccessMethodProcessor::process_get_var1;
    processMap_["get_map0"] = &AccessMethodProcessor::process_get_map0;
    processMap_["get_dom0"] = &AccessMethodProcessor::process_get_dom0;
    processMap_["get_asks"] = &AccessMethodProcessor::process_get_asks;
    processMap_["get_map1"] = &AccessMethodProcessor::process_get_map1;
    processMap_["get_map2"] = &AccessMethodProcessor::process_get_map2;
    processMap_["get_var15"] = &AccessMethodProcessor::process_get_var15;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~AccessMethodProcessor() {}
};

class AccessMethodMultiface : virtual public AccessMethodIf, public DBToaster::Profiler::Protocol::ProfilerMultiface {
 public:
  AccessMethodMultiface(std::vector<boost::shared_ptr<AccessMethodIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<AccessMethodIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      DBToaster::Profiler::Protocol::ProfilerMultiface::add(*iter);
    }
  }
  virtual ~AccessMethodMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AccessMethodIf> > ifaces_;
  AccessMethodMultiface() {}
  void add(boost::shared_ptr<AccessMethodIf> iface) {
    DBToaster::Profiler::Protocol::ProfilerMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  int32_t get_var0() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->get_var0();
      } else {
        ifaces_[i]->get_var0();
      }
    }
  }

  int32_t get_var1() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->get_var1();
      } else {
        ifaces_[i]->get_var1();
      }
    }
  }

  void get_map0(std::map<int32_t, double> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_map0(_return);
        return;
      } else {
        ifaces_[i]->get_map0(_return);
      }
    }
  }

  void get_dom0(std::map<int32_t, int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_dom0(_return);
        return;
      } else {
        ifaces_[i]->get_dom0(_return);
      }
    }
  }

  void get_asks(std::vector<asks_elem> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_asks(_return);
        return;
      } else {
        ifaces_[i]->get_asks(_return);
      }
    }
  }

  void get_map1(std::map<int32_t, int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_map1(_return);
        return;
      } else {
        ifaces_[i]->get_map1(_return);
      }
    }
  }

  void get_map2(std::map<int32_t, int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_map2(_return);
        return;
      } else {
        ifaces_[i]->get_map2(_return);
      }
    }
  }

  void get_var15(var15_tuple& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_var15(_return);
        return;
      } else {
        ifaces_[i]->get_var15(_return);
      }
    }
  }

};

}}} // namespace

#endif
