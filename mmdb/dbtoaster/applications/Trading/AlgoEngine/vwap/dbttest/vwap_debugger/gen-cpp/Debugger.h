/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Debugger_H
#define Debugger_H

#include <TProcessor.h>
#include "vwap_types.h"

namespace DBToaster { namespace Debugger {

class DebuggerIf {
 public:
  virtual ~DebuggerIf() {}
  virtual void step_VwapBids(const ThriftVwapTuple& input) = 0;
  virtual void stepn_VwapBids(const int32_t n) = 0;
  virtual int32_t get_var2() = 0;
  virtual void get_map0(std::map<int32_t, int32_t> & _return) = 0;
  virtual void get_dom0(std::set<int32_t> & _return) = 0;
  virtual void get_B(std::vector<B_elem> & _return) = 0;
  virtual void get_map1(std::map<int32_t, int32_t> & _return) = 0;
  virtual void get_dom1(std::set<int32_t> & _return) = 0;
  virtual void get_map2(std::map<int32_t, int32_t> & _return) = 0;
  virtual void get_map3(std::map<int32_t, int32_t> & _return) = 0;
};

class DebuggerNull : virtual public DebuggerIf {
 public:
  virtual ~DebuggerNull() {}
  void step_VwapBids(const ThriftVwapTuple& /* input */) {
    return;
  }
  void stepn_VwapBids(const int32_t /* n */) {
    return;
  }
  int32_t get_var2() {
    int32_t _return = 0;
    return _return;
  }
  void get_map0(std::map<int32_t, int32_t> & /* _return */) {
    return;
  }
  void get_dom0(std::set<int32_t> & /* _return */) {
    return;
  }
  void get_B(std::vector<B_elem> & /* _return */) {
    return;
  }
  void get_map1(std::map<int32_t, int32_t> & /* _return */) {
    return;
  }
  void get_dom1(std::set<int32_t> & /* _return */) {
    return;
  }
  void get_map2(std::map<int32_t, int32_t> & /* _return */) {
    return;
  }
  void get_map3(std::map<int32_t, int32_t> & /* _return */) {
    return;
  }
};

class Debugger_step_VwapBids_args {
 public:

  Debugger_step_VwapBids_args() {
  }

  virtual ~Debugger_step_VwapBids_args() throw() {}

  ThriftVwapTuple input;

  struct __isset {
    __isset() : input(false) {}
    bool input;
  } __isset;

  bool operator == (const Debugger_step_VwapBids_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const Debugger_step_VwapBids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_step_VwapBids_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_step_VwapBids_pargs {
 public:


  virtual ~Debugger_step_VwapBids_pargs() throw() {}

  const ThriftVwapTuple* input;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_step_VwapBids_result {
 public:

  Debugger_step_VwapBids_result() {
  }

  virtual ~Debugger_step_VwapBids_result() throw() {}


  bool operator == (const Debugger_step_VwapBids_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_step_VwapBids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_step_VwapBids_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_step_VwapBids_presult {
 public:


  virtual ~Debugger_step_VwapBids_presult() throw() {}


  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_stepn_VwapBids_args {
 public:

  Debugger_stepn_VwapBids_args() : n(0) {
  }

  virtual ~Debugger_stepn_VwapBids_args() throw() {}

  int32_t n;

  struct __isset {
    __isset() : n(false) {}
    bool n;
  } __isset;

  bool operator == (const Debugger_stepn_VwapBids_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const Debugger_stepn_VwapBids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_stepn_VwapBids_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_stepn_VwapBids_pargs {
 public:


  virtual ~Debugger_stepn_VwapBids_pargs() throw() {}

  const int32_t* n;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_stepn_VwapBids_result {
 public:

  Debugger_stepn_VwapBids_result() {
  }

  virtual ~Debugger_stepn_VwapBids_result() throw() {}


  bool operator == (const Debugger_stepn_VwapBids_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_stepn_VwapBids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_stepn_VwapBids_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_stepn_VwapBids_presult {
 public:


  virtual ~Debugger_stepn_VwapBids_presult() throw() {}


  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_var2_args {
 public:

  Debugger_get_var2_args() {
  }

  virtual ~Debugger_get_var2_args() throw() {}


  bool operator == (const Debugger_get_var2_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_var2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_var2_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_var2_pargs {
 public:


  virtual ~Debugger_get_var2_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_var2_result {
 public:

  Debugger_get_var2_result() : success(0) {
  }

  virtual ~Debugger_get_var2_result() throw() {}

  int32_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_var2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_var2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_var2_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_var2_presult {
 public:


  virtual ~Debugger_get_var2_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_map0_args {
 public:

  Debugger_get_map0_args() {
  }

  virtual ~Debugger_get_map0_args() throw() {}


  bool operator == (const Debugger_get_map0_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_map0_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map0_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map0_pargs {
 public:


  virtual ~Debugger_get_map0_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map0_result {
 public:

  Debugger_get_map0_result() {
  }

  virtual ~Debugger_get_map0_result() throw() {}

  std::map<int32_t, int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_map0_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_map0_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map0_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map0_presult {
 public:


  virtual ~Debugger_get_map0_presult() throw() {}

  std::map<int32_t, int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_dom0_args {
 public:

  Debugger_get_dom0_args() {
  }

  virtual ~Debugger_get_dom0_args() throw() {}


  bool operator == (const Debugger_get_dom0_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_dom0_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_dom0_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_dom0_pargs {
 public:


  virtual ~Debugger_get_dom0_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_dom0_result {
 public:

  Debugger_get_dom0_result() {
  }

  virtual ~Debugger_get_dom0_result() throw() {}

  std::set<int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_dom0_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_dom0_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_dom0_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_dom0_presult {
 public:


  virtual ~Debugger_get_dom0_presult() throw() {}

  std::set<int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_B_args {
 public:

  Debugger_get_B_args() {
  }

  virtual ~Debugger_get_B_args() throw() {}


  bool operator == (const Debugger_get_B_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_B_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_B_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_B_pargs {
 public:


  virtual ~Debugger_get_B_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_B_result {
 public:

  Debugger_get_B_result() {
  }

  virtual ~Debugger_get_B_result() throw() {}

  std::vector<B_elem>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_B_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_B_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_B_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_B_presult {
 public:


  virtual ~Debugger_get_B_presult() throw() {}

  std::vector<B_elem> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_map1_args {
 public:

  Debugger_get_map1_args() {
  }

  virtual ~Debugger_get_map1_args() throw() {}


  bool operator == (const Debugger_get_map1_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_map1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map1_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map1_pargs {
 public:


  virtual ~Debugger_get_map1_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map1_result {
 public:

  Debugger_get_map1_result() {
  }

  virtual ~Debugger_get_map1_result() throw() {}

  std::map<int32_t, int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_map1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_map1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map1_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map1_presult {
 public:


  virtual ~Debugger_get_map1_presult() throw() {}

  std::map<int32_t, int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_dom1_args {
 public:

  Debugger_get_dom1_args() {
  }

  virtual ~Debugger_get_dom1_args() throw() {}


  bool operator == (const Debugger_get_dom1_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_dom1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_dom1_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_dom1_pargs {
 public:


  virtual ~Debugger_get_dom1_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_dom1_result {
 public:

  Debugger_get_dom1_result() {
  }

  virtual ~Debugger_get_dom1_result() throw() {}

  std::set<int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_dom1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_dom1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_dom1_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_dom1_presult {
 public:


  virtual ~Debugger_get_dom1_presult() throw() {}

  std::set<int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_map2_args {
 public:

  Debugger_get_map2_args() {
  }

  virtual ~Debugger_get_map2_args() throw() {}


  bool operator == (const Debugger_get_map2_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_map2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map2_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map2_pargs {
 public:


  virtual ~Debugger_get_map2_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map2_result {
 public:

  Debugger_get_map2_result() {
  }

  virtual ~Debugger_get_map2_result() throw() {}

  std::map<int32_t, int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_map2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_map2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map2_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map2_presult {
 public:


  virtual ~Debugger_get_map2_presult() throw() {}

  std::map<int32_t, int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Debugger_get_map3_args {
 public:

  Debugger_get_map3_args() {
  }

  virtual ~Debugger_get_map3_args() throw() {}


  bool operator == (const Debugger_get_map3_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Debugger_get_map3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map3_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map3_pargs {
 public:


  virtual ~Debugger_get_map3_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map3_result {
 public:

  Debugger_get_map3_result() {
  }

  virtual ~Debugger_get_map3_result() throw() {}

  std::map<int32_t, int32_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Debugger_get_map3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Debugger_get_map3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debugger_get_map3_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Debugger_get_map3_presult {
 public:


  virtual ~Debugger_get_map3_presult() throw() {}

  std::map<int32_t, int32_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class DebuggerClient : virtual public DebuggerIf {
 public:
  DebuggerClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DebuggerClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void step_VwapBids(const ThriftVwapTuple& input);
  void send_step_VwapBids(const ThriftVwapTuple& input);
  void recv_step_VwapBids();
  void stepn_VwapBids(const int32_t n);
  void send_stepn_VwapBids(const int32_t n);
  void recv_stepn_VwapBids();
  int32_t get_var2();
  void send_get_var2();
  int32_t recv_get_var2();
  void get_map0(std::map<int32_t, int32_t> & _return);
  void send_get_map0();
  void recv_get_map0(std::map<int32_t, int32_t> & _return);
  void get_dom0(std::set<int32_t> & _return);
  void send_get_dom0();
  void recv_get_dom0(std::set<int32_t> & _return);
  void get_B(std::vector<B_elem> & _return);
  void send_get_B();
  void recv_get_B(std::vector<B_elem> & _return);
  void get_map1(std::map<int32_t, int32_t> & _return);
  void send_get_map1();
  void recv_get_map1(std::map<int32_t, int32_t> & _return);
  void get_dom1(std::set<int32_t> & _return);
  void send_get_dom1();
  void recv_get_dom1(std::set<int32_t> & _return);
  void get_map2(std::map<int32_t, int32_t> & _return);
  void send_get_map2();
  void recv_get_map2(std::map<int32_t, int32_t> & _return);
  void get_map3(std::map<int32_t, int32_t> & _return);
  void send_get_map3();
  void recv_get_map3(std::map<int32_t, int32_t> & _return);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class DebuggerProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<DebuggerIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (DebuggerProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_step_VwapBids(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_stepn_VwapBids(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_var2(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_map0(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_dom0(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_B(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_map1(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_dom1(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_map2(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_map3(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  DebuggerProcessor(boost::shared_ptr<DebuggerIf> iface) :
    iface_(iface) {
    processMap_["step_VwapBids"] = &DebuggerProcessor::process_step_VwapBids;
    processMap_["stepn_VwapBids"] = &DebuggerProcessor::process_stepn_VwapBids;
    processMap_["get_var2"] = &DebuggerProcessor::process_get_var2;
    processMap_["get_map0"] = &DebuggerProcessor::process_get_map0;
    processMap_["get_dom0"] = &DebuggerProcessor::process_get_dom0;
    processMap_["get_B"] = &DebuggerProcessor::process_get_B;
    processMap_["get_map1"] = &DebuggerProcessor::process_get_map1;
    processMap_["get_dom1"] = &DebuggerProcessor::process_get_dom1;
    processMap_["get_map2"] = &DebuggerProcessor::process_get_map2;
    processMap_["get_map3"] = &DebuggerProcessor::process_get_map3;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~DebuggerProcessor() {}
};

class DebuggerMultiface : virtual public DebuggerIf {
 public:
  DebuggerMultiface(std::vector<boost::shared_ptr<DebuggerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DebuggerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DebuggerIf> > ifaces_;
  DebuggerMultiface() {}
  void add(boost::shared_ptr<DebuggerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void step_VwapBids(const ThriftVwapTuple& input) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->step_VwapBids(input);
    }
  }

  void stepn_VwapBids(const int32_t n) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->stepn_VwapBids(n);
    }
  }

  int32_t get_var2() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->get_var2();
      } else {
        ifaces_[i]->get_var2();
      }
    }
  }

  void get_map0(std::map<int32_t, int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_map0(_return);
        return;
      } else {
        ifaces_[i]->get_map0(_return);
      }
    }
  }

  void get_dom0(std::set<int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_dom0(_return);
        return;
      } else {
        ifaces_[i]->get_dom0(_return);
      }
    }
  }

  void get_B(std::vector<B_elem> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_B(_return);
        return;
      } else {
        ifaces_[i]->get_B(_return);
      }
    }
  }

  void get_map1(std::map<int32_t, int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_map1(_return);
        return;
      } else {
        ifaces_[i]->get_map1(_return);
      }
    }
  }

  void get_dom1(std::set<int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_dom1(_return);
        return;
      } else {
        ifaces_[i]->get_dom1(_return);
      }
    }
  }

  void get_map2(std::map<int32_t, int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_map2(_return);
        return;
      } else {
        ifaces_[i]->get_map2(_return);
      }
    }
  }

  void get_map3(std::map<int32_t, int32_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_map3(_return);
        return;
      } else {
        ifaces_[i]->get_map3(_return);
      }
    }
  }

};

}} // namespace

#endif
