/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class SsbTuple implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SsbTuple");
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
  private static final TField LI_FIELD_DESC = new TField("li", TType.STRUCT, (short)2);
  private static final TField ORD_FIELD_DESC = new TField("ord", TType.STRUCT, (short)3);
  private static final TField PT_FIELD_DESC = new TField("pt", TType.STRUCT, (short)4);
  private static final TField CUST_FIELD_DESC = new TField("cust", TType.STRUCT, (short)5);
  private static final TField SUPP_FIELD_DESC = new TField("supp", TType.STRUCT, (short)6);
  private static final TField NT_FIELD_DESC = new TField("nt", TType.STRUCT, (short)7);
  private static final TField RG_FIELD_DESC = new TField("rg", TType.STRUCT, (short)8);

  public int type;
  public static final int TYPE = 1;
  public Lineitem li;
  public static final int LI = 2;
  public Order ord;
  public static final int ORD = 3;
  public Part pt;
  public static final int PT = 4;
  public Customer cust;
  public static final int CUST = 5;
  public Supplier supp;
  public static final int SUPP = 6;
  public Nation nt;
  public static final int NT = 7;
  public Region rg;
  public static final int RG = 8;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean type = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(LI, new FieldMetaData("li", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Lineitem.class)));
    put(ORD, new FieldMetaData("ord", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Order.class)));
    put(PT, new FieldMetaData("pt", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Part.class)));
    put(CUST, new FieldMetaData("cust", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Customer.class)));
    put(SUPP, new FieldMetaData("supp", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Supplier.class)));
    put(NT, new FieldMetaData("nt", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Nation.class)));
    put(RG, new FieldMetaData("rg", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Region.class)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(SsbTuple.class, metaDataMap);
  }

  public SsbTuple() {
  }

  public SsbTuple(
    int type,
    Lineitem li,
    Order ord,
    Part pt,
    Customer cust,
    Supplier supp,
    Nation nt,
    Region rg)
  {
    this();
    this.type = type;
    this.__isset.type = true;
    this.li = li;
    this.ord = ord;
    this.pt = pt;
    this.cust = cust;
    this.supp = supp;
    this.nt = nt;
    this.rg = rg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SsbTuple(SsbTuple other) {
    __isset.type = other.__isset.type;
    this.type = other.type;
    if (other.isSetLi()) {
      this.li = new Lineitem(other.li);
    }
    if (other.isSetOrd()) {
      this.ord = new Order(other.ord);
    }
    if (other.isSetPt()) {
      this.pt = new Part(other.pt);
    }
    if (other.isSetCust()) {
      this.cust = new Customer(other.cust);
    }
    if (other.isSetSupp()) {
      this.supp = new Supplier(other.supp);
    }
    if (other.isSetNt()) {
      this.nt = new Nation(other.nt);
    }
    if (other.isSetRg()) {
      this.rg = new Region(other.rg);
    }
  }

  @Override
  public SsbTuple clone() {
    return new SsbTuple(this);
  }

  public int getType() {
    return this.type;
  }

  public void setType(int type) {
    this.type = type;
    this.__isset.type = true;
  }

  public void unsetType() {
    this.__isset.type = false;
  }

  // Returns true if field type is set (has been asigned a value) and false otherwise
  public boolean isSetType() {
    return this.__isset.type;
  }

  public void setTypeIsSet(boolean value) {
    this.__isset.type = value;
  }

  public Lineitem getLi() {
    return this.li;
  }

  public void setLi(Lineitem li) {
    this.li = li;
  }

  public void unsetLi() {
    this.li = null;
  }

  // Returns true if field li is set (has been asigned a value) and false otherwise
  public boolean isSetLi() {
    return this.li != null;
  }

  public void setLiIsSet(boolean value) {
    if (!value) {
      this.li = null;
    }
  }

  public Order getOrd() {
    return this.ord;
  }

  public void setOrd(Order ord) {
    this.ord = ord;
  }

  public void unsetOrd() {
    this.ord = null;
  }

  // Returns true if field ord is set (has been asigned a value) and false otherwise
  public boolean isSetOrd() {
    return this.ord != null;
  }

  public void setOrdIsSet(boolean value) {
    if (!value) {
      this.ord = null;
    }
  }

  public Part getPt() {
    return this.pt;
  }

  public void setPt(Part pt) {
    this.pt = pt;
  }

  public void unsetPt() {
    this.pt = null;
  }

  // Returns true if field pt is set (has been asigned a value) and false otherwise
  public boolean isSetPt() {
    return this.pt != null;
  }

  public void setPtIsSet(boolean value) {
    if (!value) {
      this.pt = null;
    }
  }

  public Customer getCust() {
    return this.cust;
  }

  public void setCust(Customer cust) {
    this.cust = cust;
  }

  public void unsetCust() {
    this.cust = null;
  }

  // Returns true if field cust is set (has been asigned a value) and false otherwise
  public boolean isSetCust() {
    return this.cust != null;
  }

  public void setCustIsSet(boolean value) {
    if (!value) {
      this.cust = null;
    }
  }

  public Supplier getSupp() {
    return this.supp;
  }

  public void setSupp(Supplier supp) {
    this.supp = supp;
  }

  public void unsetSupp() {
    this.supp = null;
  }

  // Returns true if field supp is set (has been asigned a value) and false otherwise
  public boolean isSetSupp() {
    return this.supp != null;
  }

  public void setSuppIsSet(boolean value) {
    if (!value) {
      this.supp = null;
    }
  }

  public Nation getNt() {
    return this.nt;
  }

  public void setNt(Nation nt) {
    this.nt = nt;
  }

  public void unsetNt() {
    this.nt = null;
  }

  // Returns true if field nt is set (has been asigned a value) and false otherwise
  public boolean isSetNt() {
    return this.nt != null;
  }

  public void setNtIsSet(boolean value) {
    if (!value) {
      this.nt = null;
    }
  }

  public Region getRg() {
    return this.rg;
  }

  public void setRg(Region rg) {
    this.rg = rg;
  }

  public void unsetRg() {
    this.rg = null;
  }

  // Returns true if field rg is set (has been asigned a value) and false otherwise
  public boolean isSetRg() {
    return this.rg != null;
  }

  public void setRgIsSet(boolean value) {
    if (!value) {
      this.rg = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case LI:
      if (value == null) {
        unsetLi();
      } else {
        setLi((Lineitem)value);
      }
      break;

    case ORD:
      if (value == null) {
        unsetOrd();
      } else {
        setOrd((Order)value);
      }
      break;

    case PT:
      if (value == null) {
        unsetPt();
      } else {
        setPt((Part)value);
      }
      break;

    case CUST:
      if (value == null) {
        unsetCust();
      } else {
        setCust((Customer)value);
      }
      break;

    case SUPP:
      if (value == null) {
        unsetSupp();
      } else {
        setSupp((Supplier)value);
      }
      break;

    case NT:
      if (value == null) {
        unsetNt();
      } else {
        setNt((Nation)value);
      }
      break;

    case RG:
      if (value == null) {
        unsetRg();
      } else {
        setRg((Region)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TYPE:
      return new Integer(getType());

    case LI:
      return getLi();

    case ORD:
      return getOrd();

    case PT:
      return getPt();

    case CUST:
      return getCust();

    case SUPP:
      return getSupp();

    case NT:
      return getNt();

    case RG:
      return getRg();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TYPE:
      return isSetType();
    case LI:
      return isSetLi();
    case ORD:
      return isSetOrd();
    case PT:
      return isSetPt();
    case CUST:
      return isSetCust();
    case SUPP:
      return isSetSupp();
    case NT:
      return isSetNt();
    case RG:
      return isSetRg();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SsbTuple)
      return this.equals((SsbTuple)that);
    return false;
  }

  public boolean equals(SsbTuple that) {
    if (that == null)
      return false;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_li = true && this.isSetLi();
    boolean that_present_li = true && that.isSetLi();
    if (this_present_li || that_present_li) {
      if (!(this_present_li && that_present_li))
        return false;
      if (!this.li.equals(that.li))
        return false;
    }

    boolean this_present_ord = true && this.isSetOrd();
    boolean that_present_ord = true && that.isSetOrd();
    if (this_present_ord || that_present_ord) {
      if (!(this_present_ord && that_present_ord))
        return false;
      if (!this.ord.equals(that.ord))
        return false;
    }

    boolean this_present_pt = true && this.isSetPt();
    boolean that_present_pt = true && that.isSetPt();
    if (this_present_pt || that_present_pt) {
      if (!(this_present_pt && that_present_pt))
        return false;
      if (!this.pt.equals(that.pt))
        return false;
    }

    boolean this_present_cust = true && this.isSetCust();
    boolean that_present_cust = true && that.isSetCust();
    if (this_present_cust || that_present_cust) {
      if (!(this_present_cust && that_present_cust))
        return false;
      if (!this.cust.equals(that.cust))
        return false;
    }

    boolean this_present_supp = true && this.isSetSupp();
    boolean that_present_supp = true && that.isSetSupp();
    if (this_present_supp || that_present_supp) {
      if (!(this_present_supp && that_present_supp))
        return false;
      if (!this.supp.equals(that.supp))
        return false;
    }

    boolean this_present_nt = true && this.isSetNt();
    boolean that_present_nt = true && that.isSetNt();
    if (this_present_nt || that_present_nt) {
      if (!(this_present_nt && that_present_nt))
        return false;
      if (!this.nt.equals(that.nt))
        return false;
    }

    boolean this_present_rg = true && this.isSetRg();
    boolean that_present_rg = true && that.isSetRg();
    if (this_present_rg || that_present_rg) {
      if (!(this_present_rg && that_present_rg))
        return false;
      if (!this.rg.equals(that.rg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset.type = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LI:
          if (field.type == TType.STRUCT) {
            this.li = new Lineitem();
            this.li.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORD:
          if (field.type == TType.STRUCT) {
            this.ord = new Order();
            this.ord.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PT:
          if (field.type == TType.STRUCT) {
            this.pt = new Part();
            this.pt.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CUST:
          if (field.type == TType.STRUCT) {
            this.cust = new Customer();
            this.cust.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUPP:
          if (field.type == TType.STRUCT) {
            this.supp = new Supplier();
            this.supp.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NT:
          if (field.type == TType.STRUCT) {
            this.nt = new Nation();
            this.nt.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RG:
          if (field.type == TType.STRUCT) {
            this.rg = new Region();
            this.rg.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.li != null) {
      if (isSetLi()) {
        oprot.writeFieldBegin(LI_FIELD_DESC);
        this.li.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.ord != null) {
      if (isSetOrd()) {
        oprot.writeFieldBegin(ORD_FIELD_DESC);
        this.ord.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.pt != null) {
      if (isSetPt()) {
        oprot.writeFieldBegin(PT_FIELD_DESC);
        this.pt.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.cust != null) {
      if (isSetCust()) {
        oprot.writeFieldBegin(CUST_FIELD_DESC);
        this.cust.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.supp != null) {
      if (isSetSupp()) {
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        this.supp.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.nt != null) {
      if (isSetNt()) {
        oprot.writeFieldBegin(NT_FIELD_DESC);
        this.nt.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.rg != null) {
      if (isSetRg()) {
        oprot.writeFieldBegin(RG_FIELD_DESC);
        this.rg.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SsbTuple(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (isSetLi()) {
      if (!first) sb.append(", ");
      sb.append("li:");
      if (this.li == null) {
        sb.append("null");
      } else {
        sb.append(this.li);
      }
      first = false;
    }
    if (isSetOrd()) {
      if (!first) sb.append(", ");
      sb.append("ord:");
      if (this.ord == null) {
        sb.append("null");
      } else {
        sb.append(this.ord);
      }
      first = false;
    }
    if (isSetPt()) {
      if (!first) sb.append(", ");
      sb.append("pt:");
      if (this.pt == null) {
        sb.append("null");
      } else {
        sb.append(this.pt);
      }
      first = false;
    }
    if (isSetCust()) {
      if (!first) sb.append(", ");
      sb.append("cust:");
      if (this.cust == null) {
        sb.append("null");
      } else {
        sb.append(this.cust);
      }
      first = false;
    }
    if (isSetSupp()) {
      if (!first) sb.append(", ");
      sb.append("supp:");
      if (this.supp == null) {
        sb.append("null");
      } else {
        sb.append(this.supp);
      }
      first = false;
    }
    if (isSetNt()) {
      if (!first) sb.append(", ");
      sb.append("nt:");
      if (this.nt == null) {
        sb.append("null");
      } else {
        sb.append(this.nt);
      }
      first = false;
    }
    if (isSetRg()) {
      if (!first) sb.append(", ");
      sb.append("rg:");
      if (this.rg == null) {
        sb.append("null");
      } else {
        sb.append(this.rg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

