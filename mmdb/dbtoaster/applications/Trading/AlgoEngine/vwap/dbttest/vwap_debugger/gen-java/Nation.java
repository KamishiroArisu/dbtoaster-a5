/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Nation implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Nation");
  private static final TField NATIONKEY_FIELD_DESC = new TField("nationkey", TType.I64, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField REGIONKEY_FIELD_DESC = new TField("regionkey", TType.I64, (short)3);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)4);

  public long nationkey;
  public static final int NATIONKEY = 1;
  public String name;
  public static final int NAME = 2;
  public long regionkey;
  public static final int REGIONKEY = 3;
  public String comment;
  public static final int COMMENT = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean nationkey = false;
    public boolean regionkey = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(NATIONKEY, new FieldMetaData("nationkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(REGIONKEY, new FieldMetaData("regionkey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(COMMENT, new FieldMetaData("comment", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Nation.class, metaDataMap);
  }

  public Nation() {
  }

  public Nation(
    long nationkey,
    String name,
    long regionkey,
    String comment)
  {
    this();
    this.nationkey = nationkey;
    this.__isset.nationkey = true;
    this.name = name;
    this.regionkey = regionkey;
    this.__isset.regionkey = true;
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Nation(Nation other) {
    __isset.nationkey = other.__isset.nationkey;
    this.nationkey = other.nationkey;
    if (other.isSetName()) {
      this.name = other.name;
    }
    __isset.regionkey = other.__isset.regionkey;
    this.regionkey = other.regionkey;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  @Override
  public Nation clone() {
    return new Nation(this);
  }

  public long getNationkey() {
    return this.nationkey;
  }

  public void setNationkey(long nationkey) {
    this.nationkey = nationkey;
    this.__isset.nationkey = true;
  }

  public void unsetNationkey() {
    this.__isset.nationkey = false;
  }

  // Returns true if field nationkey is set (has been asigned a value) and false otherwise
  public boolean isSetNationkey() {
    return this.__isset.nationkey;
  }

  public void setNationkeyIsSet(boolean value) {
    this.__isset.nationkey = value;
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  // Returns true if field name is set (has been asigned a value) and false otherwise
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getRegionkey() {
    return this.regionkey;
  }

  public void setRegionkey(long regionkey) {
    this.regionkey = regionkey;
    this.__isset.regionkey = true;
  }

  public void unsetRegionkey() {
    this.__isset.regionkey = false;
  }

  // Returns true if field regionkey is set (has been asigned a value) and false otherwise
  public boolean isSetRegionkey() {
    return this.__isset.regionkey;
  }

  public void setRegionkeyIsSet(boolean value) {
    this.__isset.regionkey = value;
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  // Returns true if field comment is set (has been asigned a value) and false otherwise
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case NATIONKEY:
      if (value == null) {
        unsetNationkey();
      } else {
        setNationkey((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case REGIONKEY:
      if (value == null) {
        unsetRegionkey();
      } else {
        setRegionkey((Long)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case NATIONKEY:
      return new Long(getNationkey());

    case NAME:
      return getName();

    case REGIONKEY:
      return new Long(getRegionkey());

    case COMMENT:
      return getComment();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case NATIONKEY:
      return isSetNationkey();
    case NAME:
      return isSetName();
    case REGIONKEY:
      return isSetRegionkey();
    case COMMENT:
      return isSetComment();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Nation)
      return this.equals((Nation)that);
    return false;
  }

  public boolean equals(Nation that) {
    if (that == null)
      return false;

    boolean this_present_nationkey = true;
    boolean that_present_nationkey = true;
    if (this_present_nationkey || that_present_nationkey) {
      if (!(this_present_nationkey && that_present_nationkey))
        return false;
      if (this.nationkey != that.nationkey)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_regionkey = true;
    boolean that_present_regionkey = true;
    if (this_present_regionkey || that_present_regionkey) {
      if (!(this_present_regionkey && that_present_regionkey))
        return false;
      if (this.regionkey != that.regionkey)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case NATIONKEY:
          if (field.type == TType.I64) {
            this.nationkey = iprot.readI64();
            this.__isset.nationkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REGIONKEY:
          if (field.type == TType.I64) {
            this.regionkey = iprot.readI64();
            this.__isset.regionkey = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NATIONKEY_FIELD_DESC);
    oprot.writeI64(this.nationkey);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REGIONKEY_FIELD_DESC);
    oprot.writeI64(this.regionkey);
    oprot.writeFieldEnd();
    if (this.comment != null) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Nation(");
    boolean first = true;

    sb.append("nationkey:");
    sb.append(this.nationkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionkey:");
    sb.append(this.regionkey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

