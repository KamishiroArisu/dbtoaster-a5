// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#ifndef GUI_DATA_SERVER_HANDLER
#define GUI_DATA_SERVER_HANDLER

#include "GuiData.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

#include "GUICommunication_types.h"

#include "DataCollection.h"
#include "OrderManager.h"

/*
 * Server needed for data output to GUI
 * Auto generated by Thrift
 */ 

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

using namespace DBToaster::DemoAlgEngine;
using namespace DBToaster::GuiData;

class GuiDataHandler : virtual public GuiDataIf {
public:
    
    GuiDataHandler(DataCollection * d, OrderManager * m) :
     data(d),
     manager(m)
    {

    }

    double getAsksDiff() 
    {    
        double v=data->getAsksDiff();
        return v;  
    }

    double getBidsDiff() 
    {   
        double v=data->getBidsDiff();
        return v;
    }

    double getAsksTime() 
    {
        double v=data->getAsksTime();
        return v;
    }

    double getBidsTime() 
    {
        double v=data->getBidsTime();
        return v;
    }

    double getPrice() 
    {
        double p=data->getCurrentPrice();
        return p;
    }

    double getMeanPrice() 
    {
        double p=data->getMeanPrice();
        return p;
    }

    double getVariance() 
    {
        double v=data->getSampleVariance();
        return v;
    }

    int32_t getAmountStocks()
    {
        int32_t m=(int32_t)manager->getCurrentMoney();
        return m;
    }

    int32_t getMoney() 
    {
        int32_t s=(int32_t)manager->getCurrentShares();
        return s;
    }

private:

    DataCollection * data;
    OrderManager   * manager;

};

/*
int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<GuiDataHandler> handler(new GuiDataHandler());
    shared_ptr<TProcessor> processor(new GuiDataProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}
*/

#endif

