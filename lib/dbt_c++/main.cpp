/**
 * In order to compile this file one would have to include a header containing
 * the definition of "dbtoaster::Program" and "dbtoaster::Program::snapshot_t"
 * as generated by the dbtoaster C++ code generator. Using the "-c" dbtoaster
 * command line option the generated header file is automatically included and
 * compiled against this file.
 */

/**
 * Determines whether "-async" was specified as a command line argument.
 *
 * @param argc
 * @param argv
 * @return true if "-async" is one of the command line arguments
 */
bool async_mode(int argc, char* argv[])
{
    for(int i = 1; i < argc; i++)
        if( !strcmp(argv[1],"-async") )
            return true;
    return false;
}

/**
 * Main function that executes the sql program corresponding to the header file
 * included. If "-async" is among the command line arguments then the execution
 * is performed asynchronous in a seperate thread, otherwise it is performed in
 * the same thread. If performed in a separate thread and while not finished it
 * continuously gets snapshots of the results and prints them in xml format. At
 * the end of the execution the final results are also printed.
 *
 * @param argc
 * @param argv
 * @return
 */
int main(int argc, char* argv[]) {
    bool async = async_mode(argc,argv);
    boost::archive::xml_oarchive oa(cout, 0);

    dbtoaster::Program p;
    dbtoaster::Program::snapshot_t snap;

    cout << "Initializing program:" << endl;
    p.init();

    cout << "Running program:" << endl;
    p.run( async );
    while( !p.is_finished() )
    {
       snap = p.get_snapshot();
       oa<<BOOST_SERIALIZATION_NVP_OF_PTR(snap);
    }

    cout << "Printing final result:" << endl;
    snap = p.get_snapshot();
    oa<<BOOST_SERIALIZATION_NVP_OF_PTR(snap);

    return 0;
}
