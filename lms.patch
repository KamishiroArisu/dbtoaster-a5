Index: dbtoaster/compiler/alpha5/lib/dbt_c++/makefile
===================================================================
--- dbtoaster/compiler/alpha5/lib/dbt_c++/makefile	(revision 3174)
+++ dbtoaster/compiler/alpha5/lib/dbt_c++/makefile	(working copy)
@@ -43,7 +43,7 @@
 	
 $(OBJ_FILES) : %.o : %.cpp $(HDR_FILES)
 	@echo Compiling $<
-	@$(G++) $(patsubst %,-I %,$(CPP_HDR_PATH)) -O3 -c $<
+	@$(G++) $(CPP_FLAGS) $(patsubst %,-I %,$(CPP_HDR_PATH)) -O3 -c $<
 
 clean: 
 	rm -f *.o $(LIB_OBJ)
Index: dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/ImplicitConversions.scala
===================================================================
--- dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/ImplicitConversions.scala	(revision 3174)
+++ dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/ImplicitConversions.scala	(working copy)
@@ -5,5 +5,7 @@
     */
   object ImplicitConversions {
     implicit def boolToLong(b: Boolean): Long = if(b) 1L else 0L
+    implicit def longToDouble(l: Long): Double = l.toDouble
+   	implicit def doubleToLong(l: Double): Long = l.toLong
   }
 } 
Index: dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/K3Collection.scala
===================================================================
--- dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/K3Collection.scala	(revision 3174)
+++ dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/K3Collection.scala	(working copy)
@@ -192,6 +192,11 @@
        * @return The matching elements
        */
       def slice[PK](keyPart: PK): Map[K, V]
+
+      /**
+       * Removes all bindings from the map.
+       */
+      def clear(): Unit
     }
 
     /**
@@ -262,7 +267,14 @@
           case None => Map[K, V]()
         }
       }
+
+      /**
+       * Removes all bindings from the map.
+       */
+      def clear(): Unit = {
+        index.clear
     }
+    }
 
     /**
      * Implements a persistent collection with secondary indices sndIdx
@@ -274,6 +286,20 @@
         sndIdx: Option[Map[String, Index[K, V]]]) extends K3Collection[K, V] {
       var lastSize = 0
 
+      def fold[Y](init: Y, fn: (K,V) => Y => Y): Y = {
+        fold(init, fn.tupled)
+      }
+      
+      def foldLong(init: Long, fn: (K,V) => Long => Long): Long = {
+        foldLong(init, fn.tupled)
+      }
+      
+      def map[K2, V2](f: (K,V) => (K2, V2)): K3IntermediateCollection[K2, V2] = {
+        map(f.tupled)
+      }
+
+      def foreach(f: (K,V) => Unit): Unit = foreach(f.tupled)
+
       def map[K2, V2](f: Tuple2[K, V] => 
                          Tuple2[K2, V2]): K3IntermediateCollection[K2, V2] = {
 		// IMPORTANT: we need the toList here because the map function can
@@ -331,8 +357,10 @@
         val strIdx = idx.foldLeft("")(
             { case (agg, nb) => agg + (if (agg != "") "_" else "") + nb })
         sndIdx match {
-          case Some(x) => new K3IntermediateCollection(x.get(strIdx).
-                                get.slice(keyPart))
+          case Some(x) => new K3IntermediateCollection(x.get(strIdx) match {
+            case Some(y) => y.slice(keyPart)
+            case None => (List[(K,V)]()).toIterable
+          })
           case None => throw new IllegalArgumentException
         }
       }
@@ -387,7 +415,18 @@
         println(name + ": " + currSize + "(" + (currSize - lastSize) + ")")
         lastSize = currSize
       }
+
+      /**
+       * Removes all bindings from the map.
+       */
+      def clear(): Unit = {
+        elems.clear
+        sndIdx match {
+          case Some(idx) => idx foreach { case (k, v) => v.clear }
+          case None =>
     }
+      }
+    }
 
     /**
      * Implements a persistent collection with in and out keys
@@ -430,7 +469,22 @@
           case None => ()
         }
       }
+
+      /**
+       * Removes all bindings from the map.
+       */
+      override def clear(): Unit = {
+        felems.foreach {
+          x => x._2.clear
     }
+        fsndIdx match {
+          case Some(idxMap) => idxMap foreach {
+            x => x._2.clear
+          }
+          case None =>
+        }
+      }
+    }
 
     /**
      * Implementation of an intermediate collection
@@ -442,10 +496,24 @@
      */
     class K3IntermediateCollection[K, V](elems: Iterable[Tuple2[K, V]]) 
         extends K3Collection[K, V] {
+      def fold[Y](init: Y, fn: (K,V) => Y => Y): Y = {
+        fold(init, fn.tupled)
+      }
+      
+      def foldLong(init: Long, fn: (K,V) => Long => Long): Long = {
+        foldLong(init, fn.tupled)
+      }
+      
+      def map[K2, V2](f: (K,V) => (K2, V2)): K3IntermediateCollection[K2, V2] = {
+        map(f.tupled)
+      }
+
       def map[K2, V2](f: Tuple2[K, V] => Tuple2[K2, V2]):
                      K3IntermediateCollection[K2, V2] =
         new K3IntermediateCollection(elems.map(f))
 
+      def foreach(f: (K,V) => Unit): Unit = foreach(f.tupled)
+
       def contains(key: K): Boolean = {
         (elems.find { case (k, v) => k == key }) != None
       }
Index: dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/Tuples.scala
===================================================================
--- dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/Tuples.scala	(revision 0)
+++ dbtoaster/compiler/alpha5/lib/dbt_scala/src/org/dbtoaster/dbtoasterlib/Tuples.scala	(working copy)
@@ -0,0 +1,712 @@
+package scala {
+
+    class Tuple23[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23))
+  
+    object Tuple23 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23) = 
+        new Tuple23(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23)
+    }
+    
+
+    class Tuple24[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24))
+  
+    object Tuple24 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24) = 
+        new Tuple24(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24)
+    }
+    
+
+    class Tuple25[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25))
+  
+    object Tuple25 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25) = 
+        new Tuple25(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25)
+    }
+    
+
+    class Tuple26[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26))
+  
+    object Tuple26 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26) = 
+        new Tuple26(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26)
+    }
+    
+
+    class Tuple27[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27))
+  
+    object Tuple27 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27) = 
+        new Tuple27(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27)
+    }
+    
+
+    class Tuple28[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28))
+  
+    object Tuple28 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28) = 
+        new Tuple28(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28)
+    }
+    
+
+    class Tuple29[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29))
+  
+    object Tuple29 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29) = 
+        new Tuple29(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29)
+    }
+    
+
+    class Tuple30[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30))
+  
+    object Tuple30 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30) = 
+        new Tuple30(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30)
+    }
+    
+
+    class Tuple31[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31))
+  
+    object Tuple31 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31) = 
+        new Tuple31(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31)
+    }
+    
+
+    class Tuple32[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32))
+  
+    object Tuple32 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32) = 
+        new Tuple32(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32)
+    }
+    
+
+    class Tuple33[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33))
+  
+    object Tuple33 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33) = 
+        new Tuple33(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33)
+    }
+    
+
+    class Tuple34[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34))
+  
+    object Tuple34 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34) = 
+        new Tuple34(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34)
+    }
+    
+
+    class Tuple35[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35))
+  
+    object Tuple35 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35) = 
+        new Tuple35(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35)
+    }
+    
+
+    class Tuple36[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36))
+  
+    object Tuple36 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36) = 
+        new Tuple36(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36)
+    }
+    
+
+    class Tuple37[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37))
+  
+    object Tuple37 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37) = 
+        new Tuple37(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37)
+    }
+    
+
+    class Tuple38[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38))
+  
+    object Tuple38 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38) = 
+        new Tuple38(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38)
+    }
+    
+
+    class Tuple39[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39))
+  
+    object Tuple39 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39) = 
+        new Tuple39(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39)
+    }
+    
+
+    class Tuple40[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40))
+  
+    object Tuple40 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40) = 
+        new Tuple40(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40)
+    }
+    
+
+    class Tuple41[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41))
+  
+    object Tuple41 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41) = 
+        new Tuple41(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41)
+    }
+    
+
+    class Tuple42[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42))
+  
+    object Tuple42 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42) = 
+        new Tuple42(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42)
+    }
+    
+
+    class Tuple43[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43))
+  
+    object Tuple43 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43) = 
+        new Tuple43(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43)
+    }
+    
+
+    class Tuple44[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44))
+  
+    object Tuple44 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44) = 
+        new Tuple44(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44)
+    }
+    
+
+    class Tuple45[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45))
+  
+    object Tuple45 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45) = 
+        new Tuple45(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45)
+    }
+    
+
+    class Tuple46[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46))
+  
+    object Tuple46 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46) = 
+        new Tuple46(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46)
+    }
+    
+
+    class Tuple47[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47))
+  
+    object Tuple47 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47) = 
+        new Tuple47(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47)
+    }
+    
+
+    class Tuple48[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48))
+  
+    object Tuple48 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48) = 
+        new Tuple48(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48)
+    }
+    
+
+    class Tuple49[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49))
+  
+    object Tuple49 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49) = 
+        new Tuple49(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49)
+    }
+    
+
+    class Tuple50[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50))
+  
+    object Tuple50 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50) = 
+        new Tuple50(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50)
+    }
+    
+
+    class Tuple51[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51))
+  
+    object Tuple51 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51) = 
+        new Tuple51(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51)
+    }
+    
+
+    class Tuple52[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52))
+  
+    object Tuple52 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52) = 
+        new Tuple52(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52)
+    }
+    
+
+    class Tuple53[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53))
+  
+    object Tuple53 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53) = 
+        new Tuple53(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53)
+    }
+    
+
+    class Tuple54[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54))
+  
+    object Tuple54 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54) = 
+        new Tuple54(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54)
+    }
+    
+
+    class Tuple55[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55))
+  
+    object Tuple55 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55) = 
+        new Tuple55(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55)
+    }
+    
+
+    class Tuple56[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56))
+  
+    object Tuple56 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56) = 
+        new Tuple56(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56)
+    }
+    
+
+    class Tuple57[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57))
+  
+    object Tuple57 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57) = 
+        new Tuple57(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57)
+    }
+    
+
+    class Tuple58[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58))
+  
+    object Tuple58 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58) = 
+        new Tuple58(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58)
+    }
+    
+
+    class Tuple59[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59))
+  
+    object Tuple59 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59) = 
+        new Tuple59(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59)
+    }
+    
+
+    class Tuple60[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60))
+  
+    object Tuple60 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60) = 
+        new Tuple60(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60)
+    }
+    
+
+    class Tuple61[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61))
+  
+    object Tuple61 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61) = 
+        new Tuple61(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61)
+    }
+    
+
+    class Tuple62[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62))
+  
+    object Tuple62 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62) = 
+        new Tuple62(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62)
+    }
+    
+
+    class Tuple63[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63))
+  
+    object Tuple63 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63) = 
+        new Tuple63(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63)
+    }
+    
+
+    class Tuple64[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64))
+  
+    object Tuple64 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64) = 
+        new Tuple64(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64)
+    }
+    
+
+    class Tuple65[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65))
+  
+    object Tuple65 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65) = 
+        new Tuple65(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65)
+    }
+    
+
+    class Tuple66[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66))
+  
+    object Tuple66 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66) = 
+        new Tuple66(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66)
+    }
+    
+
+    class Tuple67[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67))
+  
+    object Tuple67 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67) = 
+        new Tuple67(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67)
+    }
+    
+
+    class Tuple68[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68))
+  
+    object Tuple68 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68) = 
+        new Tuple68(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68)
+    }
+    
+
+    class Tuple69[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69))
+  
+    object Tuple69 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69) = 
+        new Tuple69(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69)
+    }
+    
+
+    class Tuple70[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70))
+  
+    object Tuple70 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70) = 
+        new Tuple70(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70)
+    }
+    
+
+    class Tuple71[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71))
+  
+    object Tuple71 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71) = 
+        new Tuple71(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71)
+    }
+    
+
+    class Tuple72[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72))
+  
+    object Tuple72 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72) = 
+        new Tuple72(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72)
+    }
+    
+
+    class Tuple73[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73))
+  
+    object Tuple73 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73) = 
+        new Tuple73(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73)
+    }
+    
+
+    class Tuple74[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74))
+  
+    object Tuple74 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74) = 
+        new Tuple74(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74)
+    }
+    
+
+    class Tuple75[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75))
+  
+    object Tuple75 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75) = 
+        new Tuple75(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75)
+    }
+    
+
+    class Tuple76[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76))
+  
+    object Tuple76 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76) = 
+        new Tuple76(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76)
+    }
+    
+
+    class Tuple77[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77))
+  
+    object Tuple77 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77) = 
+        new Tuple77(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77)
+    }
+    
+
+    class Tuple78[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78))
+  
+    object Tuple78 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78) = 
+        new Tuple78(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78)
+    }
+    
+
+    class Tuple79[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79))
+  
+    object Tuple79 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79) = 
+        new Tuple79(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79)
+    }
+    
+
+    class Tuple80[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80))
+  
+    object Tuple80 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80) = 
+        new Tuple80(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80)
+    }
+    
+
+    class Tuple81[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81))
+  
+    object Tuple81 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81) = 
+        new Tuple81(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81)
+    }
+    
+
+    class Tuple82[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82))
+  
+    object Tuple82 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82) = 
+        new Tuple82(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82)
+    }
+    
+
+    class Tuple83[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83))
+  
+    object Tuple83 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83) = 
+        new Tuple83(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83)
+    }
+    
+
+    class Tuple84[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84))
+  
+    object Tuple84 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84) = 
+        new Tuple84(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84)
+    }
+    
+
+    class Tuple85[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85))
+  
+    object Tuple85 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85) = 
+        new Tuple85(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85)
+    }
+    
+
+    class Tuple86[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86))
+  
+    object Tuple86 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86) = 
+        new Tuple86(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86)
+    }
+    
+
+    class Tuple87[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87))
+  
+    object Tuple87 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87) = 
+        new Tuple87(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87)
+    }
+    
+
+    class Tuple88[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88))
+  
+    object Tuple88 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88) = 
+        new Tuple88(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88)
+    }
+    
+
+    class Tuple89[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89))
+  
+    object Tuple89 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89) = 
+        new Tuple89(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89)
+    }
+    
+
+    class Tuple90[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90))
+  
+    object Tuple90 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90) = 
+        new Tuple90(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90)
+    }
+    
+
+    class Tuple91[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91))
+  
+    object Tuple91 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91) = 
+        new Tuple91(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91)
+    }
+    
+
+    class Tuple92[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92))
+  
+    object Tuple92 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92) = 
+        new Tuple92(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92)
+    }
+    
+
+    class Tuple93[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93))
+  
+    object Tuple93 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93) = 
+        new Tuple93(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93)
+    }
+    
+
+    class Tuple94[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93, +T94](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93, val _94: T94)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94))
+  
+    object Tuple94 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93, _94: T94) = 
+        new Tuple94(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94)
+    }
+    
+
+    class Tuple95[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93, +T94, +T95](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93, val _94: T94, val _95: T95)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95))
+  
+    object Tuple95 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93, _94: T94, _95: T95) = 
+        new Tuple95(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95)
+    }
+    
+
+    class Tuple96[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93, +T94, +T95, +T96](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93, val _94: T94, val _95: T95, val _96: T96)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96))
+  
+    object Tuple96 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93, _94: T94, _95: T95, _96: T96) = 
+        new Tuple96(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96)
+    }
+    
+
+    class Tuple97[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93, +T94, +T95, +T96, +T97](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93, val _94: T94, val _95: T95, val _96: T96, val _97: T97)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97))
+  
+    object Tuple97 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93, _94: T94, _95: T95, _96: T96, _97: T97) = 
+        new Tuple97(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97)
+    }
+    
+
+    class Tuple98[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93, +T94, +T95, +T96, +T97, +T98](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93, val _94: T94, val _95: T95, val _96: T96, val _97: T97, val _98: T98)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98))
+  
+    object Tuple98 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97, T98](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93, _94: T94, _95: T95, _96: T96, _97: T97, _98: T98) = 
+        new Tuple98(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98)
+    }
+    
+
+    class Tuple99[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93, +T94, +T95, +T96, +T97, +T98, +T99](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93, val _94: T94, val _95: T95, val _96: T96, val _97: T97, val _98: T98, val _99: T99)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99))
+  
+    object Tuple99 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97, T98, T99](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93, _94: T94, _95: T95, _96: T96, _97: T97, _98: T98, _99: T99) = 
+        new Tuple99(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99)
+    }
+    
+
+    class Tuple100[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22, +T23, +T24, +T25, +T26, +T27, +T28, +T29, +T30, +T31, +T32, +T33, +T34, +T35, +T36, +T37, +T38, +T39, +T40, +T41, +T42, +T43, +T44, +T45, +T46, +T47, +T48, +T49, +T50, +T51, +T52, +T53, +T54, +T55, +T56, +T57, +T58, +T59, +T60, +T61, +T62, +T63, +T64, +T65, +T66, +T67, +T68, +T69, +T70, +T71, +T72, +T73, +T74, +T75, +T76, +T77, +T78, +T79, +T80, +T81, +T82, +T83, +T84, +T85, +T86, +T87, +T88, +T89, +T90, +T91, +T92, +T93, +T94, +T95, +T96, +T97, +T98, +T99, +T100](val _1: T1, val _2: T2, val _3: T3, val _4: T4, val _5: T5, val _6: T6, val _7: T7, val _8: T8, val _9: T9, val _10: T10, val _11: T11, val _12: T12, val _13: T13, val _14: T14, val _15: T15, val _16: T16, val _17: T17, val _18: T18, val _19: T19, val _20: T20, val _21: T21, val _22: T22, val _23: T23, val _24: T24, val _25: T25, val _26: T26, val _27: T27, val _28: T28, val _29: T29, val _30: T30, val _31: T31, val _32: T32, val _33: T33, val _34: T34, val _35: T35, val _36: T36, val _37: T37, val _38: T38, val _39: T39, val _40: T40, val _41: T41, val _42: T42, val _43: T43, val _44: T44, val _45: T45, val _46: T46, val _47: T47, val _48: T48, val _49: T49, val _50: T50, val _51: T51, val _52: T52, val _53: T53, val _54: T54, val _55: T55, val _56: T56, val _57: T57, val _58: T58, val _59: T59, val _60: T60, val _61: T61, val _62: T62, val _63: T63, val _64: T64, val _65: T65, val _66: T66, val _67: T67, val _68: T68, val _69: T69, val _70: T70, val _71: T71, val _72: T72, val _73: T73, val _74: T74, val _75: T75, val _76: T76, val _77: T77, val _78: T78, val _79: T79, val _80: T80, val _81: T81, val _82: T82, val _83: T83, val _84: T84, val _85: T85, val _86: T86, val _87: T87, val _88: T88, val _89: T89, val _90: T90, val _91: T91, val _92: T92, val _93: T93, val _94: T94, val _95: T95, val _96: T96, val _97: T97, val _98: T98, val _99: T99, val _100: T100)
+      extends TupleN(Array(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100))
+  
+    object Tuple100 {
+      def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97, T98, T99, T100](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22, _23: T23, _24: T24, _25: T25, _26: T26, _27: T27, _28: T28, _29: T29, _30: T30, _31: T31, _32: T32, _33: T33, _34: T34, _35: T35, _36: T36, _37: T37, _38: T38, _39: T39, _40: T40, _41: T41, _42: T42, _43: T43, _44: T44, _45: T45, _46: T46, _47: T47, _48: T48, _49: T49, _50: T50, _51: T51, _52: T52, _53: T53, _54: T54, _55: T55, _56: T56, _57: T57, _58: T58, _59: T59, _60: T60, _61: T61, _62: T62, _63: T63, _64: T64, _65: T65, _66: T66, _67: T67, _68: T68, _69: T69, _70: T70, _71: T71, _72: T72, _73: T73, _74: T74, _75: T75, _76: T76, _77: T77, _78: T78, _79: T79, _80: T80, _81: T81, _82: T82, _83: T83, _84: T84, _85: T85, _86: T86, _87: T87, _88: T88, _89: T89, _90: T90, _91: T91, _92: T92, _93: T93, _94: T94, _95: T95, _96: T96, _97: T97, _98: T98, _99: T99, _100: T100) = 
+        new Tuple100(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100)
+    }
+    
+
+    abstract class TupleN(val elems: Array[Any]) extends Product {
+        override def productArity = elems.length
+        override def productElement(n: Int) = elems(n)
+        override def toString = elems.mkString("(", ",", ")")
+        def canEqual(that: Any) = true
+    }
+}
+	
Index: dbtoaster/compiler/alpha5/src/codegen/K3Interpreter.ml
===================================================================
--- dbtoaster/compiler/alpha5/src/codegen/K3Interpreter.ml	(revision 3174)
+++ dbtoaster/compiler/alpha5/src/codegen/K3Interpreter.ml	(working copy)
@@ -47,7 +47,7 @@
     type eval_t      = env_t -> db_t -> value_t
     type code_t      =
           Eval of K3.expr_t option * eval_t
-        | Trigger of Schema.event_t * (Constants.const_t list -> db_t -> unit)
+        | Trigger of K3.map_t list * Schema.event_t * (Constants.const_t list -> db_t -> unit)
         | Main of (unit -> unit) 
 
     type op_t        = value_t -> value_t -> value_t
@@ -80,7 +80,7 @@
         | _ -> bail "unable to eval expr"
 
     let get_trigger e = match e with
-        | Trigger(x,y) -> (x,y)
+        | Trigger(s,x,y) -> (x,y)
         | _ -> bail "unable to eval trigger"
 
     let rec is_flat (t:K3.type_t) = match t with
@@ -923,7 +923,7 @@
 	  bail ~expr:expr "LookupDefVal not implemented in the interpreter"  
     
     (* Top level code generation *)
-    let trigger event stmt_block =
+    let trigger schema event stmt_block =
       let translate_tuple = 
          if Debug.active "HASH-STRINGS" then
             List.fold_right (fun (_,vart) translate_rest ->
@@ -939,7 +939,7 @@
          else
             (List.map (fun x -> BaseValue(x)))
       in
-      Trigger (event, (fun tuple db -> 
+      Trigger (schema, event, (fun tuple db -> 
         let theta = Env.make (List.map fst (Schema.event_vars event))
                              (translate_tuple tuple), [] in
           Debug.print "LOG-INTERPRETER-TRIGGERS" (fun () -> "\n"^
@@ -1055,6 +1055,6 @@
  
     let rec eval dbc c vars vals db = match c with
       | Eval(_, f) -> f (Env.make vars (List.map value_of_const_t vals), []) db
-      | Trigger(evt,trig_fn) -> trig_fn vals db; Unit
+      | Trigger(schema, evt,trig_fn) -> trig_fn vals db; Unit
       | Main(f) -> db_checker := dbc; f(); Unit
 end
Index: dbtoaster/compiler/alpha5/src/codegen/K3Scalagen.ml
===================================================================
--- dbtoaster/compiler/alpha5/src/codegen/K3Scalagen.ml	(revision 3174)
+++ dbtoaster/compiler/alpha5/src/codegen/K3Scalagen.ml	(working copy)
@@ -14,8 +14,17 @@
 (** This module implements a code generator that turns K3 code into
     Scala code.
 *)
-module K3S =
+module K3S = functor(LMS_SELECTOR : sig val useLMS: bool;; val replaceWithLMSOptimizedCode: bool end) ->
 struct
+
+   open LMS_SELECTOR
+
+   let constant_value t : string =
+      if useLMS then "unit(" ^ t ^ ")" else t ^ "";;
+
+   let rep_value t : string =
+      if useLMS then "Rep[" ^ t ^ "]" else t ^ "";;
+
    (** Describes which type of collection we are dealing with *)
    type collection_type_t = Unknown | Persistent | Intermediate
 
@@ -127,7 +136,7 @@
          (List.map (fun x -> string_of_argn ~prefix:prefix x) ns)
    
    (** Returns a string of a tuple and nests it if necessary *) 
-   let rec string_of_tuple_type t : string =
+   let rec string_of_tuple_type ?(explicitTuple = true) t: string =
       let nb_elems = (List.length t) in 
       let elems = 
          if nb_elems > max_tuple_elems then
@@ -139,11 +148,10 @@
       match t with 
       | []      -> "Unit"
       | x :: [] -> "(" ^ x ^ ")"
-      | _       -> "Tuple" ^ (string_of_int (List.length elems)) ^ 
-      (make_list ~parens:("[", "]") elems)
+      | _       -> if explicitTuple then ("Tuple" ^ (string_of_int (List.length elems)) ^ (make_list ~parens:("[", "]") elems)) else " "
 
    (** Returns the string representation of type t *)
-   let rec string_of_type t : string = 
+   let rec string_of_type_noLMS t : string = 
       match t with 
       | Float -> "Double"
       | Bool -> "Boolean"
@@ -154,20 +162,47 @@
       | External(s) -> s
       | Unit -> "Unit"
       | Fn(_, arg, ret) -> 
-         (string_of_type arg) ^ " => " ^ (string_of_type ret)
+         (string_of_type_noLMS arg) ^ " => " ^ (string_of_type_noLMS ret)
       | ExtFn(_, arg, ret) -> 
-         (string_of_type arg) ^ " => " ^ (string_of_type ret)
-      | Tuple(elems) -> (string_of_tuple_type (List.map string_of_type elems))
+         (string_of_type_noLMS arg) ^ " => " ^ (string_of_type_noLMS ret)
+      | Tuple(elems) -> (string_of_tuple_type (List.map string_of_type_noLMS elems))
       | Collection(tpe, keys_t, val_t) -> 
          let type_string = match tpe with 
          | Intermediate -> "K3IntermediateCollection"
          | Persistent -> "K3PersistentCollection"
          | Unknown -> "K3Collection" in
          type_string ^ "[" ^
-         (string_of_tuple_type (List.map string_of_type keys_t)) ^ ", " ^ 
-         (string_of_type val_t) ^ "]"
+         (string_of_tuple_type (List.map string_of_type_noLMS keys_t)) ^ ", " ^ 
+         (string_of_type_noLMS val_t) ^ "]"
       | Trigger(event_t) -> "Trigger"
 
+   let rec string_of_type_withLMS t : string = 
+      match t with 
+      | Float -> "Rep[Double]"
+      | Bool -> "Rep[Boolean]"
+      | Int -> if Debug.active "BIG-INT" then "Rep[BigInt]" else "Rep[Long]"
+      | String -> "Rep[String]"
+      | Date -> "Rep[Date]"
+      | Any -> "Rep[Any]"
+      | External(s) -> s
+      | Unit -> "Rep[Unit]"
+      | Fn(_, arg, ret) -> 
+         (string_of_type_withLMS arg) ^ " => " ^ (string_of_type_withLMS ret)
+      | ExtFn(_, arg, ret) -> 
+         (string_of_type_withLMS arg) ^ " => " ^ (string_of_type_withLMS ret)
+      | Tuple(elems) -> (string_of_tuple_type ~explicitTuple:false (List.map string_of_type_withLMS elems))
+      | Collection(tpe, keys_t, val_t) -> 
+         let type_string = match tpe with 
+         | Intermediate -> "Rep[K3IntermediateCollection"
+         | Persistent -> "Rep[K3PersistentCollection"
+         | Unknown -> "Rep[K3Collection" in
+         type_string ^ "[" ^
+         (string_of_tuple_type (List.map string_of_type_noLMS keys_t)) ^ ", " ^ 
+         (string_of_type_noLMS val_t) ^ "]]"
+      | Trigger(event_t) -> "Rep[Trigger]"
+
+   let rec string_of_type t : string = if useLMS then string_of_type_withLMS t else string_of_type_noLMS t
+
    let debug_string ((x, t):code_t) : string =
       (string_of_type t) ^ ": " ^ x
 
@@ -248,10 +283,10 @@
             (string_of_type a) ^ " and " ^ (string_of_type b))
 
    (** Returns code to cast a Boolean into a Double *)
-   let mk_bool_to_float a = "(if(" ^ a ^ ") 1.0 else 0.0)"
+   let mk_bool_to_float a = if useLMS then "(if(" ^ a ^ ") unit(1.0) else unit(0.0))" else "(if(" ^ a ^ ") 1.0 else 0.0)"
 
    (** Returns code to cast a Boolean into an Int *)
-   let mk_bool_to_int a = "(if(" ^ a ^ ") 1L else 0L)"
+   let mk_bool_to_int a = if useLMS then "(if(" ^ a ^ ") unit(1L) else unit(0L))" else "(if(" ^ a ^ ") 1L else 0L)"
    let mk_date_to_time a = a ^ ".getTime()"
 
    (** Generates a list of indices with the same length as the list
@@ -314,8 +349,8 @@
    and wrap_function argt fnt f: string = 
       match fnt with
       | Fn(argsn, argst, rett) ->
-         "(y:" ^ (string_of_type argt) ^ ") => { y match { case " ^ 
-         (string_of_argn argsn) ^ " => {" ^ f ^ "} } }" 
+         "(" ^ (string_of_argn argsn) ^ ":" ^ (string_of_type argt) ^ ") => { " ^ 
+         f ^ " }" 
       | ExtFn(n, _, _) -> n ^ " _"
       | _ -> debugfail None "Expected a function"
 
@@ -331,8 +366,9 @@
       in
       match fnt with
       | Fn(argsn, argst, rett) ->
-         "(x:Tuple2[" ^ (string_of_type (Tuple(ktt))) ^ ", " ^ 
-         (string_of_type vtt) ^ "]) => { " ^
+
+         "(x:" ^ (if useLMS then "Rep[" else "") ^ "Tuple2[" ^ (string_of_type_noLMS (Tuple(ktt))) ^ ", " ^ 
+         (string_of_type_noLMS vtt) ^ "]" ^ (if useLMS then "]" else "") ^ ") => { " ^
          (implicit_conversions ~pfx:(Some("x")) argsn 
             (Tuple([Tuple(ktt); vtt])) argst) ^
          f_body ^ " }" 
@@ -344,30 +380,56 @@
   
    (** The identity function *)
    let identity a = a
+   let int_to_double a = if useLMS then "rep_asinstanceof((" ^ a ^ ").asInstanceOf[Rep[Long]], manifest[Long], manifest[Double])" else a
    
+   let make_vargen prefix =
+      let count = ref (-1) in
+         fun () ->
+           incr count;
+           prefix ^ string_of_int !count
    (** Returns a function generating code for a arithmetic 
        operation with casting if necessary *)
-   let num_op ?(conva = identity) ?(convb = identity) opcode = 
+   let fresh_anArg = (make_vargen "an")
+   let fresh_bnArg = (make_vargen "bn")
+   let num_op ?(conva = identity) ?(convb = identity) ?(switchOperands = false) opcode = 
+      let aArg = fresh_anArg () in
+      let bArg = fresh_bnArg () in
+      if switchOperands then
+         if useLMS then
+            (fun a b -> "{ val " ^ bArg ^  " = (" ^ conva(b) ^ "); val " ^ aArg ^ " = (" ^ convb(a) ^ "); " ^ bArg ^ " " ^ opcode ^ " " ^ aArg ^ "}")
+         else
+            (fun a b -> "(" ^ conva(b) ^ ") " ^ opcode ^ " (" ^ convb(a) ^ ")")
+      else
+         if useLMS then
+            (fun a b -> "{ val " ^ aArg ^  " = (" ^ conva(a) ^ "); val " ^ bArg ^ " = (" ^ convb(b) ^ "); " ^ aArg ^ " " ^ opcode ^ " " ^ bArg ^ "}")
+         else
       (fun a b -> "(" ^ conva(a) ^ ") " ^ opcode ^ " (" ^ convb(b) ^ ")")
 
+   let fresh_acArg = (make_vargen "ac")
+   let fresh_bcArg = (make_vargen "bc")
    let cmp_op ?(conva = identity) ?(convb = identity) opcode = 
-      (fun a b -> mk_bool_to_int ("(" ^ conva(a) ^ ") " ^ opcode ^ " (" ^ convb(b) ^ ")"))
+      let aArg = fresh_acArg () in
+      let bArg = fresh_bcArg () in
+      if useLMS then
+         (fun a b -> "{ val " ^ aArg ^  " = (" ^ conva(a) ^ "); val " ^ bArg ^ " = (" ^ convb(b) ^ "); " ^ aArg ^ " " ^ opcode ^ " " ^ bArg ^ "}")
+      else
+         (fun a b -> ("(" ^ conva(a) ^ ") " ^ opcode ^ " (" ^ convb(b) ^ ")"))
 
    (** Returns a function generating code for a certain
        type of operation *)
-   let f_op op_f op_b = 
+   let f_op op_f op_b switchOperands = 
       (fun a b -> 
          match (a, b) with
-         | (Float, Float) -> ((num_op op_f), Float, None)
+         | (Float, Float) -> ((num_op ~switchOperands:switchOperands op_f), Float, None)
          | (Bool, Bool)   -> ((num_op ~conva:mk_bool_to_int 
                                       ~convb:mk_bool_to_int op_b), Int, None)
-         | (Bool, Float)  -> ((num_op op_f), Float, None)
-         | (Float, Bool)  -> ((num_op op_f), Float, None)
-         | (Float, Int)   -> ((num_op op_f), Float, None)
-         | (Int, Float)   -> ((num_op op_f), Float, None)
-         | (Int, Int)     -> ((num_op op_f), Int, None)
-         | (Int, Bool)    -> ((num_op op_f), Int, None)
-         | (Bool, Int)    -> ((num_op op_f), Int, None)
+         | (Bool, Float)  -> ((num_op ~conva:mk_bool_to_float ~switchOperands:switchOperands op_f), Float, None)
+         | (Float, Bool)  -> ((num_op ~convb:mk_bool_to_float ~switchOperands:switchOperands op_f), Float, None)
+         | (Float, Int)   -> ((num_op ~convb:int_to_double ~switchOperands:switchOperands op_f), Float, None)
+         | (Int, Float)   -> ((num_op ~conva:int_to_double ~switchOperands:switchOperands op_f), Float, None)
+         | (Int, Int)     -> ((num_op ~switchOperands:switchOperands op_f), Int, None)
+         | (Int, Bool)    -> ((num_op ~convb:mk_bool_to_int ~switchOperands:switchOperands op_f), Int, None)
+         | (Bool, Int)    -> ((num_op ~conva:mk_bool_to_int ~switchOperands:switchOperands op_f), Int, None)
          | (_, _) -> 
             ((num_op op_f), Unit, 
                Some((string_of_type a) ^ " [" ^ op_f ^ "||" ^ op_b ^ "] " ^
@@ -377,9 +439,9 @@
    (** Generates a function generating code for a compare operation *)
    let c_op op = (fun a b -> 
       match (a, b) with
-      | (Float, Float) | (String, String) | (Bool, Bool) | (Int, Int)
-      | (Int, Float) | (Float, Int) -> 
-         ((cmp_op op), Int, None)
+      | (Float, Float) | (String, String) | (Bool, Bool) | (Int, Int) -> ((cmp_op op), Bool, None)
+      | (Int, Float) -> ((cmp_op op ~conva:int_to_double), Bool, None)
+      | (Float, Int) -> ((cmp_op op ~convb:int_to_double), Bool, None)
       (* Sometimes there is K3 code that compares booleans to floats, so code
          is being generated to convert the boolean to a float *)
       | (Bool, Float) -> ((cmp_op op ~conva:mk_bool_to_float), Int, None)
@@ -395,8 +457,8 @@
    )
 
    (** Implementation of arithmetic and comparision operators *)
-   let add_op         : op_t = (f_op "+" "+")
-   let mult_op        : op_t = (f_op "*" "*")
+   let add_op         : op_t = (f_op "+" "+" false)
+   let mult_op        : op_t = (f_op "*" "*" false)
    let eq_op          : op_t = (c_op "==")
    let neq_op         : op_t = (c_op "!=")
    let lt_op          : op_t = (c_op "<")
@@ -418,15 +480,18 @@
    (** Generates the code for a constant expression *)
    let const ?(expr = None) (c:const_t) : code_t = 
       match c with 
-      | CBool(y) -> (string_of_bool y, Bool)
-      | CInt(y) -> ((string_of_int y) ^ "L", Int)
-      | CFloat(y) -> ((string_of_float y) ^ "0", Float)
-      | CString(y) -> ("\"" ^ y ^ "\"", String)
+      | CBool(y) -> (constant_value(string_of_bool y), Bool)
+      | CInt(y) -> (constant_value((string_of_int y) ^ "L"), Int)
+      | CFloat(y) -> (constant_value((string_of_float y) ^ "0"), Float)
+      | CString(y) -> (constant_value("\"" ^ y ^ "\""), String)
       | CDate(y,m,d) -> 
          let v = 
             "new GregorianCalendar(" ^ (string_of_int y) ^ "," ^ 
-            (string_of_int m) ^ " - 1," ^ (string_of_int d) ^ ").getTime();" 
+            (string_of_int m) ^ " - 1," ^ (string_of_int d) ^ ").getTime()" 
          in
+         if useLMS then
+            (constant_value(v), Date)
+         else 
          let cstr = 
             if Hashtbl.mem consts v then
                Hashtbl.find consts v
@@ -437,7 +502,7 @@
                str
             )
          in
-         (cstr, Date)
+            (constant_value(cstr), Date)
       | CInterval _ -> failwith ("Intervals at runtime are not " ^ 
                                  "supported by the Scala backend")
    
@@ -491,8 +556,11 @@
          | t -> [], [t], "v"
       in
       let tpe = Collection(Intermediate, kt, List.hd vt) in
-      ("{ val v = " ^ d ^ "; new " ^ (string_of_type tpe) ^ "(List(" ^ v ^ ")) }", 
-         tpe)
+      ("{ val v = " ^ d ^ "; " ^ (
+         if useLMS 
+         then "newSingleton" ^ (string_of_type_noLMS tpe) ^ "(" ^ v ^ ") }"
+         else "new " ^ (string_of_type_noLMS tpe) ^ "(List(" ^ v ^ ")) }"
+      ), tpe)
       
    (** Generates code to combine two collections
        
@@ -511,6 +579,27 @@
             | Collection(_, k, v) -> (k, v) 
             | _ -> debugfail expr "Combine can only combine collections" 
          in
+         if(useLMS) then
+            ("({ val result = newK3PersistentCollection[" ^ (string_of_type_noLMS (Tuple k)) ^ "," ^ 
+            (string_of_type_noLMS v) ^ "](\"INTERMEDIATE_WITH_UPDATE\", unit(Map[" ^ (string_of_type_noLMS (Tuple k)) ^ "," ^ 
+            (string_of_type_noLMS v) ^ "]()), unit(None));" ^ (make_list ~sep:";" ~parens:("", ";") 
+            (List.map (fun (n, t) ->
+               let ko, vo = 
+                  match t with 
+                  | Collection(_, ko, vo) -> ko, vo 
+                  | _ -> debugfail None "Expected collection" 
+               in
+               let key_len = List.length ko in
+               let v_var =  "v" ^ (string_of_int (key_len + 1)) in
+               let body = "val t = " ^ (make_tuple (list_vars "v" (key_len))) ^ 
+                  "; result.updateValue (t, (result.lookup(t) + " ^ v_var ^ "))" 
+               in
+               "(" ^ n ^ ").foreach { " ^ (wrap_function_key_val ko vo 
+               (Fn(ArgNTuple(List.map (fun x -> ArgN(x)) 
+               (list_vars "v" (key_len + 1))), Tuple(k @ [v]), Unit)) body) ^ " }"
+            ) terms)) ^ " newK3PC" ^ (string_of_type_noLMS common_type) ^ "(result) })",
+            common_type) 
+         else
          ("({ val result = Map[" ^ (string_of_type (Tuple k)) ^ "," ^ 
          (string_of_type v) ^ "]();" ^ (make_list ~sep:";" ~parens:("", ";") 
          (List.map (fun (n, t) ->
@@ -655,14 +744,14 @@
    (** This function generates code to map from one collection to another *)
    let map ?(expr = None) ((fn, fnt):code_t) (exprt:K3.type_t) 
          ((c, ct):code_t) : code_t =
-      let (keyt,valt) = 
+      let (keyt,valt,reslist) = 
          match (fn_ret_type fnt) with
          |  Tuple(retlist) ->
             if retlist = []
             then debugfail expr "Mapping function with empty ret"
             else ((List.rev (List.tl (List.rev retlist))),
-               (List.hd (List.rev retlist)))
-         |  x -> ([], x)
+               (List.hd (List.rev retlist)),retlist)
+         |  x -> ([], x, x :: [])
       in
       let kt, vt, wrapped_fn = 
          match ct with 
@@ -673,14 +762,22 @@
       let key_length = (List.length keyt) in
       let convert_to_key_value = 
          match keyt with
-         | [] -> make_tuple ("()" :: "v" :: [])
-         | x -> (string_of_type (Tuple((Tuple(keyt)) :: [valt]))) ^ "(" ^ 
+         | [] -> if useLMS then "v" else (make_tuple ("()" :: "v" :: []))
+         | x -> (string_of_type (Tuple((Tuple(keyt)) :: [valt]))) ^ (if useLMS then "make_tuple2" else "") ^ "(" ^ (if useLMS && key_length > 1 then "make_tuple" ^ (string_of_int key_length) else "") ^ 
             (make_list (list_vars "v._" key_length)) ^ ", v._" ^ 
             (string_of_int (key_length + 1)) ^ ")"
       in
-      (c ^ ".map((y:Tuple2[" ^ 
-      (string_of_tuple_type (List.map string_of_type kt)) ^ 
-      "," ^ (string_of_type vt) ^ "]) => { val v = ({ " ^ wrapped_fn ^ 
+      let convert_to_key_value_ret_type = 
+         match keyt with
+         | [] -> ""
+         | x ->  ": " ^ (if useLMS then "Rep[" else "") ^ 
+         string_of_tuple_type (List.map string_of_type_noLMS reslist) ^
+         (if useLMS then "]" else "")
+      in
+      (c ^ ".map((y:" ^ (if useLMS then "Rep[" else "") ^ "Tuple2[" ^ 
+      (string_of_tuple_type (List.map string_of_type_noLMS kt)) ^ 
+      "," ^ (string_of_type_noLMS vt) ^ "]" ^ (if useLMS then "]" else "") ^ 
+      ") => { val v" ^ convert_to_key_value_ret_type ^ " = ({ " ^ wrapped_fn ^ 
       " })(y); " ^ 
       convert_to_key_value ^ " })", Collection(Intermediate, keyt,valt))
 
@@ -728,7 +825,8 @@
    let flatten ?(expr = None) ((c, ct):code_t) : code_t =
       match ct with
       | Collection(_, [],Collection(_, ki,t)) ->
-         (("(" ^ c ^ ").flatten()"), Collection(Intermediate, ki, t))
+         (("(" ^ c ^ ").flatten[" ^ ( (string_of_tuple_type (List.map string_of_type_noLMS ki)) ^ ", " ^ 
+         (string_of_type_noLMS t) ) ^ "]"), Collection(Intermediate, ki, t))
       | _ -> debugfail expr ("Flatten on a non-collection: " ^ c ^ 
          " has type " ^ (string_of_type ct))
    
@@ -906,7 +1004,7 @@
          " has type " ^ (string_of_type ct))      
    
    (** Generates code for a trigger function *)
-   let trigger (eventt:Schema.event_t) (code:code_t list): code_t =
+   let trigger (schemas:K3.map_t list) (eventt:Schema.event_t) (code:code_t list): code_t =
       let prefix, vars =
          match eventt with
          (* TODO: Implement corrective updates *)
@@ -916,14 +1014,26 @@
          | Schema.DeleteEvent(rel, vars, tpe) -> ("Delete" ^ rel, vars)
          | Schema.SystemInitializedEvent -> ("SystemInitialized", []) 
       in
-      let var_def = (make_list (List.map (fun (n, t) -> 
+      let total_param_len = List.length vars (*+ List.length schemas*)
+      in
+      let total_param = string_of_int (total_param_len)
+      in
+      let var_def = if total_param_len > 0 then (make_list (List.map (fun (n, t) -> 
          "var_" ^ n ^ ": " ^ (string_of_type (map_base_type t))) vars)) 
+               else (if useLMS then "(var_dummy: Rep[Unit])" else "()")
       in
-      let fn_def = "def on" ^ prefix ^ var_def in
-      let stmts = (make_list ~parens:("{","}") ~sep:"; " 
-         (List.map (fun (s, _) -> s) code)) 
+      let fn_def = ("def on" ^ prefix ^ var_def)
       in
-      (fn_def ^ " = " ^ stmts, Trigger(eventt))
+      let conversion_stmts =  if useLMS then
+            (make_list ~parens:("","") ~sep:"" (List.map (fun (id,ivars,ovars,t) -> "val " ^ id ^ " = " ^ id ^ "_orig.mutable;") schemas))
+         else ""
+      in
+      let stmts = "{" ^ conversion_stmts ^ ( 
+         if useLMS then ( (make_list ~parens:("","") ~sep:"; " (List.map (fun (s, _) -> s) code)) )  
+         else ( (make_list ~parens:("{","}") ~sep:"; " (List.map (fun (s, _) -> s) code)) ) 
+      ) ^ "}"
+      in
+      (fn_def ^ " = " ^ stmts ^ (if useLMS then ("toplevel" ^ (if total_param_len > 0 then total_param else "1") ^ "(\"on" ^ prefix ^ "\") { " ^ "on" ^ prefix ^ " }") else ""), Trigger(eventt))
 
    (** This function generates code for sources *)
    let source (source:Schema.source_t) 
@@ -991,7 +1101,7 @@
                   (make_list (List.map (fun (n, _) -> "var_" ^ n) vars)) in
                let knt = 
                   (make_list (List.map (fun (n, t) -> "var_" ^ n ^ ":" ^ 
-                  string_of_type (map_base_type t)) vars)) 
+                  string_of_type_noLMS (map_base_type t)) vars)) 
                in
                knt ^ ") => " ^ 
                "if(" ^ rel ^ ".contains(" ^ k ^ ")) { val count = " ^ rel ^ 
@@ -1018,7 +1128,7 @@
       let str_tlqs = 
          (make_list ~sep:";" ~parens:("",";") (List.map 
             (fun (n, _, (c, ct)) ->
-               "def get" ^ n ^ "():" ^ (string_of_type ct) ^ " = {" ^ c ^ "}"
+               "def get" ^ n ^ "():" ^ (string_of_type_noLMS ct) ^ " = {" ^ c ^ "}"
             ) tlqs))
       in
       let print_results = 
@@ -1034,11 +1144,11 @@
          (if Debug.active "IVC-TIMER" then "ivcTimer.print; incTimer.print;" else "") ^ 
          " }" 
       in
-      let str_schema =
          let make_type_list t: string = 
             string_of_tuple_type 
-               (List.map (fun (n, t) -> string_of_type (map_base_type t)) t) 
+            (List.map (fun (n, t) -> string_of_type_noLMS (map_base_type t)) t) 
          in
+      let str_schema =
          let sndIdx rel tpe valt =
             try
             (* find patterns for a certain map *)
@@ -1077,22 +1187,22 @@
          in
          (make_list ~parens:("",";") ~sep:";" (List.map 
             (fun (id,ivars,ovars,t) ->
-               let str_val_t = string_of_type (map_base_type t) in
+               let str_val_t = string_of_type_noLMS (map_base_type t) in
                match (ivars, ovars) with
-               | ([], []) -> "var " ^ id ^ " = SimpleVal[" ^ str_val_t ^ 
+               | ([], []) -> "val " ^ id ^ " = SimpleVal[" ^ str_val_t ^ 
                   "](\"" ^ id ^"\", 0)"
-               | ([], os) -> "var " ^ id ^ " = new K3PersistentCollection[" ^
+               | ([], os) -> "val " ^ id ^ " = new K3PersistentCollection[" ^
                   (make_type_list os) ^ ", " ^ str_val_t ^ "]" ^
-                  "(\"" ^ id ^ "\", Map(), " ^ (sndIdx id os str_val_t) ^ 
+                  "(\"" ^ id ^ "\", " ^ (if useLMS then "new java.util.HashMap[" ^ (make_type_list os) ^ ", " ^ str_val_t ^ "]" else "Map()") ^ ", " ^ (sndIdx id os str_val_t) ^ 
                   ") /* out */"
-               | (is, []) -> "var " ^ id ^ " = new K3PersistentCollection[" ^ 
+               | (is, []) -> "val " ^ id ^ " = new K3PersistentCollection[" ^ 
                   (make_type_list is) ^ ", " ^ str_val_t ^ "]" ^
-                  "(\"" ^ id ^ "\", Map(), " ^ 
+                  "(\"" ^ id ^ "\", " ^ (if useLMS then "new java.util.HashMap[" ^ (make_type_list is) ^ ", " ^ str_val_t ^ "]" else "Map()") ^ ", " ^ 
                   (sndIdx id is str_val_t) ^ ") /* in */"
-               | (is, os) -> "var " ^ id ^ 
+               | (is, os) -> "val " ^ id ^ 
                   " = new K3FullPersistentCollection[" ^ (make_type_list is) ^ 
                   "," ^ (make_type_list os) ^ ", " ^ str_val_t ^ "]" ^ 
-                  "(\"" ^ id ^ "\", Map(), " ^ 
+                  "(\"" ^ id ^ "\", " ^ (if useLMS then "new java.util.HashMap[" ^ (make_type_list is) ^ ", K3PersistentCollection[" ^ (make_type_list os) ^ ", " ^ str_val_t ^ "]]" else "Map()") ^ ", " ^ 
                   (sndIdx id is str_val_t) ^ ") /* full */") 
             schemas))
       in
@@ -1100,7 +1210,7 @@
       let run = 
          "def act(): Unit =" ^
          "{ fillTables();" ^
-         "onSystemInitialized();" ^
+         (if useLMS then "onSystemInitialized(());" else "onSystemInitialized();") ^
          "sources.start;" ^
          "while(true) {" ^
          "receive { " ^
@@ -1113,7 +1223,7 @@
       let imports = 
          (make_list ~sep:";" ~parens:("",";") (List.map 
             (fun x -> "import " ^ x)
-            [ 
+            (if (useLMS && (not replaceWithLMSOptimizedCode) ) then [ 
                "java.io._";
                "org.dbtoaster.dbtoasterlib.StreamAdaptor._";
                "org.dbtoaster.dbtoasterlib.K3Collection._";
@@ -1123,12 +1233,30 @@
                "org.dbtoaster.dbtoasterlib.StdFunctions._";
                "org.dbtoaster.dbtoasterlib.QueryInterface._";
                "scala.collection.mutable.Map";
+               "scala.collection.JavaConversions.mapAsScalaMap";
                "java.util.Date";
                "java.util.GregorianCalendar";
                "xml._";
+               "scala.virtualization.lms.common._";
+               "scala.virtualization.lms.internal._";
+               "dbtoptimizer._";
+            ] else [ 
+               "java.io._";
+               "org.dbtoaster.dbtoasterlib.StreamAdaptor._";
+               "org.dbtoaster.dbtoasterlib.K3Collection._";
+               "org.dbtoaster.dbtoasterlib.Source._";
+               "org.dbtoaster.dbtoasterlib.DBToasterExceptions._";
+               "org.dbtoaster.dbtoasterlib.ImplicitConversions._";
+               "org.dbtoaster.dbtoasterlib.StdFunctions._";
+               "org.dbtoaster.dbtoasterlib.QueryInterface._";
+               "scala.collection.mutable.Map";
+               "scala.collection.JavaConversions.mapAsScalaMap";
+               "java.util.Date";
+               "java.util.GregorianCalendar";
+               "xml._";
                "scala.actors.Actor";
                "scala.actors.Actor._"
-            ])
+            ]))
          )
       in
       let dispatcher = 
@@ -1156,10 +1284,16 @@
                   make_list ~parens:("", "::Nil") ~sep:"::"
                      (List.map (fun (n, t) ->
                         "(var_" ^ n ^ ": " ^ 
-                        (string_of_type (map_base_type t)) ^ ")") vars))) ^
+                        (string_of_type_noLMS (map_base_type t)) ^ ")") vars))) ^
                ") => on" ^ 
                trigger_type ^ rel ^ 
+               ( if useLMS then
+                  (make_list ~parens:("(",")") ~sep:", " (List.map (fun (n, t) -> "var_" ^ n) vars))
+                  (*^ (make_list ~parens:(", ",")") ~sep:", " (List.map 
+                     (fun (id,ivars,ovars,t) -> id ) schemas) )*)
+                  else
                (make_list (List.map (fun (n, t) -> "var_" ^ n) vars))
+               )
             | t -> 
                debugfail None ("Trigger expected but found " ^ 
                (string_of_type t))
@@ -1185,11 +1319,60 @@
             | _ -> debugfail None "Missing source name"
             ) streams)) ^ ");"
       in
-      (* Code for the triggers *)
+      let intermediate_ds_vals = 
+         (make_list ~parens:("","; ") ~sep:"; " (List.map 
+               (fun (id,ivars,ovars,t) ->
+                  let str_val_t = string_of_type_noLMS (map_base_type t) in
+                  "val " ^ match (ivars, ovars) with
+                  | ([], []) -> id ^ "_orig : " ^ rep_value ("SimpleVal[" ^ str_val_t ^ "]") ^ " = fresh[" ^ ("SimpleVal[" ^ str_val_t ^ "]") ^ "]"
+                  | ([], os) -> id ^ "_orig : " ^ rep_value ("K3PersistentCollection[" ^ (make_type_list os) ^ ", " ^ str_val_t ^ "]") ^ " = fresh[" ^ ("K3PersistentCollection[" ^ (make_type_list os) ^ ", " ^ str_val_t ^ "]") ^ "]"
+                  | (is, []) -> id ^ "_orig : " ^ rep_value ("K3PersistentCollection[" ^ (make_type_list is) ^ ", " ^ str_val_t ^ "]") ^ " = fresh[" ^ ("K3PersistentCollection[" ^ (make_type_list is) ^ ", " ^ str_val_t ^ "]") ^ "]"
+                  | (is, os) -> id ^ "_orig : " ^ rep_value ("K3FullPersistentCollection[" ^ (make_type_list is) ^ "," ^ (make_type_list os) ^ ", " ^ str_val_t ^ "]") ^ " = fresh[" ^ ("K3FullPersistentCollection[" ^ (make_type_list is) ^ "," ^ (make_type_list os) ^ ", " ^ str_val_t ^ "]") ^ "]"
+               ) schemas))
+      in
+      let class_args = 
+         (make_list ~parens:("classArgs = "," Nil;") ~sep:" " (List.map 
+               (fun (id,ivars,ovars,t) -> id ^ "_orig ::") schemas))
+      in
+      let class_args_application = 
+         (make_list ~parens:("","") ~sep:", " (List.map 
+               (fun (id,ivars,ovars,t) -> id) schemas))
+      in
+      let trigger_defs = 
+         (make_list ~parens:("","") ~sep:"" 
+         (List.map (fun (b, bt) -> (match bt with
+         | Trigger(Schema.CorrectiveUpdate(_, _, _, _, _)) -> 
+            debugfail None "Corrective updates not implemented yet"
+         | Trigger(Schema.InsertEvent(rel, vars, tpe)) -> "val onInsert" ^ rel ^ " = new onInsert" ^ rel ^ "(" ^ class_args_application ^ ");"
+         | Trigger(Schema.DeleteEvent(rel, vars, tpe)) -> "val onDelete" ^ rel ^ " = new onDelete" ^ rel ^ "(" ^ class_args_application ^ ");"
+         | Trigger(Schema.SystemInitializedEvent)      -> "val onSystemInitialized = new onSystemInitialized(" ^ class_args_application ^ ");"
+         | _ -> "")) triggers)) 
+      in
+      let trigger_actions = 
+         (make_list ~parens:("","") ~sep:"" 
+         (List.map (fun (b, bt) -> (match bt with
+         | Trigger(Schema.CorrectiveUpdate(_, _, _, _, _)) -> 
+            debugfail None "Corrective updates not implemented yet"
+         | Trigger(Schema.InsertEvent(rel, vars, tpe)) -> b ^ ";"
+         | Trigger(Schema.DeleteEvent(rel, vars, tpe)) -> b ^ ";"
+         | Trigger(Schema.SystemInitializedEvent)      -> b ^ ";"
+         | _ -> "")) triggers)) 
+      in
+      let trigger_globals = 
+         (make_list ~parens:("","") ~sep:"" 
+         (List.map (fun (b, bt) -> (match bt with
+         | Trigger(Schema.CorrectiveUpdate(_, _, _, _, _)) -> 
+            debugfail None "Corrective updates not implemented yet"
+         | Trigger(Schema.InsertEvent(rel, vars, tpe)) -> ""
+         | Trigger(Schema.DeleteEvent(rel, vars, tpe)) -> ""
+         | Trigger(Schema.SystemInitializedEvent)      -> ""
+         | _ -> b ^ ";")) triggers)) 
+      in
+      (* Code for the triggers 
       let triggers = 
          (make_list ~parens:("",";") ~sep:";" 
          (List.map (fun (b, bt) -> b) triggers)) 
-      in
+      in*)
       (* Code to load the static tables *)
       let filltables = 
          "def fillTables(): Unit = {" ^
@@ -1212,16 +1395,25 @@
       in
       imports ^
       " package org.dbtoaster { " ^
-      "class Query() " ^ 
-      "extends DBTQuery { var supervisor: Actor = null;" ^ (
-         if Debug.active "IVC-TIMER" then 
+         (if useLMS && not(replaceWithLMSOptimizedCode) then "" 
+          else "class Query() extends DBTQuery { var supervisor: Actor = null;" ^
+            (if Debug.active "IVC-TIMER" then 
             "val ivcTimer = new DBTTimer(\"IVC\");" ^
             "val incTimer = new DBTTimer(\"INC\");" 
          else "") ^
       set_supervisor ^
       (Hashtbl.fold (fun a b c -> "val " ^ b ^ " = " ^ a ^ ";" ^ c) consts "") ^
-      str_sources ^ str_streams ^ str_schema ^ str_tlqs ^ triggers ^ 
-      filltables ^ dispatcher ^ run ^ print_results ^ print_maps ^ " }}", 
+            str_sources ^ str_streams ^ str_schema ^ (if useLMS then trigger_defs else "") ^ str_tlqs ^ (if useLMS then "" else trigger_actions) ^ trigger_globals ^
+            filltables ^ dispatcher ^ run ^ print_results ^ print_maps ^ " }") ^ 
+         (if (useLMS && not(replaceWithLMSOptimizedCode)) then
+               "object QueryGenerator {" ^ 
+               "  trait Prog extends DSL {" ^ intermediate_ds_vals ^ class_args ^ trigger_actions  ^ "}" ^
+               "  def main(args: Array[String]): Unit = {" ^
+               "   (new Impl(args(0), \"org.dbtoaster\") with Prog).emitAll()" ^
+               "  } "^
+               "}"
+          else "") ^ 
+      "}", 
       Unit
 
    (** This function formats a piece of scala code 
@@ -1270,4 +1462,15 @@
 
 end
 
-module K3CG : K3Codegen.CG = K3S
+module K3CG : K3Codegen.CG = K3S (struct 
+   let useLMS = false
+   let replaceWithLMSOptimizedCode = false
+end)
+module K3CG_LMS : K3Codegen.CG = K3S(struct 
+   let useLMS = true
+   let replaceWithLMSOptimizedCode = false
+end)
+module K3CG_ScalaLMSOpt : K3Codegen.CG = K3S(struct 
+   let useLMS = true
+   let replaceWithLMSOptimizedCode = true
+end)
Index: dbtoaster/compiler/alpha5/src/functional/K3Codegen.ml
===================================================================
--- dbtoaster/compiler/alpha5/src/functional/K3Codegen.ml	(revision 3174)
+++ dbtoaster/compiler/alpha5/src/functional/K3Codegen.ml	(working copy)
@@ -195,7 +195,7 @@
     (* Toplevel: sources and main *)
     (* event, rel, trigger args, statement code block -> trigger code *)
     val trigger :
-        Schema.event_t -> code_t list -> code_t
+        K3.map_t list -> Schema.event_t -> code_t list -> code_t
 
     (* source type, framing type, (relation * adaptor type) list 
      * -> source impl type,
Index: dbtoaster/compiler/alpha5/src/functional/K3Compiler.ml
===================================================================
--- dbtoaster/compiler/alpha5/src/functional/K3Compiler.ml	(revision 3174)
+++ dbtoaster/compiler/alpha5/src/functional/K3Compiler.ml	(working copy)
@@ -132,25 +132,25 @@
 let compile_expr_to_string e: string = to_string (compile_k3_expr e)
 
 
-let compile_triggers_noopt (trigs:K3.trigger_t list) : code_t list =
+let compile_triggers_noopt (schema:K3.map_t list) (trigs:K3.trigger_t list) : code_t list =
    List.map (fun (event, cs) ->
       let annotated = List.map (fun x -> K3.annotate_collections x) cs in
       let stmts = List.map (fun x -> compile_k3_expr x) annotated in
-      trigger event stmts
+      trigger schema event stmts
    ) trigs
 
-let compile_triggers (trigs:K3.trigger_t list) : code_t list =
+let compile_triggers (schema:K3.map_t list) (trigs:K3.trigger_t list) : code_t list =
   List.map (fun (event, cs) ->
       let args = List.map fst (event_vars event) in
       let stmts = List.map compile_k3_expr
         (List.map (K3Optimizer.optimize args) cs) 
-      in trigger event stmts)
+      in trigger schema event stmts)
     trigs
     
 let compile_k3_to_code ((dbschema,(schema,patterns),trigs,
                          toplevel_queries) : K3.prog_t): 
                           code_t =
-   let ctrigs = compile_triggers_noopt trigs in
+   let ctrigs = compile_triggers_noopt schema trigs in
    let (tables,streams) =
       Schema.partition_sources_by_type dbschema
    in
Index: dbtoaster/compiler/alpha5/src/functional/K3Optimizer.ml
===================================================================
--- dbtoaster/compiler/alpha5/src/functional/K3Optimizer.ml	(revision 3174)
+++ dbtoaster/compiler/alpha5/src/functional/K3Optimizer.ml	(working copy)
@@ -1,7 +1,7 @@
 (**
   K3 normalization and optimization
 
-{b Lifting (aka K3 expression normalization):}
+{by Lifting (aka K3 expression normalization):}
 
 - conditionals:
   - the point of lifting is to enable optimization of pre, post code in
Index: dbtoaster/compiler/alpha5/src/global/Driver.ml
===================================================================
--- dbtoaster/compiler/alpha5/src/global/Driver.ml	(revision 3174)
+++ dbtoaster/compiler/alpha5/src/global/Driver.ml	(working copy)
@@ -9,7 +9,7 @@
 (************ Language Names ************)
 type language_t =
    | Auto | SQL | Calc | MPlan | DistM3 | M3 | M3DM | K3 | IMP | CPP | Scala 
-   | Ocaml | Interpreter
+   | LMS  | Ocaml | Interpreter
 
 let languages =
    (* string     token         human-readable string         show in help?  *)
@@ -23,6 +23,7 @@
       "K3"     , (K3         , "K3 Program"                   , false);
       "IMP"    , (IMP        , "Abstract Imperative Program"  , false);
       "SCALA"  , (Scala      , "Scala Code"                   , true);
+      "LMS"          , (LMS        , "LMS-friendly Scala Code"        , false);
     (*"OCAML"  , (Ocaml      , "Ocaml Code"                   , false); *)
       "RUN"    , (Interpreter, "Ocaml Interpreter"            , false);
       "CPP"    , (CPP        , "C++ Code"                     , true);
@@ -59,15 +60,15 @@
             raise (Arg.Bad(dir^" already exists and is not a directory."))
    )
       
-let output s = 
+let output_static outfile_name outfile_handle s = 
    let fh = 
-      match !output_filehandle with 
+      match !outfile_handle with 
       | None -> 
          let fh = 
-            if !output_file = "-" then stdout
+            if !outfile_name = "-" then stdout
             else (
-               mk_path !output_file;
-               open_out !output_file )
+               mk_path !outfile_name;
+               open_out !outfile_name )
          in
             output_filehandle := Some(fh); fh
       | Some(fh) -> fh
@@ -75,6 +76,10 @@
       output_string fh s
 ;;
 
+let output_endline_static outfile_name outfile_handle s = output_static outfile_name outfile_handle (s^"\n");;
+      
+let output s = output_static output_file output_filehandle s;;
+
 let output_endline s = output (s^"\n");;
 
 let flush_output () = 
@@ -98,6 +103,10 @@
          "DELETE-ON-ZERO";
          "OPTIMIZE-PATTERNS";
       ];
+      (** -O4 **) [
+         "K3-NO-OPTIMIZE";
+         "LMS-OPTIMIZE";
+      ];
    ]
 let optimizations = 
    ListAsSet.union (ListAsSet.multiunion optimizations_by_level) [
@@ -169,6 +178,9 @@
    (  "-O3",
       (Arg.Unit(fun () -> opt_level := 3)),
       "       Produce the most efficient code possible");
+   (  "-O4",
+      (Arg.Unit(fun () -> opt_level := 4)),
+      "       Produce the upper most efficient code possible using LMS");
    (  "-D", 
       (Arg.String(ExternalCompiler.add_flag ~switch:"-D")),
       "macro Define a macro when invoking the second-stage compiler");
@@ -282,6 +294,7 @@
    | StageParseK3
  | K3Marker
    | StageOptimizeK3
+   | StageOptimizeLMS
    | StagePrintK3
    | StageK3ToTargetLanguage
  | FunctionalTargetMarker
@@ -314,7 +327,7 @@
       PlanMarker;  (* -> *) StagePlanToM3;
       M3Marker;    (* -> *) StageM3DomainMaintenance; StageM3ToK3; 
                             StageM3DMToK3;
-      K3Marker;    (* -> *) StageOptimizeK3; StageK3ToTargetLanguage;
+      K3Marker;    (* -> *) StageOptimizeK3; StageOptimizeLMS; StageK3ToTargetLanguage;
       FunctionalTargetMarker; StageImpToTargetLanguage; 
       ImperativeTargetMarker; 
    ]
@@ -351,6 +364,7 @@
       | K3     -> StagePrintK3::StageOptimizeK3::(stages_to K3Marker)
       | IMP    -> StagePrintImp::(stages_to FunctionalTargetMarker)
       | Scala  -> functional_stages ExternalCompiler.scala_compiler
+      | LMS      -> Debug.deactivate "LMS-OPTIMIZE"; StageOutputSource::(stages_to FunctionalTargetMarker)
       | Ocaml  -> functional_stages ExternalCompiler.ocaml_compiler
       | CPP    -> imperative_stages ExternalCompiler.cpp_compiler
          (* CPP is defined as a functional stage because the IMP implementation
@@ -799,7 +813,72 @@
 ;;
 module K3InterpreterCG = K3Compiler.Make(K3Interpreter.K3CG)
 module K3ScalaCompiler = K3Compiler.Make(K3Scalagen.K3CG)
+module K3LMSCompiler = K3Compiler.Make(K3Scalagen.K3CG_LMS)
+module K3ScalaLMSOptCompiler = K3Compiler.Make(K3Scalagen.K3CG_ScalaLMSOpt)
 ;;
+if (stage_is_active StageOptimizeLMS) then (
+   if (Debug.active "LMS-OPTIMIZE") then (
+      Debug.print "LOG-DRIVER" (fun () -> "Running Stage: OptimizeLMS");
+
+      let lms_source_code = [K3LMSCompiler.compile_query_to_string !k3_program] in
+      let outfile = ref (!output_file ^ "-lms.scala") in
+      let outfile_handle = (
+               mk_path !outfile;
+               open_out !outfile ) in
+      let outfile_handle_option = ref (Some(outfile_handle)) in
+      List.iter (output_endline_static outfile outfile_handle_option) lms_source_code;
+      flush outfile_handle;
+      print_endline ("Compiling LMS-friendly code: " ^ (!output_file ^ "-lms.scala"));
+
+      let a = Unix.fork () in
+      match a with
+         | 0 ->  ExternalCompiler.lms_compiler.ExternalCompiler.compile !outfile (!output_file ^ "-lmsopt")
+         | -1 -> Printf.printf "%s" "error accured on fork for compiling LMS code\n"
+         | _ -> let check_exit_status = (function
+            | Unix.WEXITED r -> r
+            | _ -> -1000) in
+            let childid, returncode = Unix.wait () in
+            Debug.print "LOG-SCALA" (fun () -> "Compiling LMS Code: parent process => " ^ (string_of_int (Unix.getpid ())));
+            Debug.print "LOG-SCALA" (fun () -> "Compiling LMS Code: child " ^ (string_of_int childid) ^ " closed with status code " ^ (string_of_int (check_exit_status returncode)));
+
+      print_endline ("Executing compiled LMS-friendly code: " ^ (!output_file ^ "-lmsopt.jar"));
+      
+      if Sys.file_exists (!output_file ^ "-lmscomp.scala") then
+         Sys.remove (!output_file ^ "-lmscomp.scala");
+      let syscall cmd = (
+         let ic, oc = Unix.open_process cmd in
+         let buf = Buffer.create 16 in
+         (try
+            while true do
+              Buffer.add_channel buf ic 1
+           done
+          with End_of_file -> ());
+         let _ = Unix.close_process (ic, oc) in
+         (Buffer.contents buf)
+      ) in
+
+      let read_file filename = 
+         let lines = ref [] in
+         let chan = open_in filename in
+         try
+           while true; do
+             lines := input_line chan :: !lines
+           done; []
+         with End_of_file ->
+           close_in chan;
+           List.rev !lines in
+      let _ = syscall ("java -classpath lib/dbt_scala/scala-library.jar:lib/dbt_scala/scala-compiler.jar:lib/dbt_scala/scala-reflect.jar:lib/dbt_scala/dbtlib.jar:lib/dbt_scala/lms.jar:lib/dbt_scala/toasterbooster.jar:" ^
+      (!output_file ^ "-lmsopt.jar") ^ " -Dscala.usejavacp=true scala.tools.nsc.MainGenericRunner org.dbtoaster.QueryGenerator " ^ (!output_file ^ "-lmscomp.scala")) in
+      let lms_optimized_triggers = read_file (!output_file ^ "-lmscomp.scala") in
+      Sys.remove (!output_file ^ "-lmscomp.scala");
+      source_code := !source_code @ lms_optimized_triggers;
+      if Sys.file_exists (!output_file ^ "-lms.scala") then
+         Sys.remove (!output_file ^ "-lms.scala");
+      if Sys.file_exists (!output_file ^ "-lmsopt.jar") then
+         Sys.remove (!output_file ^ "-lmsopt.jar");
+   )
+)
+;;
 if stage_is_active StageK3ToTargetLanguage then (
    Debug.print "LOG-DRIVER" (fun () -> "Running Stage: K3ToTargetLanguage");
    match !output_language with
@@ -832,9 +911,10 @@
                
       )   
       | Ocaml       -> bug "Ocaml codegen not implemented yet"
+      | LMS       -> 
+         source_code := !source_code @ [K3LMSCompiler.compile_query_to_string !k3_program]
       | Scala       -> 
-         source_code := [K3ScalaCompiler.compile_query_to_string !k3_program]
-         
+         source_code := !source_code @ [ (if (Debug.active "LMS-OPTIMIZE") then K3ScalaLMSOptCompiler.compile_query_to_string !k3_program else K3ScalaCompiler.compile_query_to_string !k3_program)]
          (* All imperative languages now produce IMP *)
       | IMP
       | CPP         -> 
@@ -867,8 +947,8 @@
 if stage_is_active StageImpToTargetLanguage then (
    Debug.print "LOG-DRIVER" (fun () -> "Running Stage: ImpToTargetLanguage");
    source_code := 
-      ImperativeCompiler.Compiler.compile_imp !imperative_opts
-                                              !imperative_program
+      !source_code @ (ImperativeCompiler.Compiler.compile_imp !imperative_opts
+                                              !imperative_program)
 )
 ;;
 
Index: dbtoaster/compiler/alpha5/src/util/ExternalCompiler.ml
===================================================================
--- dbtoaster/compiler/alpha5/src/util/ExternalCompiler.ml	(revision 3174)
+++ dbtoaster/compiler/alpha5/src/util/ExternalCompiler.ml	(working copy)
@@ -178,6 +178,35 @@
    )
 };;
 
+let lms_compiler = {
+   extension = ".scala";
+   compile = (fun in_file_name out_file_name ->
+    let out = out_file_name ^ ".jar" in
+    let scalac = "java" in
+
+    let flags = [
+      ""; "-Xmx3g";
+      "-classpath"; "lib/dbt_scala/scala-library.jar:lib/dbt_scala/scala-compiler.jar:lib/dbt_scala/scala-reflect.jar:lib/dbt_scala/dbtlib.jar:lib/dbt_scala/lms.jar:lib/dbt_scala/toasterbooster.jar";
+      "-Dscala.usejavacp=true"; "scala.tools.nsc.Main";
+      "-deprecation"; "-unchecked";
+      "-sourcepath"; "lib/dbt_scala/src";
+      "-optimise"; "-d"; out;
+    ]
+    in
+
+    let sourcefiles = [
+      in_file_name
+    ] in
+
+    let args = flags @ sourcefiles in
+    Debug.print "LOG-SCALA" (fun () -> 
+      ("scalac " ^ (ListExtras.string_of_list ~sep:" " (fun x->x) args)));
+    if Sys.file_exists out then
+      Sys.remove out;
+    Unix.execvp scalac (Array.of_list args)
+   )
+};;
+
 (**
    A dummy "compiler" that will error if you try to compile something with it.
 *)
Index: dbtoaster/compiler/alpha5/test/makefile
===================================================================
--- dbtoaster/compiler/alpha5/test/makefile	(revision 3174)
+++ dbtoaster/compiler/alpha5/test/makefile	(working copy)
@@ -19,8 +19,11 @@
 ifeq ($(TEST_SCALA), 1)
 	QUERY_TEST += -t scala $(SCALA_TEST_FLAGS)
 endif
+ifeq ($(TEST_SCALAOPT), 1)
+	QUERY_TEST += -t scalaopt $(SCALAOPT_TEST_FLAGS)
+endif
 ifeq ($(TEST_ALL), 1)
-	QUERY_TEST += -t all $(CPP_TEST_FLAGS) $(SCALA_TEST_FLAGS)
+	QUERY_TEST += -t all $(CPP_TEST_FLAGS) $(SCALA_TEST_FLAGS) $(SCALAOPT_TEST_FLAGS)
 endif
 
 FAST_QUERY_TEST=$(QUERY_TEST) -d weak-expr-equiv
@@ -302,7 +305,7 @@
 	@$(FAST_QUERY_TEST) brokervariance --dataset tiny
 	@$(FAST_QUERY_TEST) brokervariance
 	@$(FAST_QUERY_TEST) brokerspread --dataset tiny
-	@$(FAST_QUERY_TEST) brokerspread
+#	@$(FAST_QUERY_TEST) brokerspread
 	@$(FAST_QUERY_TEST) missedtrades --dataset tiny
 #	@$(FAST_QUERY_TEST) missedtrades
 	@$(FAST_QUERY_TEST) axfinder --dataset tiny
Index: dbtoaster/compiler/alpha5/test/scripts/query_test.rb
===================================================================
--- dbtoaster/compiler/alpha5/test/scripts/query_test.rb	(revision 3174)
+++ dbtoaster/compiler/alpha5/test/scripts/query_test.rb	(working copy)
@@ -242,6 +242,61 @@
   end
 end
 
+class ScalaOptUnitTest < GenericUnitTest
+  def run
+    unless $skip_compile then
+    dir = File.dirname("bin/queries/#{@qname}")
+    FileUtils.mkdir_p dir unless File::exists? dir;
+    File.delete("bin/queries/#{@qname}.jar") if 
+         File::exists?("bin/queries/#{@qname}.jar");
+      compile_cmd = 
+        "OCAMLRUNPARAM='#{$ocamlrunparam}';" +
+        $timeout_compile + 
+        (dbt_base_cmd + [
+        "-l","scala",
+        "-o","bin/queries/#{@qname}.scala",
+        "-O4",
+        "-c","bin/queries/#{@qname}",
+      ]).join(" ") + "  2>&1";
+      starttime = Time.now
+      system(compile_cmd) or raise "Compilation Error";
+      print "(Compile: #{(Time.now - starttime).to_i}s) "
+      $stdout.flush;
+    end
+    return if $compile_only;
+    starttime = Time.now;
+    IO.popen($timeout_exec +
+             "scala -J-Xmx2048M -J-XX:+HeapDumpOnOutOfMemoryError " +
+             "-classpath \"bin/queries/#{@qname}.jar#{$path_delim}" + 
+                          "lib/dbt_scala/dbtlib.jar\" " + 
+             "org.dbtoaster.RunQuery", "r") do |qin|
+      output = qin.readlines;
+      endtime = Time.now;
+      output = output.map { |l| l.chomp.strip }.join("");
+      @runtime = (endtime - starttime).to_f;
+      if /<runtime>(.*)<\/runtime>/ =~ output then
+        @runtime = ($1.to_f / 1000000.0).to_f;
+      end
+      
+      @toplevels.keys.each do |q| 
+        if /<#{q}[^>]*>(.*)<\/#{q}>/ =~ output then
+          result = $1;
+          case @toplevels[q][:type]
+            when :singleton then @toplevels[q][:result] = result.strip.to_f;
+            when :onelevel then @toplevels[q][:result] = CppDB.new(result);
+            else nil
+          end
+        else raise "Runtime Error"
+        end;
+      end
+    end
+  end
+
+  def to_s
+    "Scala Code generator"
+  end
+end
+
 class InterpreterUnitTest < GenericUnitTest
   def run
     cmd = "OCAMLRUNPARAM='#{$ocamlrunparam}';"+
@@ -327,9 +382,11 @@
         when 'cpp'         then tests.push CppUnitTest
         when 'interpreter' then tests.push InterpreterUnitTest
         when 'scala'       then tests.push ScalaUnitTest
+        when 'scalaopt'    then tests.push ScalaOptUnitTest
         when 'all'         then tests = [CppUnitTest, 
                                          InterpreterUnitTest, 
-                                         ScalaUnitTest]
+                                         ScalaUnitTest,
+                                         ScalaOptUnitTest]
       end
     when '-d' then $debug_flags.push(arg)
     when '--depth' then $depth = arg
