/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "query19_types.h"

namespace DBToaster { namespace Viewer { namespace query19 {

const char* var15_tuple::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t var15_tuple::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t var15_tuple::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->var0);
          this->__isset.var0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->var1);
          this->__isset.var1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t var15_tuple::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("var15_tuple");
  xfer += oprot->writeFieldBegin("var0", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->var0);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("var1", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->var1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* bids_elem::ascii_fingerprint = "2EB010665070FC89CB24AB9DA34D5F9D";
const uint8_t bids_elem::binary_fingerprint[16] = {0x2E,0xB0,0x10,0x66,0x50,0x70,0xFC,0x89,0xCB,0x24,0xAB,0x9D,0xA3,0x4D,0x5F,0x9D};

uint32_t bids_elem::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t11);
          this->__isset.t11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id11);
          this->__isset.id11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->broker_id11);
          this->__isset.broker_id11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->p11);
          this->__isset.p11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->v11);
          this->__isset.v11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t bids_elem::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("bids_elem");
  xfer += oprot->writeFieldBegin("t11", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->t11);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id11", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id11);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("broker_id11", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->broker_id11);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("p11", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->p11);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("v11", apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->v11);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
