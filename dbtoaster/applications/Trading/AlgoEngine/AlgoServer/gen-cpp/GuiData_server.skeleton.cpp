// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "GuiData.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

using namespace DBToaster::GuiData;

class GuiDataHandler : virtual public GuiDataIf {
 public:
  GuiDataHandler() {
    // Your initialization goes here
  }

  double getAsksDiff() {
    // Your implementation goes here
    printf("getAsksDiff\n");
  }

  double getBidsDiff() {
    // Your implementation goes here
    printf("getBidsDiff\n");
  }

  double getAsksTime() {
    // Your implementation goes here
    printf("getAsksTime\n");
  }

  double getBidsTime() {
    // Your implementation goes here
    printf("getBidsTime\n");
  }

  double getPrice() {
    // Your implementation goes here
    printf("getPrice\n");
  }

  double getMeanPrice() {
    // Your implementation goes here
    printf("getMeanPrice\n");
  }

  double getVariance() {
    // Your implementation goes here
    printf("getVariance\n");
  }

  int32_t getAmountStocks() {
    // Your implementation goes here
    printf("getAmountStocks\n");
  }

  int32_t getMoney() {
    // Your implementation goes here
    printf("getMoney\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<GuiDataHandler> handler(new GuiDataHandler());
  shared_ptr<TProcessor> processor(new GuiDataProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

