/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package DBToaster.Viewer.query19;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class var15_tuple implements TBase, java.io.Serializable, Cloneable, Comparable<var15_tuple> {
  private static final TStruct STRUCT_DESC = new TStruct("var15_tuple");
  private static final TField VAR0_FIELD_DESC = new TField("var0", TType.I32, (short)1);
  private static final TField VAR1_FIELD_DESC = new TField("var1", TType.I32, (short)2);

  public int var0;
  public static final int VAR0 = 1;
  public int var1;
  public static final int VAR1 = 2;

  // isset id assignments
  private static final int __VAR0_ISSET_ID = 0;
  private static final int __VAR1_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(VAR0, new FieldMetaData("var0", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(VAR1, new FieldMetaData("var1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(var15_tuple.class, metaDataMap);
  }

  public var15_tuple() {
  }

  public var15_tuple(
    int var0,
    int var1)
  {
    this();
    this.var0 = var0;
    setVar0IsSet(true);
    this.var1 = var1;
    setVar1IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public var15_tuple(var15_tuple other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.var0 = other.var0;
    this.var1 = other.var1;
  }

  @Override
  public var15_tuple clone() {
    return new var15_tuple(this);
  }

  public int getVar0() {
    return this.var0;
  }

  public var15_tuple setVar0(int var0) {
    this.var0 = var0;
    setVar0IsSet(true);
    return this;
  }

  public void unsetVar0() {
    __isset_bit_vector.clear(__VAR0_ISSET_ID);
  }

  // Returns true if field var0 is set (has been asigned a value) and false otherwise
  public boolean isSetVar0() {
    return __isset_bit_vector.get(__VAR0_ISSET_ID);
  }

  public void setVar0IsSet(boolean value) {
    __isset_bit_vector.set(__VAR0_ISSET_ID, value);
  }

  public int getVar1() {
    return this.var1;
  }

  public var15_tuple setVar1(int var1) {
    this.var1 = var1;
    setVar1IsSet(true);
    return this;
  }

  public void unsetVar1() {
    __isset_bit_vector.clear(__VAR1_ISSET_ID);
  }

  // Returns true if field var1 is set (has been asigned a value) and false otherwise
  public boolean isSetVar1() {
    return __isset_bit_vector.get(__VAR1_ISSET_ID);
  }

  public void setVar1IsSet(boolean value) {
    __isset_bit_vector.set(__VAR1_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case VAR0:
      if (value == null) {
        unsetVar0();
      } else {
        setVar0((Integer)value);
      }
      break;

    case VAR1:
      if (value == null) {
        unsetVar1();
      } else {
        setVar1((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case VAR0:
      return new Integer(getVar0());

    case VAR1:
      return new Integer(getVar1());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case VAR0:
      return isSetVar0();
    case VAR1:
      return isSetVar1();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof var15_tuple)
      return this.equals((var15_tuple)that);
    return false;
  }

  public boolean equals(var15_tuple that) {
    if (that == null)
      return false;

    boolean this_present_var0 = true;
    boolean that_present_var0 = true;
    if (this_present_var0 || that_present_var0) {
      if (!(this_present_var0 && that_present_var0))
        return false;
      if (this.var0 != that.var0)
        return false;
    }

    boolean this_present_var1 = true;
    boolean that_present_var1 = true;
    if (this_present_var1 || that_present_var1) {
      if (!(this_present_var1 && that_present_var1))
        return false;
      if (this.var1 != that.var1)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(var15_tuple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    var15_tuple typedOther = (var15_tuple)other;

    lastComparison = Boolean.valueOf(isSetVar0()).compareTo(isSetVar0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(var0, typedOther.var0);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetVar1()).compareTo(isSetVar1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(var1, typedOther.var1);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case VAR0:
          if (field.type == TType.I32) {
            this.var0 = iprot.readI32();
            setVar0IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VAR1:
          if (field.type == TType.I32) {
            this.var1 = iprot.readI32();
            setVar1IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetVar0()) {
      throw new TProtocolException("Required field 'var0' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetVar1()) {
      throw new TProtocolException("Required field 'var1' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(VAR0_FIELD_DESC);
    oprot.writeI32(this.var0);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(VAR1_FIELD_DESC);
    oprot.writeI32(this.var1);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("var15_tuple(");
    boolean first = true;

    sb.append("var0:");
    sb.append(this.var0);
    first = false;
    if (!first) sb.append(", ");
    sb.append("var1:");
    sb.append(this.var1);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // 'var0' is only checked in read() because it's a primitive and you chose the non-beans generator.
    // 'var1' is only checked in read() because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }

}

