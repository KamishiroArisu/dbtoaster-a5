SOURCE = \
	util/Util.ml \
	codegen/SourceCode.mli \
	codegen/SourceCode.ml \
	stages/ring/Ring.ml \
	stages/ring/Calculus.mli \
	stages/ring/Calculus.ml \
	stages/maps/M3.mli \
	stages/maps/M3.ml \
	stages/maps/M3Common.mli \
	stages/maps/M3Common.ml \
	stages/ring/Compiler.mli \
	stages/ring/Compiler.ml \
	stages/ring/CalcToM3.mli \
	stages/ring/CalcToM3.ml \
	stages/maps/M3Compiler.mli \
	stages/maps/M3Compiler.ml \
	stages/functional/K3.mli \
	stages/functional/K3.ml \
	stages/functional/K3Typechecker.mli \
	stages/functional/K3Typechecker.ml \
	stages/functional/K3Optimizer.mli \
	stages/functional/K3Optimizer.ml \
	stages/functional/K3Builder.mli \
	stages/functional/K3Builder.ml \
	stages/functional/K3Compiler.mli \
	stages/functional/K3Compiler.ml \
	stages/imperative/Imperative.mli \
	stages/imperative/Imperative.ml \
	stages/imperative/ImpBuilder.ml \
	stages/imperative/ImpCompiler.mli \
	stages/imperative/ImpCompiler.ml \
	lib/ocaml/SliceableMap.mli \
	lib/ocaml/SliceableMap.ml \
	lib/ocaml/Values.ml \
	lib/ocaml/Database.ml \
	lib/ocaml/Sources.ml \
	lib/ocaml/StandardAdaptors.ml \
	lib/ocaml/Runtime.ml \
	codegen/ocaml/M3Interpreter.ml \
	codegen/ocaml/M3OCamlgen.ml \
	codegen/ocaml/K3Interpreter.ml \
	codegen/plsql/K3Plsql.ml \
	codegen/ocaml/K3OCamlgen.ml


HEADER_ONLY_SOURCE = \
	stages/maps/M3Codegen.mli \
	stages/functional/K3Codegen.mli

# Generated bytecode source files (eg by ocamllex, ocamlyacc)
LEX_SOURCE  = parser/Sqllexer.ml parser/PartitionMapLexer.ml
YACC_SOURCE = parser/Sqlparser.ml parser/PartitionMapParser.ml
GENERATED_SOURCE = \
		$(subst .ml,.mli,$(YACC_SOURCE)) \
		$(YACC_SOURCE) $(LEX_SOURCE)
SOURCE += $(GENERATED_SOURCE)
GENERATED_HEADERS = \
    $(filter %.mli,$(GENERATED_SOURCE))

SOURCE += \
	util/DBTDebug.ml

# Compiled object code
ML_OBJ = $(subst .ml,.cmo,$(filter %.ml,$(SOURCE)))
MLI_OBJ = $(subst .mli,.cmi,$(filter %.mli,$(HEADER_ONLY_SOURCE))) \
					$(subst .mli,.cmi,$(filter %.mli,$(SOURCE)))
ML_OPT = $(subst .ml,.cmx,$(filter %.ml,$(SOURCE)))
MLI_OPT = $(subst .mli,.cmxi,$(filter %.mli,$(HEADER_ONLY_SOURCE)))\
					$(subst .mli,.cmxi,$(filter %.mli,$(SOURCE)))

C_OBJ = $(subst .ml,.o,$(filter %.ml,$(SOURCE)))

# Non-bytecode source that still needs to be cleaned
OTHER_SOURCE = \
	stages/Driver.ml \
	test/unit/m3_ex.ml \
	test/examples/vwap_m3_ex.ml \
	query.ml

OBJ_DEPS = $(MLI_OBJ) $(ML_OBJ)
OPT_DEPS = $(MLI_OPT) $(ML_OPT)

# Source files constituting the DBToaster library; These are required to compile
# code generated by dbtoaster.
#
# Note: stages/Driver.ml has a mirror of this list that needs manual synchronization.
RUNTIME = \
	util/Util.ml \
	stages/maps/M3.mli \
	stages/maps/M3.ml \
	stages/maps/M3Common.mli \
	stages/maps/M3Common.ml \
	lib/ocaml/SliceableMap.mli \
	lib/ocaml/SliceableMap.ml \
	lib/ocaml/Values.ml \
	lib/ocaml/Database.ml \
	lib/ocaml/Sources.ml \
	lib/ocaml/StandardAdaptors.ml \
	lib/ocaml/Runtime.ml


RUNTIME_ML_OBJ = $(subst .ml,.cmo,$(filter %.ml,$(RUNTIME)))
RUNTIME_MLI_OBJ = $(subst .mli,.cmi,$(filter %.mli,$(RUNTIME)))

RUNTIME_ML_OPT = $(subst .ml,.cmx,$(filter %.ml,$(RUNTIME)))
RUNTIME_MLI_OPT = $(subst .mli,.cmxi,$(filter %.mli,$(RUNTIME)))

RUNTIME_OBJ_DEPS = $(RUNTIME_MLI_OBJ) $(RUNTIME_ML_OBJ)
RUNTIME_OPT_DEPS = $(RUNTIME_MLI_OPT) $(RUNTIME_ML_OPT)

ML_OBJ_TARGETS = $(ML_OBJ) $(filter-out $(ML_OBJ), $(RUNTIME_ML_OBJ)) 
MLI_OBJ_TARGETS = $(MLI_OBJ) $(filter-out $(MLI_OBJ), $(RUNTIME_MLI_OBJ)) 
ML_OPT_TARGETS = $(ML_OPT) $(filter-out $(ML_OPT), $(RUNTIME_ML_OPT)) 
MLI_OPT_TARGETS = $(MLI_OPT) $(filter-out $(MLI_OPT), $(RUNTIME_MLI_OPT)) 

# Generated files that need to be cleaned up
CLEAN_OBJ = \
	$(ML_OBJ) $(subst .cmo,.cmi,$(ML_OBJ)) $(ML_OPT) $(C_OBJ) \
	$(RUNTIME_ML_OBJ) $(RUNTIME_MLI_OBJ) $(RUNTIME_ML_OPT) $(RUNTIME_MLI_OPT) \
	$(subst .mli,.cmi,$(HEADER_ONLY_SOURCE))\
	$(subst .mli,.cmxi,$(HEADER_ONLY_SOURCE))\
	$(subst .ml,.cmi,$(OTHER_SOURCE)) $(subst .ml,.cmo,$(OTHER_SOURCE)) \
	$(subst .ml,.cmx,$(OTHER_SOURCE)) $(subst .ml,.o,$(OTHER_SOURCE)) \
	$(GENERATED_SOURCE) \
	dbtoaster dbtoaster_top m3_ex vwap query

INCLUDE_DIR = \
	-I util/ \
	-I stages/ \
	-I stages/ring/ \
	-I stages/maps/ \
	-I stages/functional/ \
	-I stages/imperative/ \
	-I codegen/ocaml/ \
	-I codegen/ \
	-I codegen/plsql/ \
	-I parser/ \
	-I lib/ocaml
INCLUDE_OBJ = \
	str.cma \
	unix.cma 
INCLUDE_OPT = $(subst .cma,.cmxa,$(INCLUDE_OBJ))
 
OC_FLAGS = $(INCLUDE_DIR) $(INCLUDE_OBJ) -g
OOPT_FLAGS = $(INCLUDE_DIR) $(INCLUDE_OPT) \
						 -ccopt -O3 -nodynlink -unsafe -noassert
ODEP_FLAGS = $(INCLUDE_DIR)

DEBUG_APP=sh -c 'echo ==== $$1 ====; ./dbtoaster_top $(INCLUDE_DIR) $$1' --

all: deps dbtoaster_top dbtoaster

.PHONY: all driver top test runtop clean deps 
	
driver: dbtoaster

top: dbtoaster_top

$(ML_OBJ_TARGETS) : %.cmo : %.ml
	@echo Compiling $*
	@ocamlc $(OC_FLAGS) -c $<

$(MLI_OBJ_TARGETS) : %.cmi : %.mli
	@echo Compiling Header $*
	@ocamlc $(OC_FLAGS) -c $<

$(ML_OPT_TARGETS) : %.cmx : %.ml
	@echo Compiling Optimized $*
	@ocamlopt $(OOPT_FLAGS) -c $<

$(MLI_OPT_TARGETS) : %.cmxi : %.mli
	@echo Compiling Optimized Header $*
	@ocamlc $(OC_FLAGS) -c $<

$(YACC_SOURCE) : %.ml : %.mly
	@echo Building $*
	@ocamlyacc $<

$(LEX_SOURCE) : %.ml : %.mll
	@echo Building $*
	@ocamllex $<

$(GENERATED_HEADERS) : %.mli : %.ml

dbtoaster_top: $(OBJ_DEPS) $(RUNTIME_OBJ_DEPS)
	@echo Linking dbtoaster_top
	@ocamlmktop $(OC_FLAGS) -o dbtoaster_top $(ML_OBJ)

dbtoaster: $(OBJ_DEPS) stages/Driver.ml $(RUNTIME_OPT_DEPS)
	@echo Linking dbtoaster
	@ocamlc $(OC_FLAGS) -o dbtoaster $(ML_OBJ) stages/Driver.ml

benchmark: $(OPT_DEPS)
	ocamlopt $(OOPT_FLAGS) -o m3_ex $(ML_OPT) test/unit/m3_ex.ml

##############

test/sql/postgres/%: test/sql/postgres/%.sql 
	sed "s/@@PATH@@/`pwd | sed 's/\//\\\\\//g'`/" test/sql/postgres/$*.sql > psqltmp.sql
	psql -f psqltmp.sql
	rm psqltmp.sql

# TPC-H Postgres execution (assumes passwordless postgres access)
test/sql/tpch/postgres/%: test/sql/tpch/postgres/%.sql 
	sed "s/@@PATH@@/`pwd | sed 's/\//\\\\\//g'`/" test/sql/tpch/postgres/$*.sql > psqltmp.sql
	psql -f psqltmp.sql
	rm psqltmp.sql

test/sql/finance/postgres/%: test/sql/finance/postgres/%.sql 
	sed "s/@@PATH@@/`pwd | sed 's/\//\\\\\//g'`/" test/sql/finance/postgres/$*.sql > psqltmp.sql
	psql -f psqltmp.sql
	rm psqltmp.sql

test/sql/simple/postgres/%: test/sql/simple/postgres/%.sql 
	sed "s/@@PATH@@/`pwd | sed 's/\//\\\\\//g'`/" test/sql/simple/postgres/$*.sql > psqltmp.sql
	psql -f psqltmp.sql
	rm psqltmp.sql

## Unit tests
test: top
	@$(DEBUG_APP) test/unit/unroly.ml
	@$(DEBUG_APP) test/unit/roly.ml
	@$(DEBUG_APP) test/unit/FormulaTest.ml
	@$(DEBUG_APP) test/unit/TermTest.ml
	@$(DEBUG_APP) test/unit/calctom3.ml
	@$(DEBUG_APP) test/unit/CompilerTest.ml
	@$(DEBUG_APP) test/unit/compiler.ml
	@$(DEBUG_APP) test/unit/m3_ex.ml
#	@$(DEBUG_APP) test/unit/k3_ocaml.ml
#	@$(DEBUG_APP) test/unit/k3_ocaml_rst.ml
#	@$(DEBUG_APP) test/unit/k3_ocaml_vwap.ml
#	@$(DEBUG_APP) test/unit/k3_ocaml_sgl.ml
#	@$(DEBUG_APP) test/unit/k3_ocaml_queries.ml
	@$(DEBUG_APP) test/examples/AxFinder.ml
	@$(DEBUG_APP) test/examples/CustSupp.ml
	@$(DEBUG_APP) test/examples/MyTpchTest.ml
	@$(DEBUG_APP) test/examples/Partner.ml
	@$(DEBUG_APP) test/examples/Ssb-simple.ml
#	@$(DEBUG_APP) test/examples/Ssb.ml
	@$(DEBUG_APP) test/examples/TpchQ12.ml
#	@$(DEBUG_APP) test/examples/TpchQ18.ml
#	@$(DEBUG_APP) test/examples/TpchQ22.ml
#	@$(DEBUG_APP) test/examples/VwapTest.ml

ok_test: top
	@$(DEBUG_APP) test/unit/compiler.ml

## SQL compilation Tests
test/sql/%: test/sql/%.sql dbtoaster
	./dbtoaster $< -c test/sql/$* -o test/sql/$*.cpp #-d compile-with-gdb

## Query execution tests
vwaptest: $(OPT_DEPS)
	ocamlopt $(OOPT_FLAGS) -ccopt -O3 -o test/qp/vwap_m3 $(ML_OPT) \
		test/qp/vwap_m3_ex.ml

qptest: test/sql/finance/vwap vwaptest
	@echo "Testing VWAP query (M3, SQL)... "
	@echo "Running VWAP M3..." && env OCAMLRUNPARAM="b" test/qp/vwap_m3 -validate \
		test/data/vwap5k.csv test/qp/output/vwap5k.m3 > /dev/null
	@echo "Running VWAP SQL..." && \
		test/sql/finance/vwap -r value -o test/qp/output/vwap5k.dbt > /dev/null
	@echo "Comparing... "
	@diff test/qp/output/vwap5k.m3 test/qp/output/vwap5k_valid \
			>test/qp/output/m3.diff || echo "==> M3 Failed!"
	@diff test/qp/output/vwap5k.dbt test/qp/output/vwap5k_valid \
			>test/qp/output/sql.diff || echo "==> SQL Failed!"
	@test -s test/qp/output/m3.diff -o -s test/qp/output/sql.diff && \
		echo "==> Failed!" || echo "==> Success!"

## Examples
vwap: $(OPT_DEPS)
	ocamlopt $(OOPT_FLAGS) -ccopt -O3 -o vwap $(ML_OPT) \
		test/examples/vwap_m3_ex.ml

query: $(OPT_DEPS) query.ml
	ocamlopt $(OOPT_FLAGS) -ccopt -O3 -nodynlink -unsafe -noassert -o query str.cmxa unix.cmxa $(ML_OPT) query.ml


## Top-level
runtop: top
	./dbtoaster_top $(INCLUDE_DIR)

## Cleanup
clean:
	rm -f $(CLEAN_OBJ)
	for d in test/sql test/sql/finance test/sql/tpch test/sql/simple; do \
		for i in $$d/*.sql; do bn=`basename $$i .sql`; \
			for j in .ml .cmo .cmi .cmx .cmxi .o ""; do rm -f $$d/$$bn$$j; done;\
		done \
	done
	for j in .cmo .cmi .cmx .cmxi .o; do rm -f test/qp/*$$j; done; \
		rm -f test/qp/output/vwap5k.* test/qp/output/*.diff test/qp/vwap_m3
	rm -f makefile.deps

deps: makefile.deps

makefile.deps: 
	ocamldep $(ODEP_FLAGS) $(filter %.ml,$(SOURCE)) > makefile.deps

include makefile.deps
# ocamldep doesn't handle a bunch of deps properly
stages/maps/M3Codegen.cmi: stages/maps/M3Common.cmo
stages/maps/M3Codegen.cmxi: stages/maps/M3Common.cmx
stages/maps/M3Common.cmo: util/Util.cmo stages/maps/M3.cmo 
stages/maps/M3Common.cmx: util/Util.cmx stages/maps/M3.cmx
stages/functional/K3Codegen.cmi: stages/ring/Calculus.cmo stages/functional/K3.cmo
stages/functional/K3Codegen.cmxi: stages/ring/Calculus.cmx stages/functional/K3.cmx
