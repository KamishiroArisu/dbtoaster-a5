CREATE TEMPORARY TABLE R_TMP(A bigint, B bigint);
CREATE TEMPORARY TABLE S_TMP(B bigint, C bigint);
CREATE TEMPORARY TABLE T_TMP(C bigint, D bigint);

CREATE TEMPORARY TABLE results_tmp(sum_a_d bigint);
INSERT INTO results_tmp VALUES (0);

CREATE FUNCTION update_results_r() RETURNS trigger AS $$
  DECLARE
    old_result bigint := (SELECT * FROM results_tmp);
    other bigint := (SELECT sum(D) FROM S_TMP,T_TMP 
                     WHERE T_TMP.C = S_TMP.C AND S_TMP.B = NEW.B);
  BEGIN
    DELETE FROM results_tmp;
    INSERT INTO results_tmp VALUES (
      old_result + (CASE WHEN other IS NULL THEN 0 ELSE other END) * NEW.A
    );
    RETURN NEW;
  END
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_results_r BEFORE INSERT ON R_TMP
  FOR EACH ROW EXECUTE PROCEDURE update_results_r();

CREATE FUNCTION update_results_s() RETURNS trigger AS $$
  DECLARE
    old_result bigint := (SELECT * FROM results_tmp);
    other bigint := (SELECT sum(A*D) FROM R_TMP,T_TMP 
                     WHERE R_TMP.B = NEW.B AND T_TMP.C = NEW.C);
  BEGIN
    DELETE FROM results_tmp;
    INSERT INTO results_tmp VALUES (
      old_result + 
      (CASE WHEN other IS NULL THEN 0 ELSE other END)
    );
    RETURN NEW;
  END
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_results_s BEFORE INSERT ON S_TMP
  FOR EACH ROW EXECUTE PROCEDURE update_results_s();

CREATE FUNCTION update_results_t() RETURNS trigger AS $$
  DECLARE
    old_result bigint := (SELECT * FROM results_tmp);
    other bigint := (SELECT sum(A) FROM R_TMP,S_TMP 
                     WHERE R_TMP.B = S_TMP.B AND S_TMP.C = NEW.C);
  BEGIN
    DELETE FROM results_tmp;
    INSERT INTO results_tmp VALUES (
      old_result + 
      (CASE WHEN other IS NULL THEN 0 ELSE other END) * NEW.D
    );
    RETURN NEW;
  END
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_results_t BEFORE INSERT ON T_TMP
  FOR EACH ROW EXECUTE PROCEDURE update_results_t();

\timing
COPY R_TMP FROM '@@PATH@@/test/data/r.dat' WITH DELIMITER ',';
COPY S_TMP FROM '@@PATH@@/test/data/s.dat' WITH DELIMITER ',';
COPY T_TMP FROM '@@PATH@@/test/data/t.dat' WITH DELIMITER ',';
\timing

SELECT * FROM results_tmp;

DROP FUNCTION update_results_r() CASCADE;
DROP FUNCTION update_results_s() CASCADE;
DROP FUNCTION update_results_t() CASCADE;