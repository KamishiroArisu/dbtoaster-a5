create window Bids.win:keepall() as 
  (timestamp double, orderId int, brokerId int, price double, volume double);

create window Asks.win:keepall() as 
  (timestamp double, orderId int, brokerId int, price double, volume double);

/* Dispatching */
insert into InsertBids
  select timestamp, orderId, brokerId, price, volume from Dispatch
  where streamName = "BIDS" and eventType = 1;

insert into DeleteBids
  select timestamp, orderId, brokerId, price, volume from Dispatch
  where streamName = "BIDS" and eventType = 0;

insert into InsertAsks
  select timestamp, orderId, brokerId, price, volume from Dispatch
  where streamName = "ASKS" and eventType = 1;

insert into DeleteAsks
  select timestamp, orderId, brokerId, price, volume from Dispatch
  where streamName = "ASKS" and eventType = 0;

/* Start of query */
insert into Bids
  select timestamp, orderId, brokerId, price, volume from InsertBids;

on DeleteBids as e
  delete from Bids as b
  where b.timestamp = e.timestamp
  and   b.orderId = e.orderId
  and   b.brokerId = e.brokerId;

insert into Asks
  select timestamp, orderId, brokerId, price, volume from InsertAsks;

on DeleteAsks as e
  delete from Asks as a
  where a.timestamp = e.timestamp
  and   a.orderId = e.orderId
  and   a.brokerId = e.brokerId;

insert into TableChanged select 1 as bids, 1 as evt from InsertBids;
insert into TableChanged select 1 as bids, 0 as evt from DeleteBids;
insert into TableChanged select 0 as bids, 1 as evt from InsertAsks;
insert into TableChanged select 0 as bids, 0 as evt from DeleteAsks;

create variable int current_update = 0;
on TableChanged set current_update = current_update+1;
 
insert into SubqueryTAV
  select current_update+1 as tid, sum(a1.volume) as tav
  from TableChanged as t unidirectional, Asks as a1;

insert into SubqueryTBV
  select S1.tid as tid, S1.tav as tav, sum(b1.volume) as tbv
  from SubqueryTAV as S1 unidirectional, Bids as b1
  group by S1.tid, S1.tav;

insert into ReplayAsks
  select S1.tid as tid, S1.tav as tav, S1.tbv as tbv,
         Asks.price as ap, Asks.volume as av
  from SubqueryTBV as S1 unidirectional, Asks;

insert into FilteredAsks
  select a.tid as tid, a.tbv as tbv, a.ap as ap, a.av as av
  from ReplayAsks as a unidirectional, Asks as a2
  where a2.price > a.ap
  group by a.tid, a.tav, a.tbv, a.ap, a.av
  having 0.25*a.tav > sum(a2.volume);

insert into ReplayBids
  select a.tid as tid, a.tbv as tbv, a.ap as ap, a.av as av,
         b.brokerId as brokerId, b.price as bp, b.volume as bv
  from FilteredAsks as a unidirectional, Bids as b;

insert into FilteredBids
  select b.tid as tid, b.ap as ap, b.av as av,
         b.brokerId as brokerId, b.bp as bp, b.bv as bv
  from ReplayBids as b unidirectional, Bids as b2
  where b2.price > b.bp
  group by b.tid, b.tbv, b.ap, b.av, b.brokerId, b.bp, b.bv
  having 0.25*b.tbv > sum(b2.volume);

/* manage an aggregation window for partials. See vwap for more details */
create window AggOuter.win:keepall() as
  (tid int, brokerId int, mst double, sz long);

insert into AggOuter
  select tid, brokerId, sum(ap*av-(bp*bv)) as mst, count(*) as sz
  from FilteredBids.win:ext_timed(tid, 1 msec) as S
  group by brokerId;
  
/* We have a new invocation, produce results for any prior invocations before
   deleting their partials.
 */ 
on AggOuter(sz=1) as e
  select current_timestamp() as t, w.tid as tid, max(w.mst) as mst
  from AggOuter as w
  where w.tid < e.tid
  group by w.tid;

/* We are starting a new invocation, delete results for prior ones.
   This ensures that only the current invocation is active in AggOuter.
 */
on AggOuter(sz=1) as e delete from AggOuter as w where w.tid < e.tid;

/* We have a new partial result for the current invocation,
   delete prior partials for the current invocation. This ensures the query
   produces a single aggregate result for a window.
 */
on AggOuter(sz>1) as e
  delete from AggOuter as w
  where w.tid = e.tid and w.sz < e.sz;
