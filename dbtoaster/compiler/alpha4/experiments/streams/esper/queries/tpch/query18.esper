create window Lineitem.win:keepall() as InsertLineitem;
create window Orders.win:keepall()   as InsertOrders;
create window Customer.win:keepall() as InsertCustomer;

insert into Lineitem select * from InsertLineitem;
insert into Orders   select * from InsertOrders;
insert into Customer select * from InsertCustomer;

on Lineitem insert into TableChanged select 1;
on Orders   insert into TableChanged select 1;
on Customer insert into TableChanged select 1;

create variable int current_update = 0;
on TableChanged set current_update = current_update+1;

insert into Subquery1
  select current_update as tid,
         l3.orderkey as orderkey, sum(l3.quantity) as sumq
  from TableChanged as t unidirectional, Lineitem as l3
  group by l3.orderkey;
  
insert into Subquery2
  select s.tid, l2.orderkey as orderkey, count(l2.orderkey) as cnt
  from Subquery1 as s unidirectional, Lineitem as l2
  where s.orderkey = l2.orderkey
  and   100 < s.sumq
  group by s.tid, l2.orderkey;

/* This query can produce multiple results for each customer, since we are
   streaming the subquery based on orderkeys. Given each customer can place
   many orders, and that this query will produce an aggregate result for each
   order, we need to perform a final aggregation per customer.
 */

insert into OrderAggregates
  select s.tid as tid,
         c.custkey as custkey, sum(l1.quantity) as sumq
  from  Subquery2 as s unidirectional,
        Customer as c, Orders as o, Lineitem as l1
  where s.orderkey = l1.orderkey
  and   1 <= s.cnt
  and   c.custkey = o.custkey
  and   o.orderkey = l1.orderkey
  group by s.tid, c.custkey;
  
create window AggOuter.win:keepall()
  as (tid int, ck long, sumq double, sz long);

insert into AggOuter
  select tid, custkey as ck, sum(sumq) as sumq, count(*) as sz
  from OrderAggregates.win:ext_timed(tid, 1 msec) group by custkey;

/* We have a new invocation, produce results for any prior invocations before
   deleting their partials.
 */ 
on AggOuter(sz=1) as e
  select current_timestamp() as t, w.tid as tid, w.ck, max(w.sumq) as sumq
  from AggOuter as w
  where w.tid < e.tid
  group by w.tid, w.ck;

/* We are starting a new invocation, delete results for prior ones.
   This ensures that only the current invocation is active in AggOuter.
 */
on AggOuter(sz=1) as e delete from AggOuter as w where w.tid < e.tid;

/* We have a new partial result for the current invocation,
   delete prior partials for the current invocation. This ensures the query
   produces a single aggregate result for a window.
 */
on AggOuter(sz>1) as e
  delete from AggOuter as w
  where w.tid = e.tid and w.sz < e.sz;

/* Progress stream */
insert into ProgressCounter
  select current_timestamp() as t, current_update as tid
  from TableChanged where (current_update % 20) = 0;
