CREATE SCHEMA LineitemSchema (
  orderkey       int,
  partkey        int,
  suppkey        int,
  linenumber     int,
  quantity       double,
  extendedprice  double,
  discount       double,
  tax            double,
  returnflag     string, -- text(1)
  linestatus     string, -- text(1)
  shipdate       string, -- date
  commitdate     string, -- date
  receiptdate    string, -- date
  shipinstruct   string, -- text
  shipmode       string, -- text
  comment        string  -- text
);

CREATE SCHEMA OrdersSchema (
  orderkey       int,
  custkey        int,
  orderstatus    string, -- text(1)
  totalprice     double,
  orderdate      string, -- date
  orderpriority  string, -- text
  clerk          string, -- text
  shippriority   int,
  comment        string  -- text
);

CREATE SCHEMA CustomerSchema (
  custkey      int,
  name         string, -- text
  address      string, -- text
  nationkey    int,
  phone        string, -- text
  acctbal      double,
  mktsegment   string, -- text
  comment      string  -- text
);


/* All possible TPCH input streams. Trim to your query. */

CREATE INPUT STREAM InsertLineitem LineitemSchema;
CREATE INPUT STREAM InsertOrders   OrdersSchema;
CREATE INPUT STREAM InsertCustomer CustomerSchema;

CREATE INPUT STREAM DeleteLineitem LineitemSchema;
CREATE INPUT STREAM DeleteOrders   OrdersSchema;
CREATE INPUT STREAM DeleteCustomer CustomerSchema;


/* Main memory TPCH tables */
CREATE MEMORY TABLE Lineitem LineitemSchema PRIMARY KEY (orderkey, linenumber);
CREATE MEMORY TABLE Orders   OrdersSchema   PRIMARY KEY (orderkey);
CREATE MEMORY TABLE Customer CustomerSchema PRIMARY KEY (custkey);


/* Table change notification streams */
CREATE SCHEMA SLineitemSchema (tid int, l  LineitemSchema);
CREATE SCHEMA SOrdersSchema   (tid int, o  OrdersSchema);
CREATE SCHEMA SCustomerSchema (tid int, c  CustomerSchema);
 
/* Pre-update serialized streams */ 
CREATE STREAM SInsertLineitem SLineitemSchema;
CREATE STREAM SInsertOrders   SOrdersSchema;
CREATE STREAM SInsertCustomer SCustomerSchema;

CREATE STREAM SDeleteLineitem SLineitemSchema;
CREATE STREAM SDeleteOrders   SOrdersSchema;
CREATE STREAM SDeleteCustomer SCustomerSchema;

/* Post-update serialized streams */
CREATE STREAM LineitemInserted SLineitemSchema;
CREATE STREAM OrdersInserted   SOrdersSchema;
CREATE STREAM CustomerInserted SCustomerSchema;

CREATE STREAM LineitemDeleted  SLineitemSchema;
CREATE STREAM OrdersDeleted    SOrdersSchema;
CREATE STREAM CustomerDeleted  SCustomerSchema;


/* Tuple identification across union of input streams */
CREATE SCHEMA TaggedInputs (evt int, tag int, l Lineitem, o Orders, c Customer);
CREATE STREAM MultiplexedInputs TaggedInputs AS
      SELECT 0 as evt, 1 as tag, Lineitem as l  FROM InsertLineitem
UNION SELECT 1 as evt, 1 as tag, Lineitem as l  FROM DeleteLineitem
UNION SELECT 0 as evt, 2 as tag, Orders as o    FROM InsertOrders
UNION SELECT 1 as evt, 2 as tag, Orders as o    FROM DeleteOrders
UNION SELECT 0 as evt, 3 as tag, Customer as c  FROM InsertCustomer
UNION SELECT 1 as evt, 3 as tag, Customer as c  FROM DeleteCustomer;

/* Lockset for serial execution across updates and queries. */
CREATE LOCKSET InputLock (i int);
CREATE STREAM InputLocked TaggedInputs;
LOCK InputLock ON 0 FROM MultiplexedInputs INTO InputLocked; 

/* Counter for barriering */
DECLARE Counter int DEFAULT 0;
CREATE STREAM UpdateCounter (i int);
UPDATE Counter FROM (SELECT i FROM UpdateCounter);
SELECT Counter+1 as i FROM InputLocked INTO UpdateCounter;


/* Partition into serialized streams after locking */
SELECT i as tid, l  FROM InputLocked WHERE evt = 0 AND tag = 1 INTO SInsertLineitem;
SELECT i as tid, o  FROM InputLocked WHERE evt = 0 AND tag = 2 INTO SInsertOrders;
SELECT i as tid, c  FROM InputLocked WHERE evt = 0 AND tag = 3 INTO SInsertCustomer;

SELECT i as tid, l  FROM InputLocked WHERE evt = 1 AND tag = 1 INTO SDeleteLineitem;
SELECT i as tid, o  FROM InputLocked WHERE evt = 1 AND tag = 2 INTO SDeleteOrders;
SELECT i as tid, c  FROM InputLocked WHERE evt = 1 AND tag = 3 INTO SDeleteCustomer;


/* Maintain TPCH tables */
INSERT INTO Lineitem SELECT l.* FROM SInsertLineitem
RETURNING SInsertLineitem.* INTO LineitemInserted;

INSERT INTO Orders SELECT o.* FROM SInsertOrders
RETURNING SInsertOrders.* INTO OrdersInserted;

INSERT INTO Customer SELECT c.* FROM SInsertCustomer
RETURNING SInsertCustomer.* INTO CustomerInserted;

DELETE FROM Lineitem USING SDeleteLineitem
WHERE SDeleteLineitem.l.orderkey = Lineitem.orderkey
  AND SDeleteLineitem.l.brokerId = Lineitem.linenumber
RETURNING SDeleteLineitem.* INTO LineitemDeleted;

DELETE FROM Orders USING SDeleteOrders
WHERE SDeleteOrders.o.orderkey = Orders.orderkey
RETURNING SDeleteOrders.* INTO OrdersDeleted;

DELETE FROM Customer USING SDeleteCustomer
WHERE SDeleteCustomer.c.custkey = Customer.custkey
RETURNING SDeleteCustomer.* INTO CustomerDeleted;


/* Query body. */
CREATE STREAM LineitemUpdated AS SELECT * FROM LineitemInserted UNION LineitemDeleted;
CREATE STREAM OrdersUpdated   AS SELECT * FROM OrdersInserted   UNION OrdersDeleted;
CREATE STREAM CustomerUpdated AS SELECT * FROM CustomerInserted UNION CustomerDeleted;

/* Delta joins */

-- stream L join O join C
CREATE STREAM LjoinO AS
SELECT L.tid, O.orderkey, O.custkey, O.orderdate, O.shippriority,
       L.l.extendedprice*(1-L.l.discount) as etomd
FROM  LineitemUpdated as L, Orders as O
WHERE L.l.orderkey = O.orderkey
AND   O.orderdate < "1995-03-15"
AND   L.l.shipdate > "1995-03-15";

CREATE STREAM LineitemJoin AS
SELECT LO.tid, LO.orderkey, LO.orderdate, LO.shippriority,
          LO.etomd*count() as etomd
FROM  LjoinO AS LO, Customer AS C
WHERE LO.custkey = C.custkey
AND   C.mktsegment = "BUILDING";
   
CREATE METRONOME LineitemClock (t, 5);

CREATE STREAM LineitemGroups AS
SELECT Counter+1 as tid, O.orderkey, O.orderdate, O.shippriority, 0 as etomd
FROM LineitemClock, Orders as O
GROUP BY O.orderkey, O.orderdate, O.shippriority;

CREATE STREAM LineitemFlusher AS LineitemJoin UNION LineitemGroups;
 
CREATE STREAM LineitemResult AS
SELECT orderkey, orderdate, shippriority, sum(etomd) as etomd
FROM LineitemFlusher[SIZE 1 ADVANCE 1 ON tid] AS S
GROUP BY orderkey, orderdate, shippriority;


-- stream O join L join C
CREATE STREAM OjoinL AS
SELECT O.o.tid, O.o.orderkey, O.o.custkey, O.o.orderdate, O.o.shippriority,
       sum(L.extendedprice*(1-L.discount)) as etomd
FROM  OrdersUpdated as O, Lineitem as L
WHERE L.orderkey = O.o.orderkey
AND   O.o.orderdate < "1995-03-15"
AND   L.shipdate > "1995-03-15";

CREATE STREAM OrderJoin AS
SELECT LO.tid, LO.orderkey, LO.orderdate, LO.shippriority,
          LO.etomd*count() as etomd
FROM  OjoinL AS LO, Customer AS C
WHERE LO.custkey = C.custkey
AND   C.mktsegment = "BUILDING";
   
CREATE METRONOME OrderClock (t, 5);

CREATE STREAM OrderGroups AS
SELECT Counter+1 as tid, O.orderkey, O.orderdate, O.shippriority, 0 as etomd
FROM OrderClock, Orders as O
GROUP BY O.orderkey, O.orderdate, O.shippriority;

CREATE STREAM OrderFlusher AS OrderJoin UNION OrderGroups;

CREATE STREAM OrdersResult AS
SELECT orderkey, orderdate, shippriority, sum(etomd) as etomd
FROM OrderFlusher[SIZE 1 ADVANCE 1 ON tid] AS S
GROUP BY orderkey, orderdate, shippriority;


-- stream C join O join L
CREATE STREAM CjoinO AS
SELECT C.c.tid, O.orderkey, O.orderdate, O.shippriority, count() as numO 
FROM  CustomerUpdated as C, Orders as O
WHERE C.c.custkey = O.custkey
AND   C.c.mktsegment = "BUILDING"
AND   O.orderdate < "1995-03-15"
GROUP BY O.orderkey, O.orderdate, O.shippriority;

CREATE STREAM CustomerJoin AS
SELECT CO.tid, CO.orderkey, CO.orderdate, CO.shippriority,
          CO.numO*sum(L.extendedprice*(1-L.discount)) as etomd
FROM CjoinO as CO, Lineitem AS L
WHERE CO.orderkey = L.orderkey
AND   L.shipdate > "1995-03-15";

CREATE METRONOME CustomerClock (t, 5);

CREATE STREAM CustomerGroups AS
SELECT Counter+1 as tid, O.orderkey, O.orderdate, O.shippriority, 0 as etomd
FROM CustomerClock, Orders as O
GROUP BY O.orderkey, O.orderdate, O.shippriority;

CREATE STREAM CustomerFlusher AS CustomerJoin UNION CustomerGroups;

CREATE STREAM CustomerResult AS
SELECT orderkey, orderdate, shippriority, sum(etomd) as etomd
FROM CustomerFlusher[SIZE 1 ADVANCE 1 ON tid] AS S
GROUP BY orderkey, orderdate, shippriority;


-- Merge delta query results.
CREATE STREAM LockedResult AS
SELECT now() as t, * FROM LineitemResult UNION OrdersResult UNION CustomerResult;

CREATE STREAM Result (t timestamp, orderkey int, orderdate string,
                      shippriority int, etomd double);
UNLOCK InputLock ON 0 FROM LockedResult INTO Result;


/* Load data. */
CREATE STREAM FileEvents;

APPLY JAVA "com.streambase.sb.adapter.csvreader.CSVReader"
  (FileName="lineitem.tbl", Delimiter="|", StartEventPort="true", Schema=Lineitem)
  INTO InsertLineitem, FileEvents;
  
APPLY JAVA "com.streambase.sb.adapter.csvreader.CSVReader"
  (FileName="orders.tbl", Delimiter="|", StartEventPort="true", Schema=Orders)
  INTO InsertOrders, FileEvents;

APPLY JAVA "com.streambase.sb.adapter.csvreader.CSVReader"
  (FileName="customer.tbl", Delimiter="|", StartEventPort="true", Schema=Customer)
  INTO InsertCustomer, FileEvents;


/* TODO: deletions */

/* Log outputs */
APPLY JAVA "com.streambase.sb.adapter.csvwriter.CSVWriter"
  (FileName="Query3.csv", IfFileDoesntExist="Create new file")
  FROM Result;


/* Track data file open and close for timing */
CREATE OUTPUT STREAM TimedFileEvents AS
SELECT now() as t, * FROM FileEvents;

/* Log data file events */
APPLY JAVA  "com.streambase.sb.adapter.csvwriter.CSVWriter"
  (FileName="FileEvents.csv", IfFileDoesntExist="Create new file")
  FROM TimedFileEvents;
  
