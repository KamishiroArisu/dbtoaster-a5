/*
CREATE SCHEMA OrdersSchema (
  orderkey       int,
  custkey        int,
  orderstatus    string, -- text(1)
  totalprice     double,
  orderdate      timestamp, -- date
  orderpriority  string, -- text
  clerk          string, -- text
  shippriority   int,
  comment        string  -- text
);

CREATE SCHEMA CustomerSchema (
  custkey      int,
  name         string, -- text
  address      string, -- text
  nationkey    int,
  phone        string, -- text
  acctbal      double,
  mktsegment   string, -- text
  comment      string  -- text
);
*/

CREATE SCHEMA OrdersSchema (
  orderkey       int,
  custkey        int,
  orderstatus    int, -- text(1)
  totalprice     double,
  orderdate      int, -- date
  orderpriority  int, -- text
  clerk          int, -- text
  shippriority   int,
  comment        int  -- text
);

CREATE SCHEMA CustomerSchema (
  custkey      int,
  name         int, -- text
  address      int, -- text
  nationkey    int,
  phone        int, -- text
  acctbal      double,
  mktsegment   int, -- text
  comment      int  -- text
);



/* Main memory TPCH tables */
CREATE MEMORY TABLE Orders   OrdersSchema   PRIMARY KEY (orderkey);
CREATE MEMORY TABLE Customer CustomerSchema PRIMARY KEY (custkey);

CREATE INDEX CustByAcctbal ON Customer (acctbal);
CREATE INDEX OrdersByCust  ON Orders (custkey); 

/* Tuple identification across union of input streams */
CREATE SCHEMA TaggedInputs
  (stream_name string, evt int, o OrdersSchema, c CustomerSchema);

CREATE INPUT STREAM MultiplexedInputs TaggedInputs;


/* Lockset for serial execution across updates and queries. */
CREATE LOCKSET InputLock (i int);
CREATE STREAM InputLocked TaggedInputs;
LOCK InputLock ON 0 FROM MultiplexedInputs INTO InputLocked; 

/* Counter for barriering */
DECLARE Counter int DEFAULT 0;
CREATE OUTPUT STREAM UpdateCounter (i int);
UPDATE Counter FROM (SELECT i FROM UpdateCounter);
SELECT Counter+1 as i FROM InputLocked INTO UpdateCounter;


/*
 * Table change notification streams
 */
CREATE SCHEMA SOrdersSchema   (tid int, o  OrdersSchema);
CREATE SCHEMA SCustomerSchema (tid int, c  CustomerSchema);
 
/* Pre-update serialized streams */ 
CREATE STREAM SInsertOrders   SOrdersSchema;
CREATE STREAM SInsertCustomer SCustomerSchema;

CREATE STREAM SDeleteOrders   SOrdersSchema;
CREATE STREAM SDeleteCustomer SCustomerSchema;

/* Post-update serialized streams */
CREATE STREAM OrdersInserted   SOrdersSchema;
CREATE STREAM CustomerInserted SCustomerSchema;

CREATE STREAM OrdersDeleted    SOrdersSchema;
CREATE STREAM CustomerDeleted  SCustomerSchema;

/* Partition into serialized streams after locking */
SELECT Counter as tid, o  FROM InputLocked
WHERE stream_name = "orders" AND evt = 1 INTO SInsertOrders;

SELECT Counter as tid, c  FROM InputLocked
WHERE stream_name = "customer" AND evt = 1 INTO SInsertCustomer;

SELECT Counter as tid, o  FROM InputLocked
WHERE stream_name = "orders" AND evt = 0 INTO SDeleteOrders;

SELECT Counter as tid, c  FROM InputLocked
WHERE stream_name = "customer" AND evt = 0 INTO SDeleteCustomer;


/* Maintain TPCH tables */
INSERT INTO Orders SELECT o.* FROM SInsertOrders
RETURNING SInsertOrders.* INTO OrdersInserted;

INSERT INTO Customer SELECT c.* FROM SInsertCustomer
RETURNING SInsertCustomer.* INTO CustomerInserted;

DELETE FROM Orders USING SDeleteOrders
WHERE SDeleteOrders.o.orderkey = Orders.orderkey
RETURNING SDeleteOrders.* INTO OrdersDeleted;

DELETE FROM Customer USING SDeleteCustomer
WHERE SDeleteCustomer.c.custkey = Customer.custkey
RETURNING SDeleteCustomer.* INTO CustomerDeleted;


/* Query body. */

CREATE STREAM TableChanged AS
SELECT tid FROM  OrdersInserted UNION OrdersDeleted
           UNION CustomerInserted UNION CustomerDeleted;


/* Table to stream replays and subqueries */
CREATE STREAM CountCustomer AS
SELECT TC.*, count() as numC FROM TableChanged AS TC OUTER JOIN Customer;

CREATE STREAM ValidCounts AS
SELECT tid, 
       (if isnull(numC) then 1 else numC) as expected
FROM CountCustomer;

CREATE STREAM CustomerSubquery AS
SELECT S.*, sum(C2.acctbal) as sumSubAB
FROM ValidCounts AS S OUTER JOIN Customer AS C2
WHERE C2.acctbal > 0;

CREATE STREAM ReplayCustomer AS
SELECT S.*, C1.custkey, C1.nationkey, C1.acctbal
FROM CustomerSubquery AS S OUTER JOIN Customer AS C1;

CREATE STREAM OrdersSubquery AS
SELECT S.*, count(O.orderkey) as subCountO
FROM ReplayCustomer AS S OUTER JOIN Orders AS O
WHERE S.custkey = O.custkey;


/* Keep a counter to determine when we're done scanning from in-memory tables,
 * to unlock and begin processing the next update
 */
DECLARE CBCounter int DEFAULT 0;
CREATE STREAM UpdateCBCounter (i int, tid int, total int);
UPDATE CBCounter FROM (SELECT i FROM UpdateCBCounter);
SELECT CBCounter+1 as i, tid, expected as total
FROM OrdersSubquery INTO UpdateCBCounter;

CREATE STREAM ScanDone AS
SELECT tid, total FROM UpdateCBCounter
WHERE total = CBCounter;

/* Reset counter and unlock the next input as soon as we're done scanning.
 * At this point all tuples from the materialized window for this update
 * are active in the stream graph
 */
UPDATE CBCounter FROM (SELECT 0 as i FROM ScanDone);
CREATE OUTPUT STREAM Unlocked (tid int, total int);
UNLOCK InputLock on 0 FROM ScanDone INTO Unlocked;


/* Outer query */

CREATE STREAM FilteredOuter AS
  SELECT tid, nationkey, acctbal FROM OrdersSubquery
  WHERE acctbal < (if isnull(sumSubAB) then 0 else sumSubAB)
  /* equivalent to 0 = (select sum(1) ...) */
  AND   (isnull(subCountO) or subCountO = 0);

CREATE OUTPUT STREAM Result AS
  SELECT now() as t, nationkey, sum(acctbal) as result
  FROM FilteredOuter[SIZE 1 ADVANCE 1 ON tid] AS S
  GROUP BY nationkey;
