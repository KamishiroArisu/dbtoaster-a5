CREATE SCHEMA ServerSchema (
  rackid int,
  load   double
);

CREATE SCHEMA DispatchSchema (
  event  int,
  rackid int,
  load   double
);

/* Main memory tables */
CREATE MEMORY TABLE Server ServerSchema PRIMARY KEY (rackid, load);

CREATE STREAM Dispatch DispatchSchema;

DECLARE Counter int DEFAULT 0;
CREATE STREAM UpdateCounter (i int);
UPDATE Counter FROM (SELECT i FROM UpdateCounter);
SELECT Counter+1 as i FROM Dispatch INTO UpdateCounter;

/*
 * Table change notification streams
 */
CREATE SCHEMA SServerSchema (tid int, s ServerSchema);
 
/* Pre-update serialized streams */ 
CREATE STREAM SInsertServer SServerSchema;
CREATE STREAM SDeleteServer SServerSchema;

/* Post-update serialized streams */
CREATE STREAM ServerInserted SServerSchema;
CREATE STREAM ServerDeleted  SServerSchema;

/* Partition into serialized streams */
SELECT Counter as tid, l
FROM MultiplexedInputs WHERE evt = 1 INTO SInsertServer;

SELECT Counter as tid, l
FROM MultiplexedInputs WHERE evt = 0 INTO SDeleteServer;

/* Maintain table */
INSERT INTO Server SELECT s.* FROM SInsertServer
RETURNING SInsertServer.* INTO ServerInserted;

DELETE FROM Server USING SDeleteServer
WHERE SDeleteServer.s.rackid = Server.rackid
AND   SDeleteServer.s.load   = Server.load
RETURNING SDeleteServer.* INTO ServerDeleted;

/* Query body */

CREATE STREAM TableChanged AS
SELECT tid FROM  ServerInserted UNION ServerDeleted;

CREATE STREAM Subqueries AS
SELECT TC.tid, sum(S.load) as s2load, count(*) as s3cnt
FROM TableChanged as TC, Server AS S;

CREATE STREAM ReplayServer AS
SELECT S.tid, S.rackid
FROM Subqueries AS S, Server AS S1
WHERE S.s2load * 1.5 < S.s3cnt * S1.load;

CREATE STREAM Result AS
  SELECT now() as t, rackid, count(*) as result
  FROM ReplayServer[SIZE 1 ADVANCE 1 ON tid] AS S
  GROUP BY rackid;


/* Load data. */
CREATE STREAM FileEvents;

APPLY JAVA "com.streambase.sb.adapter.csvreader.CSVReader"
  (FileName="@@PATH@@sl_servers.dat", Delimiter=",", StartEventPort="true",
   Schema=(event int, rackid int, load double))
  INTO Dispatch, FileEvents;
  
/* Log outputs */
APPLY JAVA "com.streambase.sb.adapter.csvwriter.CSVWriter"
  (FileName="serverload.csv",
   IfFileExists="Truncate existing file",
   IfFileDoesntExist="Create new file")
  FROM Result;

/* Track query progress */
CREATE STREAM ProgressCounter AS
  SELECT Counter FROM Dispatch WHERE (Counter % 20) == 0;

/* Track data file open and close for timing */
CREATE OUTPUT STREAM TimedFileEvents AS
  SELECT now() as t, * FROM
    (SELECT * FROM
      (SELECT 0 as Counter, * FROM FileEvents) AS S UNION ProgressCounter );

/* Log data file events */
APPLY JAVA  "com.streambase.sb.adapter.csvwriter.CSVWriter"
  (FileName="file_events.csv",
   IfFileExists="Truncate existing file",
   IfFileDoesntExist="Create new file")
  FROM TimedFileEvents;
  
  