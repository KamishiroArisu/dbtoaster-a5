CREATE SCHEMA LineitemSchema (
  orderkey       int,
  partkey        int,
  suppkey        int,
  linenumber     int,
  quantity       double,
  extendedprice  double,
  discount       double,
  tax            double,
  returnflag     int, -- text(1)
  linestatus     int, -- text(1)
  shipdate       int, -- date
  commitdate     int, -- date
  receiptdate    int, -- date
  shipinstruct   int, -- text
  shipmode       int, -- text
  comment        int  -- text
);

CREATE SCHEMA PartSchema (
  partkey      int,
  name         int, -- text
  mfgr         int, -- text
  brand        int, -- text
  type         int, -- text
  p_size       int,
  container    int, -- text
  retailprice  double,
  comment      int  -- text
);


/* Main memory TPCH tables */
CREATE MEMORY TABLE Lineitem LineitemSchema PRIMARY KEY (orderkey, linenumber);
CREATE MEMORY TABLE Part     PartSchema     PRIMARY KEY (partkey);

CREATE INDEX LineitemByPart ON Lineitem (partkey);

/* Tuple identification across union of input streams */
CREATE SCHEMA TaggedInputs
  (stream_name string, evt int, l LineitemSchema, p PartSchema);

CREATE STREAM MultiplexedInputs TaggedInputs;

/* Counter for barriering */
DECLARE Counter int DEFAULT 0;
CREATE OUTPUT STREAM UpdateCounter (i int);
UPDATE Counter FROM (SELECT i FROM UpdateCounter);
SELECT Counter+1 as i FROM MultiplexedInputs INTO UpdateCounter;

/*
 * Table change notification streams
 */
CREATE SCHEMA SLineitemSchema (tid int, l  LineitemSchema);
CREATE SCHEMA SPartSchema     (tid int, p  PartSchema);
 
/* Pre-update serialized streams */ 
CREATE STREAM SInsertLineitem SLineitemSchema;
CREATE STREAM SInsertPart     SPartSchema;

CREATE STREAM SDeleteLineitem SLineitemSchema;
CREATE STREAM SDeletePart     SPartSchema;

/* Post-update serialized streams */
CREATE STREAM LineitemInserted SLineitemSchema;
CREATE STREAM PartInserted     SPartSchema;

CREATE STREAM LineitemDeleted  SLineitemSchema;
CREATE STREAM PartDeleted      SPartSchema;


/* Partition into serialized streams */
SELECT Counter as tid, l  FROM MultiplexedInputs
WHERE stream_name = "lineitem" AND evt = 1 INTO SInsertLineitem;

SELECT Counter as tid, p  FROM MultiplexedInputs
WHERE stream_name = "part" AND evt = 1 INTO SInsertPart;

SELECT Counter as tid, l  FROM MultiplexedInputs
WHERE stream_name = "lineitem" AND evt = 0 INTO SDeleteLineitem;

SELECT Counter as tid, p  FROM MultiplexedInputs
WHERE stream_name = "part" AND evt = 0 INTO SDeletePart;


/* Maintain TPCH tables */
INSERT INTO Lineitem SELECT l.* FROM SInsertLineitem
RETURNING SInsertLineitem.* INTO LineitemInserted;

INSERT INTO Part SELECT p.* FROM SInsertPart
RETURNING SInsertPart.* INTO PartInserted;

DELETE FROM Lineitem USING SDeleteLineitem
WHERE SDeleteLineitem.l.orderkey = Lineitem.orderkey
  AND SDeleteLineitem.l.linenumber = Lineitem.linenumber
RETURNING SDeleteLineitem.* INTO LineitemDeleted;

DELETE FROM Part USING SDeletePart
WHERE SDeletePart.p.partkey = Part.partkey
RETURNING SDeletePart.* INTO PartDeleted;


/* Query body */
CREATE STREAM TableChanged AS
SELECT tid FROM  LineitemInserted UNION LineitemDeleted
           UNION PartInserted UNION PartDeleted;

/* Table to stream replays */

CREATE STREAM ReplayPart AS
  SELECT S.*, P.partkey
  FROM TableChanged AS S, Part AS P;

/* Subquery */
CREATE STREAM Subquery AS
  SELECT S.*, sum(L2.quantity) as sumQ
  FROM ReplayPart as S, Lineitem AS L2
  WHERE S.partkey = L2.partkey;

CREATE STREAM FilteredReplay AS
  SELECT S.tid, L.extendedprice
  FROM Subquery AS S, Lineitem AS L
  WHERE S.partkey = L.partkey
  AND   L.quantity < 0.005*sumQ;

CREATE STREAM Result AS
  SELECT now() as t, sum(extendedprice) as result
  FROM FilteredReplay[SIZE 1 ADVANCE 1 ON tid] AS S;
