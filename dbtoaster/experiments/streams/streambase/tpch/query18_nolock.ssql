/*
CREATE SCHEMA LineitemSchema (
  orderkey       int,
  partkey        int,
  suppkey        int,
  linenumber     int,
  quantity       double,
  extendedprice  double,
  discount       double,
  tax            double,
  returnflag     string, -- text(1)
  linestatus     string, -- text(1)
  shipdate       timestamp, -- date
  commitdate     timestamp, -- date
  receiptdate    timestamp, -- date
  shipinstruct   string, -- text
  shipmode       string, -- text
  comment        string  -- text
);

CREATE SCHEMA OrdersSchema (
  orderkey       int,
  custkey        int,
  orderstatus    string, -- text(1)
  totalprice     double,
  orderdate      timestamp, -- date
  orderpriority  string, -- text
  clerk          string, -- text
  shippriority   int,
  comment        string  -- text
);

CREATE SCHEMA CustomerSchema (
  custkey      int,
  name         string, -- text
  address      string, -- text
  nationkey    int,
  phone        string, -- text
  acctbal      double,
  mktsegment   string, -- text
  comment      string  -- text
);
*/

CREATE SCHEMA LineitemSchema (
  orderkey       int,
  partkey        int,
  suppkey        int,
  linenumber     int,
  quantity       double,
  extendedprice  double,
  discount       double,
  tax            double,
  returnflag     int, -- text(1)
  linestatus     int, -- text(1)
  shipdate       int, -- date
  commitdate     int, -- date
  receiptdate    int, -- date
  shipinstruct   int, -- text
  shipmode       int, -- text
  comment        int  -- text
);

CREATE SCHEMA OrdersSchema (
  orderkey       int,
  custkey        int,
  orderstatus    int, -- text(1)
  totalprice     double,
  orderdate      int, -- date
  orderpriority  int, -- text
  clerk          int, -- text
  shippriority   int,
  comment        int  -- text
);

CREATE SCHEMA CustomerSchema (
  custkey      int,
  name         int, -- text
  address      int, -- text
  nationkey    int,
  phone        int, -- text
  acctbal      double,
  mktsegment   int, -- text
  comment      int  -- text
);



/* Main memory TPCH tables */
CREATE MEMORY TABLE Lineitem LineitemSchema PRIMARY KEY (orderkey, linenumber);
CREATE MEMORY TABLE Orders   OrdersSchema   PRIMARY KEY (orderkey);
CREATE MEMORY TABLE Customer CustomerSchema PRIMARY KEY (custkey);

CREATE INDEX LByOK on Lineitem (orderkey);

/* Tuple identification across union of input streams */
CREATE SCHEMA TaggedInputs
  (stream_name string, evt int,
   l LineitemSchema, o OrdersSchema, c CustomerSchema);

CREATE INPUT STREAM MultiplexedInputs TaggedInputs;

/* Counter for barriering */
DECLARE Counter int DEFAULT 0;
CREATE OUTPUT STREAM UpdateCounter (i int);
UPDATE Counter FROM (SELECT i FROM UpdateCounter);
SELECT Counter+1 as i FROM MultiplexedInputs INTO UpdateCounter;

/*
 * Table change notification streams
 */
CREATE SCHEMA SLineitemSchema (tid int, l  LineitemSchema);
CREATE SCHEMA SOrdersSchema   (tid int, o  OrdersSchema);
CREATE SCHEMA SCustomerSchema (tid int, c  CustomerSchema);
 
/* Pre-update serialized streams */ 
CREATE STREAM SInsertLineitem SLineitemSchema;
CREATE STREAM SInsertOrders   SOrdersSchema;
CREATE STREAM SInsertCustomer SCustomerSchema;

CREATE STREAM SDeleteLineitem SLineitemSchema;
CREATE STREAM SDeleteOrders   SOrdersSchema;
CREATE STREAM SDeleteCustomer SCustomerSchema;

/* Post-update serialized streams */
CREATE STREAM LineitemInserted SLineitemSchema;
CREATE STREAM OrdersInserted   SOrdersSchema;
CREATE STREAM CustomerInserted SCustomerSchema;

CREATE STREAM LineitemDeleted  SLineitemSchema;
CREATE STREAM OrdersDeleted    SOrdersSchema;
CREATE STREAM CustomerDeleted  SCustomerSchema;


/* Partition into serialized streams after locking */
SELECT Counter as tid, l  FROM MultiplexedInputs
WHERE stream_name = "lineitem" AND evt = 1 INTO SInsertLineitem;

SELECT Counter as tid, o  FROM MultiplexedInputs
WHERE stream_name = "orders" AND evt = 1 INTO SInsertOrders;

SELECT Counter as tid, c  FROM MultiplexedInputs
WHERE stream_name = "customer" AND evt = 1 INTO SInsertCustomer;

SELECT Counter as tid, l  FROM MultiplexedInputs
WHERE stream_name = "lineitem" AND evt = 0 INTO SDeleteLineitem;

SELECT Counter as tid, o  FROM MultiplexedInputs
WHERE stream_name = "orders" AND evt = 0 INTO SDeleteOrders;

SELECT Counter as tid, c  FROM MultiplexedInputs
WHERE stream_name = "customer" AND evt = 0 INTO SDeleteCustomer;


/* Maintain TPCH tables */
INSERT INTO Lineitem SELECT l.* FROM SInsertLineitem
RETURNING SInsertLineitem.* INTO LineitemInserted;

INSERT INTO Orders SELECT o.* FROM SInsertOrders
RETURNING SInsertOrders.* INTO OrdersInserted;

INSERT INTO Customer SELECT c.* FROM SInsertCustomer
RETURNING SInsertCustomer.* INTO CustomerInserted;

DELETE FROM Lineitem USING SDeleteLineitem
WHERE SDeleteLineitem.l.orderkey = Lineitem.orderkey
  AND SDeleteLineitem.l.linenumber = Lineitem.linenumber
RETURNING SDeleteLineitem.* INTO LineitemDeleted;

DELETE FROM Orders USING SDeleteOrders
WHERE SDeleteOrders.o.orderkey = Orders.orderkey
RETURNING SDeleteOrders.* INTO OrdersDeleted;

DELETE FROM Customer USING SDeleteCustomer
WHERE SDeleteCustomer.c.custkey = Customer.custkey
RETURNING SDeleteCustomer.* INTO CustomerDeleted;


/* Query body. */

CREATE STREAM TableChanged AS
SELECT tid FROM  LineitemInserted UNION LineitemDeleted
           UNION OrdersInserted   UNION OrdersDeleted 
           UNION CustomerInserted UNION CustomerDeleted;

/* Table to stream replays */
CREATE STREAM ReplayLineitem AS
SELECT TC.*, L.orderkey, L.quantity
FROM TableChanged AS TC, Lineitem AS L;

CREATE STREAM Subquery2 AS
SELECT S.*, sum(L3.quantity) as sumL3Q
FROM ReplayLineitem AS S, Lineitem AS L3
WHERE S.orderkey = L3.orderkey;

/* Explicitly count the number of L2 rows that satisfy subquery 2.
   doing this as a count expression ensures rows on the replayed stream have
   count as 0, rather than being filtered. */
CREATE STREAM Subquery1 AS
SELECT S.tid, S.orderkey, S.quantity,
       count(if 100 < sumL3Q then 0 else null) as cntSub1 
FROM Subquery2 AS S, Lineitem AS L2
WHERE S.orderkey = L2.orderkey;

CREATE STREAM ReplayLO AS
SELECT S.tid, O.custkey, S.quantity
FROM Subquery1 AS S, Orders AS O
WHERE S.orderkey = O.orderkey
AND 1 <= cntSub1;

CREATE STREAM ReplayLOC AS
SELECT S.*
FROM ReplayLO AS S, Customer AS C
WHERE S.custkey = C.custkey;

CREATE OUTPUT STREAM Result AS
  SELECT now() as t, custkey, sum(quantity) as result
  FROM ReplayLOC[SIZE 1 ADVANCE 1 ON tid] AS S
  GROUP BY custkey;

